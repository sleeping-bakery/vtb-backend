/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Запрос на подтверждение загрузки документа из банка
    /// </summary>
    [DataContract(Name = "UploadExpect")]
    public class UploadExpect : IEquatable<UploadExpect>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="UploadExpect" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadExpect()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="UploadExpect" /> class.
        /// </summary>
        /// <param name="orderId">Идентификатор заявки (required).</param>
        /// <param name="externalDocumentId">Идентификатор загружаемого документа. Формируется партнером (required).</param>
        public UploadExpect(string orderId = default, string externalDocumentId = default)
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null) throw new ArgumentNullException("orderId is a required property for UploadExpect and cannot be null");
            OrderId = orderId;
            // to ensure "externalDocumentId" is required (not null)
            if (externalDocumentId == null) throw new ArgumentNullException("externalDocumentId is a required property for UploadExpect and cannot be null");
            ExternalDocumentId = externalDocumentId;
        }

        /// <summary>
        ///     Идентификатор заявки
        /// </summary>
        /// <value>Идентификатор заявки</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        ///     Идентификатор загружаемого документа. Формируется партнером
        /// </summary>
        /// <value>Идентификатор загружаемого документа. Формируется партнером</value>
        [DataMember(Name = "externalDocumentId", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalDocumentId { get; set; }

        /// <summary>
        ///     Returns true if UploadExpect instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadExpect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadExpect input)
        {
            if (input == null) return false;
            return
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                     OrderId.Equals(input.OrderId))
                ) &&
                (
                    ExternalDocumentId == input.ExternalDocumentId ||
                    (ExternalDocumentId != null &&
                     ExternalDocumentId.Equals(input.ExternalDocumentId))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // OrderId (string) maxLength
            if (OrderId != null && OrderId.Length > 36) yield return new ValidationResult("Invalid value for OrderId, length must be less than 36.", new[] { "OrderId" });

            // OrderId (string) minLength
            if (OrderId != null && OrderId.Length < 36) yield return new ValidationResult("Invalid value for OrderId, length must be greater than 36.", new[] { "OrderId" });

            // OrderId (string) pattern
            var regexOrderId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(OrderId).Success)
                yield return new ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new[] { "OrderId" });

            // ExternalDocumentId (string) maxLength
            if (ExternalDocumentId != null && ExternalDocumentId.Length > 36)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, length must be less than 36.", new[] { "ExternalDocumentId" });

            // ExternalDocumentId (string) minLength
            if (ExternalDocumentId != null && ExternalDocumentId.Length < 36)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, length must be greater than 36.", new[] { "ExternalDocumentId" });

            // ExternalDocumentId (string) pattern
            var regexExternalDocumentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexExternalDocumentId.Match(ExternalDocumentId).Success)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, must match a pattern of " + regexExternalDocumentId, new[] { "ExternalDocumentId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadExpect {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ExternalDocumentId: ").Append(ExternalDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UploadExpect);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (OrderId != null) hashCode = hashCode * 59 + OrderId.GetHashCode();
                if (ExternalDocumentId != null) hashCode = hashCode * 59 + ExternalDocumentId.GetHashCode();
                return hashCode;
            }
        }
    }
}