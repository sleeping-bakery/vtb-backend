/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Список ИНН
    /// </summary>
    [DataContract(Name = "PaglDto")]
    public class PaglDto : IEquatable<PaglDto>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PaglDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaglDto()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PaglDto" /> class.
        /// </summary>
        /// <param name="inn">ИНН (required).</param>
        public PaglDto(string inn = default)
        {
            // to ensure "inn" is required (not null)
            if (inn == null) throw new ArgumentNullException("inn is a required property for PaglDto and cannot be null");
            Inn = inn;
        }

        /// <summary>
        ///     ИНН
        /// </summary>
        /// <value>ИНН</value>
        [DataMember(Name = "inn", IsRequired = true, EmitDefaultValue = true)]
        public string Inn { get; set; }

        /// <summary>
        ///     Returns true if PaglDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PaglDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaglDto input)
        {
            if (input == null) return false;
            return
                Inn == input.Inn ||
                (Inn != null &&
                 Inn.Equals(input.Inn));
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Inn (string) maxLength
            if (Inn != null && Inn.Length > 12) yield return new ValidationResult("Invalid value for Inn, length must be less than 12.", new[] { "Inn" });

            // Inn (string) minLength
            if (Inn != null && Inn.Length < 10) yield return new ValidationResult("Invalid value for Inn, length must be greater than 10.", new[] { "Inn" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaglDto {\n");
            sb.Append("  Inn: ").Append(Inn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PaglDto);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Inn != null) hashCode = hashCode * 59 + Inn.GetHashCode();
                return hashCode;
            }
        }
    }
}