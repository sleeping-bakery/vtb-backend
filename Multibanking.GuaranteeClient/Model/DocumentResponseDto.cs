/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Описание документа
    /// </summary>
    [DataContract(Name = "DocumentResponseDto")]
    public partial class DocumentResponseDto : IEquatable<DocumentResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупкеGUARANTEE_PROJECT_PDF - проект гарантии в формате .pdfPROCUREMENT_DOCUMENTATION - документация по закупке
        /// </summary>
        /// <value>Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупкеGUARANTEE_PROJECT_PDF - проект гарантии в формате .pdfPROCUREMENT_DOCUMENTATION - документация по закупке</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PASSPORT for value: PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")]
            PASSPORT = 1,

            /// <summary>
            /// Enum CORPORATECHARTER for value: CORPORATE_CHARTER
            /// </summary>
            [EnumMember(Value = "CORPORATE_CHARTER")]
            CORPORATECHARTER = 2,

            /// <summary>
            /// Enum QUARTERLYFINANCIALREPORT for value: QUARTERLY_FINANCIAL_REPORT
            /// </summary>
            [EnumMember(Value = "QUARTERLY_FINANCIAL_REPORT")]
            QUARTERLYFINANCIALREPORT = 3,

            /// <summary>
            /// Enum ANNUALFINANCIALREPORT for value: ANNUAL_FINANCIAL_REPORT
            /// </summary>
            [EnumMember(Value = "ANNUAL_FINANCIAL_REPORT")]
            ANNUALFINANCIALREPORT = 4,

            /// <summary>
            /// Enum SHAREHOLDERREGISTRYEXTRACT for value: SHAREHOLDER_REGISTRY_EXTRACT
            /// </summary>
            [EnumMember(Value = "SHAREHOLDER_REGISTRY_EXTRACT")]
            SHAREHOLDERREGISTRYEXTRACT = 5,

            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 6,

            /// <summary>
            /// Enum GUARANTEEDOCX for value: GUARANTEE_DOCX
            /// </summary>
            [EnumMember(Value = "GUARANTEE_DOCX")]
            GUARANTEEDOCX = 7,

            /// <summary>
            /// Enum GUARANTEEPDF for value: GUARANTEE_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_PDF")]
            GUARANTEEPDF = 8,

            /// <summary>
            /// Enum GUARANTEEBANKSIGNATURE for value: GUARANTEE_BANK_SIGNATURE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_BANK_SIGNATURE")]
            GUARANTEEBANKSIGNATURE = 9,

            /// <summary>
            /// Enum GUARANTEEOFFERDOCX for value: GUARANTEE_OFFER_DOCX
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_DOCX")]
            GUARANTEEOFFERDOCX = 10,

            /// <summary>
            /// Enum GUARANTEEOFFERPDF for value: GUARANTEE_OFFER_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_PDF")]
            GUARANTEEOFFERPDF = 11,

            /// <summary>
            /// Enum GUARANTEEOFFERBANKSIGNATURE for value: GUARANTEE_OFFER_BANK_SIGNATURE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_BANK_SIGNATURE")]
            GUARANTEEOFFERBANKSIGNATURE = 12,

            /// <summary>
            /// Enum QUESTIONNAIRECOMPANY for value: QUESTIONNAIRE_COMPANY
            /// </summary>
            [EnumMember(Value = "QUESTIONNAIRE_COMPANY")]
            QUESTIONNAIRECOMPANY = 13,

            /// <summary>
            /// Enum QUESTIONNAIREPERSON for value: QUESTIONNAIRE_PERSON
            /// </summary>
            [EnumMember(Value = "QUESTIONNAIRE_PERSON")]
            QUESTIONNAIREPERSON = 14,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 15,

            /// <summary>
            /// Enum ACCESSIONCONVENTION for value: ACCESSION_CONVENTION
            /// </summary>
            [EnumMember(Value = "ACCESSION_CONVENTION")]
            ACCESSIONCONVENTION = 16,

            /// <summary>
            /// Enum ORDERAPPOINTMENTPOSITION for value: ORDER_APPOINTMENT_POSITION
            /// </summary>
            [EnumMember(Value = "ORDER_APPOINTMENT_POSITION")]
            ORDERAPPOINTMENTPOSITION = 17,

            /// <summary>
            /// Enum DEALSIZEAPPROVEMENT for value: DEAL_SIZE_APPROVEMENT
            /// </summary>
            [EnumMember(Value = "DEAL_SIZE_APPROVEMENT")]
            DEALSIZEAPPROVEMENT = 18,

            /// <summary>
            /// Enum CONTRACTCONCLUDED for value: CONTRACT_CONCLUDED
            /// </summary>
            [EnumMember(Value = "CONTRACT_CONCLUDED")]
            CONTRACTCONCLUDED = 19,

            /// <summary>
            /// Enum PROCUREMENTDOCUMENTATION for value: PROCUREMENT_DOCUMENTATION
            /// </summary>
            [EnumMember(Value = "PROCUREMENT_DOCUMENTATION")]
            PROCUREMENTDOCUMENTATION = 20,

            /// <summary>
            /// Enum GUARANTEEPROJECTPDF for value: GUARANTEE_PROJECT_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_PROJECT_PDF")]
            GUARANTEEPROJECTPDF = 21

        }


        /// <summary>
        /// Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупкеGUARANTEE_PROJECT_PDF - проект гарантии в формате .pdfPROCUREMENT_DOCUMENTATION - документация по закупке
        /// </summary>
        /// <value>Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупкеGUARANTEE_PROJECT_PDF - проект гарантии в формате .pdfPROCUREMENT_DOCUMENTATION - документация по закупке</value>
        [DataMember(Name = "fileUploadType", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Статус документа. DECLINE - документ не прошел проверки. Например проверку антивирусом, DOCUMENTS_REQUESTED - документ не прошел проверку и требуется перезагрузить, LOADED - документ загружен и находится в хранилище, VALIDATION_IN_PROGRESS - документ находится в процессе проверки.
        /// </summary>
        /// <value>Статус документа. DECLINE - документ не прошел проверки. Например проверку антивирусом, DOCUMENTS_REQUESTED - документ не прошел проверку и требуется перезагрузить, LOADED - документ загружен и находится в хранилище, VALIDATION_IN_PROGRESS - документ находится в процессе проверки.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DECLINE for value: DECLINE
            /// </summary>
            [EnumMember(Value = "DECLINE")]
            DECLINE = 1,

            /// <summary>
            /// Enum DOCUMENTSREQUESTED for value: DOCUMENTS_REQUESTED
            /// </summary>
            [EnumMember(Value = "DOCUMENTS_REQUESTED")]
            DOCUMENTSREQUESTED = 2,

            /// <summary>
            /// Enum LOADED for value: LOADED
            /// </summary>
            [EnumMember(Value = "LOADED")]
            LOADED = 3,

            /// <summary>
            /// Enum VALIDATIONINPROGRESS for value: VALIDATION_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "VALIDATION_IN_PROGRESS")]
            VALIDATIONINPROGRESS = 4

        }


        /// <summary>
        /// Статус документа. DECLINE - документ не прошел проверки. Например проверку антивирусом, DOCUMENTS_REQUESTED - документ не прошел проверку и требуется перезагрузить, LOADED - документ загружен и находится в хранилище, VALIDATION_IN_PROGRESS - документ находится в процессе проверки.
        /// </summary>
        /// <value>Статус документа. DECLINE - документ не прошел проверки. Например проверку антивирусом, DOCUMENTS_REQUESTED - документ не прошел проверку и требуется перезагрузить, LOADED - документ загружен и находится в хранилище, VALIDATION_IN_PROGRESS - документ находится в процессе проверки.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentResponseDto" /> class.
        /// </summary>
        /// <param name="filename">Имя документа (required).</param>
        /// <param name="documentId">Идентификатор документа (required).</param>
        /// <param name="type">Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупкеGUARANTEE_PROJECT_PDF - проект гарантии в формате .pdfPROCUREMENT_DOCUMENTATION - документация по закупке (required).</param>
        /// <param name="status">Статус документа. DECLINE - документ не прошел проверки. Например проверку антивирусом, DOCUMENTS_REQUESTED - документ не прошел проверку и требуется перезагрузить, LOADED - документ загружен и находится в хранилище, VALIDATION_IN_PROGRESS - документ находится в процессе проверки. (required).</param>
        /// <param name="ownerId">Внешний идентификатор владельца документа.</param>
        public DocumentResponseDto(string filename = default(string), string documentId = default(string), TypeEnum type = default(TypeEnum), StatusEnum status = default(StatusEnum), string ownerId = default(string))
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for DocumentResponseDto and cannot be null");
            }
            this.Filename = filename;
            // to ensure "documentId" is required (not null)
            if (documentId == null)
            {
                throw new ArgumentNullException("documentId is a required property for DocumentResponseDto and cannot be null");
            }
            this.DocumentId = documentId;
            this.Type = type;
            this.Status = status;
            this.OwnerId = ownerId;
        }

        /// <summary>
        /// Имя документа
        /// </summary>
        /// <value>Имя документа</value>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Идентификатор документа
        /// </summary>
        /// <value>Идентификатор документа</value>
        [DataMember(Name = "documentId", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Внешний идентификатор владельца документа
        /// </summary>
        /// <value>Внешний идентификатор владельца документа</value>
        [DataMember(Name = "ownerId", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentResponseDto {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FileUploadType: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentResponseDto);
        }

        /// <summary>
        /// Returns true if DocumentResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentResponseDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Filename (string) maxLength
            if (this.Filename != null && this.Filename.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filename, length must be less than 255.", new [] { "Filename" });
            }

            // Filename (string) minLength
            if (this.Filename != null && this.Filename.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filename, length must be greater than 1.", new [] { "Filename" });
            }

            // DocumentId (string) maxLength
            if (this.DocumentId != null && this.DocumentId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentId, length must be less than 36.", new [] { "DocumentId" });
            }

            // DocumentId (string) minLength
            if (this.DocumentId != null && this.DocumentId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentId, length must be greater than 36.", new [] { "DocumentId" });
            }

            // DocumentId (string) pattern
            Regex regexDocumentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexDocumentId.Match(this.DocumentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentId, must match a pattern of " + regexDocumentId, new [] { "DocumentId" });
            }

            // OwnerId (string) maxLength
            if (this.OwnerId != null && this.OwnerId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be less than 36.", new [] { "OwnerId" });
            }

            // OwnerId (string) minLength
            if (this.OwnerId != null && this.OwnerId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be greater than 36.", new [] { "OwnerId" });
            }

            // OwnerId (string) pattern
            Regex regexOwnerId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexOwnerId.Match(this.OwnerId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, must match a pattern of " + regexOwnerId, new [] { "OwnerId" });
            }

            yield break;
        }
    }

}
