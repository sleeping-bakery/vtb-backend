/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Статус заявки на получение банковской гарантии
    /// </summary>
    [DataContract(Name = "OrderStatus")]
    public class OrderStatus : IEquatable<OrderStatus>, IValidatableObject
    {
        /// <summary>
        ///     Статус заявки. IN_PROCESS - в процессе, REJECTED_BY_BANK - отказ, REJECTED_BY_CLIENT - отказ клиента, PENDING_CLIENT - ожидает действий клиента, PAY_COMMISSION - Ожидает
        ///     оплаты комиссии, EXECUTED - гарантия предоставлена банком, PRE_APPROVED - заявка предварительно одобрена, OFFER_CHANGING_REQUESTED - Запрос изменения оферты
        /// </summary>
        /// <value>
        ///     Статус заявки. IN_PROCESS - в процессе, REJECTED_BY_BANK - отказ, REJECTED_BY_CLIENT - отказ клиента, PENDING_CLIENT - ожидает действий клиента, PAY_COMMISSION - Ожидает
        ///     оплаты комиссии, EXECUTED - гарантия предоставлена банком, PRE_APPROVED - заявка предварительно одобрена, OFFER_CHANGING_REQUESTED - Запрос изменения оферты
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            /// <summary>
            ///     Enum INPROCESS for value: IN_PROCESS
            /// </summary>
            [EnumMember(Value = "IN_PROCESS")] INPROCESS = 1,

            /// <summary>
            ///     Enum REJECTEDBYBANK for value: REJECTED_BY_BANK
            /// </summary>
            [EnumMember(Value = "REJECTED_BY_BANK")]
            REJECTEDBYBANK = 2,

            /// <summary>
            ///     Enum PENDINGCLIENT for value: PENDING_CLIENT
            /// </summary>
            [EnumMember(Value = "PENDING_CLIENT")] PENDINGCLIENT = 3,

            /// <summary>
            ///     Enum PAYCOMMISSION for value: PAY_COMMISSION
            /// </summary>
            [EnumMember(Value = "PAY_COMMISSION")] PAYCOMMISSION = 4,

            /// <summary>
            ///     Enum EXECUTED for value: EXECUTED
            /// </summary>
            [EnumMember(Value = "EXECUTED")] EXECUTED = 5,

            /// <summary>
            ///     Enum PREAPPROVED for value: PRE_APPROVED
            /// </summary>
            [EnumMember(Value = "PRE_APPROVED")] PREAPPROVED = 6,

            /// <summary>
            ///     Enum OFFERCHANGINGREQUESTED for value: OFFER_CHANGING_REQUESTED
            /// </summary>
            [EnumMember(Value = "OFFER_CHANGING_REQUESTED")]
            OFFERCHANGINGREQUESTED = 7,

            /// <summary>
            ///     Enum REJECTEDBYCLIENT for value: REJECTED_BY_CLIENT
            /// </summary>
            [EnumMember(Value = "REJECTED_BY_CLIENT")]
            REJECTEDBYCLIENT = 8
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderStatus()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        /// <param name="commission">Величина комиссии.</param>
        /// <param name="documents">documents.</param>
        /// <param name="orderId">Идентификатор заявки.</param>
        /// <param name="orderNumber">Номер заявки.</param>
        /// <param name="legalNumber">Номер гарантии.</param>
        /// <param name="label">Метка гарантии.</param>
        /// <param name="orderStatus">
        ///     Статус заявки. IN_PROCESS - в процессе, REJECTED_BY_BANK - отказ, REJECTED_BY_CLIENT - отказ клиента, PENDING_CLIENT - ожидает действий клиента,
        ///     PAY_COMMISSION - Ожидает оплаты комиссии, EXECUTED - гарантия предоставлена банком, PRE_APPROVED - заявка предварительно одобрена, OFFER_CHANGING_REQUESTED - Запрос изменения
        ///     оферты (required).
        /// </param>
        /// <param name="statusDescription">Описание статуса.</param>
        /// <param name="countComments">countComments.</param>
        /// <param name="parentId">Идентификатор родительской заявки.</param>
        /// <param name="startDate">Дата начала банковской гарантии. Не может быть ранее текущей даты.Должна быть меньше даты окончания гарантии.</param>
        /// <param name="endDate">Дата окончания банковской гарантии. Не может быть ранее текущей даты..</param>
        /// <param name="bankGuaranteeSum">Сумма гарантии.</param>
        /// <param name="annualInterestRate">Ставка комиссии,в % годовых.</param>
        public OrderStatus(decimal commission = default, List<FileDownload> documents = default, string orderId = default, string orderNumber = default,
            string legalNumber = default, string label = default, OrderStatusEnum orderStatus = default, string statusDescription = default,
            CommentCountResponseDto countComments = default, string parentId = default, DateTime startDate = default, DateTime endDate = default,
            decimal bankGuaranteeSum = default, decimal annualInterestRate = default)
        {
            _OrderStatus = orderStatus;
            Commission = commission;
            Documents = documents;
            OrderId = orderId;
            OrderNumber = orderNumber;
            LegalNumber = legalNumber;
            Label = label;
            StatusDescription = statusDescription;
            CountComments = countComments;
            ParentId = parentId;
            StartDate = startDate;
            EndDate = endDate;
            BankGuaranteeSum = bankGuaranteeSum;
            AnnualInterestRate = annualInterestRate;
        }


        /// <summary>
        ///     Статус заявки. IN_PROCESS - в процессе, REJECTED_BY_BANK - отказ, REJECTED_BY_CLIENT - отказ клиента, PENDING_CLIENT - ожидает действий клиента, PAY_COMMISSION - Ожидает
        ///     оплаты комиссии, EXECUTED - гарантия предоставлена банком, PRE_APPROVED - заявка предварительно одобрена, OFFER_CHANGING_REQUESTED - Запрос изменения оферты
        /// </summary>
        /// <value>
        ///     Статус заявки. IN_PROCESS - в процессе, REJECTED_BY_BANK - отказ, REJECTED_BY_CLIENT - отказ клиента, PENDING_CLIENT - ожидает действий клиента, PAY_COMMISSION - Ожидает
        ///     оплаты комиссии, EXECUTED - гарантия предоставлена банком, PRE_APPROVED - заявка предварительно одобрена, OFFER_CHANGING_REQUESTED - Запрос изменения оферты
        /// </value>
        [DataMember(Name = "orderStatus", IsRequired = true, EmitDefaultValue = true)]
        public OrderStatusEnum _OrderStatus { get; set; }

        /// <summary>
        ///     Величина комиссии
        /// </summary>
        /// <value>Величина комиссии</value>
        [DataMember(Name = "commission", EmitDefaultValue = false)]
        public decimal Commission { get; set; }

        /// <summary>
        ///     Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<FileDownload> Documents { get; set; }

        /// <summary>
        ///     Идентификатор заявки
        /// </summary>
        /// <value>Идентификатор заявки</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        ///     Номер заявки
        /// </summary>
        /// <value>Номер заявки</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        ///     Номер гарантии
        /// </summary>
        /// <value>Номер гарантии</value>
        [DataMember(Name = "legalNumber", EmitDefaultValue = false)]
        public string LegalNumber { get; set; }

        /// <summary>
        ///     Метка гарантии
        /// </summary>
        /// <value>Метка гарантии</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        ///     Описание статуса
        /// </summary>
        /// <value>Описание статуса</value>
        [DataMember(Name = "statusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        ///     Gets or Sets CountComments
        /// </summary>
        [DataMember(Name = "countComments", EmitDefaultValue = false)]
        public CommentCountResponseDto CountComments { get; set; }

        /// <summary>
        ///     Идентификатор родительской заявки
        /// </summary>
        /// <value>Идентификатор родительской заявки</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        ///     Дата начала банковской гарантии. Не может быть ранее текущей даты.Должна быть меньше даты окончания гарантии
        /// </summary>
        /// <value>Дата начала банковской гарантии. Не может быть ранее текущей даты.Должна быть меньше даты окончания гарантии</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        ///     Дата окончания банковской гарантии. Не может быть ранее текущей даты.
        /// </summary>
        /// <value>Дата окончания банковской гарантии. Не может быть ранее текущей даты.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        ///     Сумма гарантии
        /// </summary>
        /// <value>Сумма гарантии</value>
        [DataMember(Name = "bankGuaranteeSum", EmitDefaultValue = false)]
        public decimal BankGuaranteeSum { get; set; }

        /// <summary>
        ///     Ставка комиссии,в % годовых
        /// </summary>
        /// <value>Ставка комиссии,в % годовых</value>
        [DataMember(Name = "annualInterestRate", EmitDefaultValue = false)]
        public decimal AnnualInterestRate { get; set; }

        /// <summary>
        ///     Returns true if OrderStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStatus input)
        {
            if (input == null) return false;
            return
                (
                    Commission == input.Commission ||
                    Commission.Equals(input.Commission)
                ) &&
                (
                    Documents == input.Documents ||
                    (Documents != null &&
                     input.Documents != null &&
                     Documents.SequenceEqual(input.Documents))
                ) &&
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                     OrderId.Equals(input.OrderId))
                ) &&
                (
                    OrderNumber == input.OrderNumber ||
                    (OrderNumber != null &&
                     OrderNumber.Equals(input.OrderNumber))
                ) &&
                (
                    LegalNumber == input.LegalNumber ||
                    (LegalNumber != null &&
                     LegalNumber.Equals(input.LegalNumber))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                     Label.Equals(input.Label))
                ) &&
                (
                    _OrderStatus == input._OrderStatus ||
                    _OrderStatus.Equals(input._OrderStatus)
                ) &&
                (
                    StatusDescription == input.StatusDescription ||
                    (StatusDescription != null &&
                     StatusDescription.Equals(input.StatusDescription))
                ) &&
                (
                    CountComments == input.CountComments ||
                    (CountComments != null &&
                     CountComments.Equals(input.CountComments))
                ) &&
                (
                    ParentId == input.ParentId ||
                    (ParentId != null &&
                     ParentId.Equals(input.ParentId))
                ) &&
                (
                    StartDate == input.StartDate ||
                    (StartDate != null &&
                     StartDate.Equals(input.StartDate))
                ) &&
                (
                    EndDate == input.EndDate ||
                    (EndDate != null &&
                     EndDate.Equals(input.EndDate))
                ) &&
                (
                    BankGuaranteeSum == input.BankGuaranteeSum ||
                    BankGuaranteeSum.Equals(input.BankGuaranteeSum)
                ) &&
                (
                    AnnualInterestRate == input.AnnualInterestRate ||
                    AnnualInterestRate.Equals(input.AnnualInterestRate)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Commission (decimal) maximum
            if (Commission > 9007199254740991)
                yield return new ValidationResult("Invalid value for Commission, must be a value less than or equal to 9007199254740991.", new[] { "Commission" });

            // Commission (decimal) minimum
            if (Commission < 0) yield return new ValidationResult("Invalid value for Commission, must be a value greater than or equal to 0.", new[] { "Commission" });

            // OrderId (string) maxLength
            if (OrderId != null && OrderId.Length > 36) yield return new ValidationResult("Invalid value for OrderId, length must be less than 36.", new[] { "OrderId" });

            // OrderId (string) minLength
            if (OrderId != null && OrderId.Length < 36) yield return new ValidationResult("Invalid value for OrderId, length must be greater than 36.", new[] { "OrderId" });

            // OrderId (string) pattern
            var regexOrderId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(OrderId).Success)
                yield return new ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new[] { "OrderId" });

            // OrderNumber (string) maxLength
            if (OrderNumber != null && OrderNumber.Length > 255)
                yield return new ValidationResult("Invalid value for OrderNumber, length must be less than 255.", new[] { "OrderNumber" });

            // OrderNumber (string) minLength
            if (OrderNumber != null && OrderNumber.Length < 1)
                yield return new ValidationResult("Invalid value for OrderNumber, length must be greater than 1.", new[] { "OrderNumber" });

            // LegalNumber (string) maxLength
            if (LegalNumber != null && LegalNumber.Length > 255)
                yield return new ValidationResult("Invalid value for LegalNumber, length must be less than 255.", new[] { "LegalNumber" });

            // LegalNumber (string) minLength
            if (LegalNumber != null && LegalNumber.Length < 1)
                yield return new ValidationResult("Invalid value for LegalNumber, length must be greater than 1.", new[] { "LegalNumber" });

            // Label (string) maxLength
            if (Label != null && Label.Length > 255) yield return new ValidationResult("Invalid value for Label, length must be less than 255.", new[] { "Label" });

            // Label (string) minLength
            if (Label != null && Label.Length < 1) yield return new ValidationResult("Invalid value for Label, length must be greater than 1.", new[] { "Label" });

            // StatusDescription (string) maxLength
            if (StatusDescription != null && StatusDescription.Length > 255)
                yield return new ValidationResult("Invalid value for StatusDescription, length must be less than 255.", new[] { "StatusDescription" });

            // StatusDescription (string) minLength
            if (StatusDescription != null && StatusDescription.Length < 1)
                yield return new ValidationResult("Invalid value for StatusDescription, length must be greater than 1.", new[] { "StatusDescription" });

            // ParentId (string) maxLength
            if (ParentId != null && ParentId.Length > 36) yield return new ValidationResult("Invalid value for ParentId, length must be less than 36.", new[] { "ParentId" });

            // ParentId (string) minLength
            if (ParentId != null && ParentId.Length < 36) yield return new ValidationResult("Invalid value for ParentId, length must be greater than 36.", new[] { "ParentId" });

            // ParentId (string) pattern
            var regexParentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(ParentId).Success)
                yield return new ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new[] { "ParentId" });

            // StartDate (DateTime) maxLength
            if (StartDate != null && StartDate.ToString().Length > 10)
                yield return new ValidationResult("Invalid value for StartDate, length must be less than 10.", new[] { "StartDate" });

            // StartDate (DateTime) minLength
            if (StartDate != null && StartDate.ToString().Length < 10)
                yield return new ValidationResult("Invalid value for StartDate, length must be greater than 10.", new[] { "StartDate" });

            // StartDate (DateTime) pattern
            var regexStartDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexStartDate.Match(StartDate.ToString()).Success)
                yield return new ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new[] { "StartDate" });

            // EndDate (DateTime) maxLength
            if (EndDate != null && EndDate.ToString().Length > 10)
                yield return new ValidationResult("Invalid value for EndDate, length must be less than 10.", new[] { "EndDate" });

            // EndDate (DateTime) minLength
            if (EndDate != null && EndDate.ToString().Length < 10)
                yield return new ValidationResult("Invalid value for EndDate, length must be greater than 10.", new[] { "EndDate" });

            // EndDate (DateTime) pattern
            var regexEndDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexEndDate.Match(EndDate.ToString()).Success)
                yield return new ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new[] { "EndDate" });

            // BankGuaranteeSum (decimal) maximum
            if (BankGuaranteeSum > 9007199254740991)
                yield return new ValidationResult("Invalid value for BankGuaranteeSum, must be a value less than or equal to 9007199254740991.", new[] { "BankGuaranteeSum" });

            // BankGuaranteeSum (decimal) minimum
            if (BankGuaranteeSum < 0)
                yield return new ValidationResult("Invalid value for BankGuaranteeSum, must be a value greater than or equal to 0.", new[] { "BankGuaranteeSum" });

            // AnnualInterestRate (decimal) maximum
            if (AnnualInterestRate > 9007199254740991)
                yield return new ValidationResult("Invalid value for AnnualInterestRate, must be a value less than or equal to 9007199254740991.", new[] { "AnnualInterestRate" });

            // AnnualInterestRate (decimal) minimum
            if (AnnualInterestRate < 0)
                yield return new ValidationResult("Invalid value for AnnualInterestRate, must be a value greater than or equal to 0.", new[] { "AnnualInterestRate" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  LegalNumber: ").Append(LegalNumber).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  _OrderStatus: ").Append(_OrderStatus).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  CountComments: ").Append(CountComments).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  BankGuaranteeSum: ").Append(BankGuaranteeSum).Append("\n");
            sb.Append("  AnnualInterestRate: ").Append(AnnualInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrderStatus);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Commission.GetHashCode();
                if (Documents != null) hashCode = hashCode * 59 + Documents.GetHashCode();
                if (OrderId != null) hashCode = hashCode * 59 + OrderId.GetHashCode();
                if (OrderNumber != null) hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                if (LegalNumber != null) hashCode = hashCode * 59 + LegalNumber.GetHashCode();
                if (Label != null) hashCode = hashCode * 59 + Label.GetHashCode();
                hashCode = hashCode * 59 + _OrderStatus.GetHashCode();
                if (StatusDescription != null) hashCode = hashCode * 59 + StatusDescription.GetHashCode();
                if (CountComments != null) hashCode = hashCode * 59 + CountComments.GetHashCode();
                if (ParentId != null) hashCode = hashCode * 59 + ParentId.GetHashCode();
                if (StartDate != null) hashCode = hashCode * 59 + StartDate.GetHashCode();
                if (EndDate != null) hashCode = hashCode * 59 + EndDate.GetHashCode();
                hashCode = hashCode * 59 + BankGuaranteeSum.GetHashCode();
                hashCode = hashCode * 59 + AnnualInterestRate.GetHashCode();
                return hashCode;
            }
        }
    }
}