/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Документы для заявки на получение банковской гарантии
    /// </summary>
    [DataContract(Name = "FileUpload")]
    public class FileUpload : IEquatable<FileUpload>, IValidatableObject
    {
        /// <summary>
        ///     Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность,
        ///     SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF -
        ///     проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта
        ///     в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник
        ///     бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении,
        ///     ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки,
        ///     CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупке, GUARANTEE_PROJECT_PDF - проект гарантии в формате .pdf,
        ///     PROCUREMENT_DOCUMENTATION - документация по закупке
        /// </summary>
        /// <value>
        ///     Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность,
        ///     SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF -
        ///     проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта
        ///     в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник
        ///     бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении,
        ///     ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки,
        ///     CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупке, GUARANTEE_PROJECT_PDF - проект гарантии в формате .pdf,
        ///     PROCUREMENT_DOCUMENTATION - документация по закупке
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileUploadTypeEnum
        {
            /// <summary>
            ///     Enum PASSPORT for value: PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")] PASSPORT = 1,

            /// <summary>
            ///     Enum CORPORATECHARTER for value: CORPORATE_CHARTER
            /// </summary>
            [EnumMember(Value = "CORPORATE_CHARTER")]
            CORPORATECHARTER = 2,

            /// <summary>
            ///     Enum QUARTERLYFINANCIALREPORT for value: QUARTERLY_FINANCIAL_REPORT
            /// </summary>
            [EnumMember(Value = "QUARTERLY_FINANCIAL_REPORT")]
            QUARTERLYFINANCIALREPORT = 3,

            /// <summary>
            ///     Enum ANNUALFINANCIALREPORT for value: ANNUAL_FINANCIAL_REPORT
            /// </summary>
            [EnumMember(Value = "ANNUAL_FINANCIAL_REPORT")]
            ANNUALFINANCIALREPORT = 4,

            /// <summary>
            ///     Enum SHAREHOLDERREGISTRYEXTRACT for value: SHAREHOLDER_REGISTRY_EXTRACT
            /// </summary>
            [EnumMember(Value = "SHAREHOLDER_REGISTRY_EXTRACT")]
            SHAREHOLDERREGISTRYEXTRACT = 5,

            /// <summary>
            ///     Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")] APPLICATION = 6,

            /// <summary>
            ///     Enum GUARANTEEDOCX for value: GUARANTEE_DOCX
            /// </summary>
            [EnumMember(Value = "GUARANTEE_DOCX")] GUARANTEEDOCX = 7,

            /// <summary>
            ///     Enum GUARANTEEPDF for value: GUARANTEE_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_PDF")] GUARANTEEPDF = 8,

            /// <summary>
            ///     Enum GUARANTEEBANKSIGNATURE for value: GUARANTEE_BANK_SIGNATURE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_BANK_SIGNATURE")]
            GUARANTEEBANKSIGNATURE = 9,

            /// <summary>
            ///     Enum GUARANTEEOFFERDOCX for value: GUARANTEE_OFFER_DOCX
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_DOCX")]
            GUARANTEEOFFERDOCX = 10,

            /// <summary>
            ///     Enum GUARANTEEOFFERPDF for value: GUARANTEE_OFFER_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_PDF")]
            GUARANTEEOFFERPDF = 11,

            /// <summary>
            ///     Enum GUARANTEEOFFERBANKSIGNATURE for value: GUARANTEE_OFFER_BANK_SIGNATURE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_OFFER_BANK_SIGNATURE")]
            GUARANTEEOFFERBANKSIGNATURE = 12,

            /// <summary>
            ///     Enum QUESTIONNAIRECOMPANY for value: QUESTIONNAIRE_COMPANY
            /// </summary>
            [EnumMember(Value = "QUESTIONNAIRE_COMPANY")]
            QUESTIONNAIRECOMPANY = 13,

            /// <summary>
            ///     Enum QUESTIONNAIREPERSON for value: QUESTIONNAIRE_PERSON
            /// </summary>
            [EnumMember(Value = "QUESTIONNAIRE_PERSON")]
            QUESTIONNAIREPERSON = 14,

            /// <summary>
            ///     Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")] OTHER = 15,

            /// <summary>
            ///     Enum ACCESSIONCONVENTION for value: ACCESSION_CONVENTION
            /// </summary>
            [EnumMember(Value = "ACCESSION_CONVENTION")]
            ACCESSIONCONVENTION = 16,

            /// <summary>
            ///     Enum ORDERAPPOINTMENTPOSITION for value: ORDER_APPOINTMENT_POSITION
            /// </summary>
            [EnumMember(Value = "ORDER_APPOINTMENT_POSITION")]
            ORDERAPPOINTMENTPOSITION = 17,

            /// <summary>
            ///     Enum DEALSIZEAPPROVEMENT for value: DEAL_SIZE_APPROVEMENT
            /// </summary>
            [EnumMember(Value = "DEAL_SIZE_APPROVEMENT")]
            DEALSIZEAPPROVEMENT = 18,

            /// <summary>
            ///     Enum CONTRACTCONCLUDED for value: CONTRACT_CONCLUDED
            /// </summary>
            [EnumMember(Value = "CONTRACT_CONCLUDED")]
            CONTRACTCONCLUDED = 19,

            /// <summary>
            ///     Enum PROCUREMENTDOCUMENTATION for value: PROCUREMENT_DOCUMENTATION
            /// </summary>
            [EnumMember(Value = "PROCUREMENT_DOCUMENTATION")]
            PROCUREMENTDOCUMENTATION = 20,

            /// <summary>
            ///     Enum GUARANTEEPROJECTPDF for value: GUARANTEE_PROJECT_PDF
            /// </summary>
            [EnumMember(Value = "GUARANTEE_PROJECT_PDF")]
            GUARANTEEPROJECTPDF = 21
        }

        /// <summary>
        ///     Группа документа
        /// </summary>
        /// <value>Группа документа</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GroupEnumFileUpload
        {
            /// <summary>
            ///     Enum PERSON for value: PERSON
            /// </summary>
            [EnumMember(Value = "PERSON")] PERSON = 1,

            /// <summary>
            ///     Enum COMPANY for value: COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")] COMPANY = 2,

            /// <summary>
            ///     Enum GUARANTEE for value: GUARANTEE
            /// </summary>
            [EnumMember(Value = "GUARANTEE")] GUARANTEE = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FileUpload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileUpload()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FileUpload" /> class.
        /// </summary>
        /// <param name="objectId">Id (required).</param>
        /// <param name="detachedSignature">detachedSignature (required).</param>
        /// <param name="externalDocumentId">Идентификатор загружаемого документа. Формируется партнером (required).</param>
        /// <param name="fileName">Имя передаваемого документа (required).</param>
        /// <param name="group">Группа документа (required).</param>
        /// <param name="fileUploadType">
        ///     Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая
        ///     отчетность, SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx,
        ///     GUARANTEE_PDF - проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx,
        ///     GUARANTEE_OFFER_PDF - оферта в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП),
        ///     QUESTIONNAIRE_PERSON - вопросник бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при
        ///     первичном обращении, ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной
        ///     сделки, CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупке, GUARANTEE_PROJECT_PDF - проект гарантии в формате .pdf,
        ///     PROCUREMENT_DOCUMENTATION - документация по закупке (required).
        /// </param>
        public FileUpload(string objectId = default, DetachedSignature detachedSignature = default, string externalDocumentId = default, string fileName = default,
            GroupEnumFileUpload group = default, FileUploadTypeEnum fileUploadType = default)
        {
            // to ensure "objectId" is required (not null)
            if (objectId == null) throw new ArgumentNullException("objectId is a required property for FileUpload and cannot be null");
            ObjectId = objectId;
            // to ensure "detachedSignature" is required (not null)
            if (detachedSignature == null) throw new ArgumentNullException("detachedSignature is a required property for FileUpload and cannot be null");
            DetachedSignature = detachedSignature;
            // to ensure "externalDocumentId" is required (not null)
            if (externalDocumentId == null) throw new ArgumentNullException("externalDocumentId is a required property for FileUpload and cannot be null");
            ExternalDocumentId = externalDocumentId;
            // to ensure "fileName" is required (not null)
            if (fileName == null) throw new ArgumentNullException("fileName is a required property for FileUpload and cannot be null");
            FileName = fileName;
            Group = group;
            FileUploadType = fileUploadType;
        }


        /// <summary>
        ///     Группа документа
        /// </summary>
        /// <value>Группа документа</value>
        [DataMember(Name = "group", IsRequired = true, EmitDefaultValue = true)]
        public GroupEnumFileUpload Group { get; set; }


        /// <summary>
        ///     Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность,
        ///     SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF -
        ///     проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта
        ///     в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник
        ///     бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении,
        ///     ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки,
        ///     CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупке, GUARANTEE_PROJECT_PDF - проект гарантии в формате .pdf,
        ///     PROCUREMENT_DOCUMENTATION - документация по закупке
        /// </summary>
        /// <value>
        ///     Тип документа. PASSPORT - паспорт, CORPORATE_CHARTER - устав, QUARTERLY_FINANCIAL_REPORT - квартальная отчетность, ANNUAL_FINANCIAL_REPORT - годовая отчетность,
        ///     SHAREHOLDER_REGISTRY_EXTRACT - выписка из реестра акционеров, APPLICATION - заявление на банковскую гарантию, GUARANTEE_DOCX - проект гарантии в формате .docx, GUARANTEE_PDF -
        ///     проект гарантии в формате .pdf, GUARANTEE_BANK_SIGNATURE - документ подписи сотрудника к гарантии, GUARANTEE_OFFER_DOCX - оферта в формате .docx, GUARANTEE_OFFER_PDF - оферта
        ///     в формате .pdf, GUARANTEE_OFFER_BANK_SIGNATURE - документ подписи сотрудника к оферте, QUESTIONNAIRE_COMPANY - вопросник принципала (ЮЛ/ИП), QUESTIONNAIRE_PERSON - вопросник
        ///     бенефициарного владельца (ФЛ), OTHER - прочий документ, ACCESSION_CONVENTION - заявление о присоединении – заполняется только один раз при первичном обращении,
        ///     ORDER_APPOINTMENT_POSITION - копия решения и приказа о назначении на должность исполнительного органа, DEAL_SIZE_APPROVEMENT - документ одобрения крупной сделки,
        ///     CONTRACT_CONCLUDED - заключённый договор, PROCUREMENT_DOCUMENTATION - документация по закупке, GUARANTEE_PROJECT_PDF - проект гарантии в формате .pdf,
        ///     PROCUREMENT_DOCUMENTATION - документация по закупке
        /// </value>
        [DataMember(Name = "fileUploadType", IsRequired = true, EmitDefaultValue = true)]
        public FileUploadTypeEnum FileUploadType { get; set; }

        /// <summary>
        ///     Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name = "objectId", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        ///     Gets or Sets DetachedSignature
        /// </summary>
        [DataMember(Name = "detachedSignature", IsRequired = true, EmitDefaultValue = true)]
        public DetachedSignature DetachedSignature { get; set; }

        /// <summary>
        ///     Идентификатор загружаемого документа. Формируется партнером
        /// </summary>
        /// <value>Идентификатор загружаемого документа. Формируется партнером</value>
        [DataMember(Name = "externalDocumentId", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalDocumentId { get; set; }

        /// <summary>
        ///     Имя передаваемого документа
        /// </summary>
        /// <value>Имя передаваемого документа</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        ///     Returns true if FileUpload instances are equal
        /// </summary>
        /// <param name="input">Instance of FileUpload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileUpload input)
        {
            if (input == null) return false;
            return
                (
                    ObjectId == input.ObjectId ||
                    (ObjectId != null &&
                     ObjectId.Equals(input.ObjectId))
                ) &&
                (
                    DetachedSignature == input.DetachedSignature ||
                    (DetachedSignature != null &&
                     DetachedSignature.Equals(input.DetachedSignature))
                ) &&
                (
                    ExternalDocumentId == input.ExternalDocumentId ||
                    (ExternalDocumentId != null &&
                     ExternalDocumentId.Equals(input.ExternalDocumentId))
                ) &&
                (
                    FileName == input.FileName ||
                    (FileName != null &&
                     FileName.Equals(input.FileName))
                ) &&
                (
                    Group == input.Group ||
                    Group.Equals(input.Group)
                ) &&
                (
                    FileUploadType == input.FileUploadType ||
                    FileUploadType.Equals(input.FileUploadType)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // ObjectId (string) maxLength
            if (ObjectId != null && ObjectId.Length > 36) yield return new ValidationResult("Invalid value for ObjectId, length must be less than 36.", new[] { "ObjectId" });

            // ObjectId (string) minLength
            if (ObjectId != null && ObjectId.Length < 36) yield return new ValidationResult("Invalid value for ObjectId, length must be greater than 36.", new[] { "ObjectId" });

            // ObjectId (string) pattern
            var regexObjectId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexObjectId.Match(ObjectId).Success)
                yield return new ValidationResult("Invalid value for ObjectId, must match a pattern of " + regexObjectId, new[] { "ObjectId" });

            // ExternalDocumentId (string) maxLength
            if (ExternalDocumentId != null && ExternalDocumentId.Length > 36)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, length must be less than 36.", new[] { "ExternalDocumentId" });

            // ExternalDocumentId (string) minLength
            if (ExternalDocumentId != null && ExternalDocumentId.Length < 36)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, length must be greater than 36.", new[] { "ExternalDocumentId" });

            // ExternalDocumentId (string) pattern
            var regexExternalDocumentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexExternalDocumentId.Match(ExternalDocumentId).Success)
                yield return new ValidationResult("Invalid value for ExternalDocumentId, must match a pattern of " + regexExternalDocumentId, new[] { "ExternalDocumentId" });

            // FileName (string) maxLength
            if (FileName != null && FileName.Length > 255) yield return new ValidationResult("Invalid value for FileName, length must be less than 255.", new[] { "FileName" });

            // FileName (string) minLength
            if (FileName != null && FileName.Length < 1) yield return new ValidationResult("Invalid value for FileName, length must be greater than 1.", new[] { "FileName" });

            // FileName (string) pattern
            var regexFileName = new Regex(@"^[А-ЯЁа-яё\\w\\s-]+(\\(\\d+\\))*\\.[A-Za-z\\w]{1,4}$", RegexOptions.CultureInvariant);
            if (false == regexFileName.Match(FileName).Success)
                yield return new ValidationResult("Invalid value for FileName, must match a pattern of " + regexFileName, new[] { "FileName" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileUpload {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  DetachedSignature: ").Append(DetachedSignature).Append("\n");
            sb.Append("  ExternalDocumentId: ").Append(ExternalDocumentId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  FileUploadType: ").Append(FileUploadType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FileUpload);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ObjectId != null) hashCode = hashCode * 59 + ObjectId.GetHashCode();
                if (DetachedSignature != null) hashCode = hashCode * 59 + DetachedSignature.GetHashCode();
                if (ExternalDocumentId != null) hashCode = hashCode * 59 + ExternalDocumentId.GetHashCode();
                if (FileName != null) hashCode = hashCode * 59 + FileName.GetHashCode();
                hashCode = hashCode * 59 + Group.GetHashCode();
                hashCode = hashCode * 59 + FileUploadType.GetHashCode();
                return hashCode;
            }
        }
    }
}