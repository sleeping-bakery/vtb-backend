/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Паспортные данные
    /// </summary>
    [DataContract(Name = "IdentityDocument")]
    public partial class IdentityDocument : IEquatable<IdentityDocument>, IValidatableObject
    {
        /// <summary>
        /// Пол. MALE - Мужской, FEMALE - Женский
        /// </summary>
        /// <value>Пол. MALE - Мужской, FEMALE - Женский</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum MALE for value: MALE
            /// </summary>
            [EnumMember(Value = "MALE")]
            MALE = 1,

            /// <summary>
            /// Enum FEMALE for value: FEMALE
            /// </summary>
            [EnumMember(Value = "FEMALE")]
            FEMALE = 2

        }


        /// <summary>
        /// Пол. MALE - Мужской, FEMALE - Женский
        /// </summary>
        /// <value>Пол. MALE - Мужской, FEMALE - Женский</value>
        [DataMember(Name = "gender", IsRequired = true, EmitDefaultValue = true)]
        public GenderEnum Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityDocument" /> class.
        /// </summary>
        /// <param name="number">Номер. Формат: 6 цифр (required).</param>
        /// <param name="series">Серия. Формат: 4 цифры (required).</param>
        /// <param name="issuedDate">Дата выдачи. Считается корректной, если документ выдан до 20 лет, после 20 лет или после 45 лет. (required).</param>
        /// <param name="issuingAuthority">Кем выдан (required).</param>
        /// <param name="issuingAuthorityCode">Код подразделения. Формат: (3 цифры)-(3 цифры) (required).</param>
        /// <param name="birthDate">Дата рождения. Должна быть более 1900-01-01 (required).</param>
        /// <param name="birthPlace">Место рождения (required).</param>
        /// <param name="gender">Пол. MALE - Мужской, FEMALE - Женский (required).</param>
        public IdentityDocument(string number = default(string), string series = default(string), DateTime issuedDate = default(DateTime), string issuingAuthority = default(string), string issuingAuthorityCode = default(string), DateTime birthDate = default(DateTime), string birthPlace = default(string), GenderEnum gender = default(GenderEnum))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new ArgumentNullException("number is a required property for IdentityDocument and cannot be null");
            }
            this.Number = number;
            // to ensure "series" is required (not null)
            if (series == null)
            {
                throw new ArgumentNullException("series is a required property for IdentityDocument and cannot be null");
            }
            this.Series = series;
            this.IssuedDate = issuedDate;
            // to ensure "issuingAuthority" is required (not null)
            if (issuingAuthority == null)
            {
                throw new ArgumentNullException("issuingAuthority is a required property for IdentityDocument and cannot be null");
            }
            this.IssuingAuthority = issuingAuthority;
            // to ensure "issuingAuthorityCode" is required (not null)
            if (issuingAuthorityCode == null)
            {
                throw new ArgumentNullException("issuingAuthorityCode is a required property for IdentityDocument and cannot be null");
            }
            this.IssuingAuthorityCode = issuingAuthorityCode;
            this.BirthDate = birthDate;
            // to ensure "birthPlace" is required (not null)
            if (birthPlace == null)
            {
                throw new ArgumentNullException("birthPlace is a required property for IdentityDocument and cannot be null");
            }
            this.BirthPlace = birthPlace;
            this.Gender = gender;
        }

        /// <summary>
        /// Номер. Формат: 6 цифр
        /// </summary>
        /// <value>Номер. Формат: 6 цифр</value>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Серия. Формат: 4 цифры
        /// </summary>
        /// <value>Серия. Формат: 4 цифры</value>
        [DataMember(Name = "series", IsRequired = true, EmitDefaultValue = true)]
        public string Series { get; set; }

        /// <summary>
        /// Дата выдачи. Считается корректной, если документ выдан до 20 лет, после 20 лет или после 45 лет.
        /// </summary>
        /// <value>Дата выдачи. Считается корректной, если документ выдан до 20 лет, после 20 лет или после 45 лет.</value>
        [DataMember(Name = "issuedDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime IssuedDate { get; set; }

        /// <summary>
        /// Кем выдан
        /// </summary>
        /// <value>Кем выдан</value>
        [DataMember(Name = "issuingAuthority", IsRequired = true, EmitDefaultValue = true)]
        public string IssuingAuthority { get; set; }

        /// <summary>
        /// Код подразделения. Формат: (3 цифры)-(3 цифры)
        /// </summary>
        /// <value>Код подразделения. Формат: (3 цифры)-(3 цифры)</value>
        [DataMember(Name = "issuingAuthorityCode", IsRequired = true, EmitDefaultValue = true)]
        public string IssuingAuthorityCode { get; set; }

        /// <summary>
        /// Дата рождения. Должна быть более 1900-01-01
        /// </summary>
        /// <value>Дата рождения. Должна быть более 1900-01-01</value>
        [DataMember(Name = "birthDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// Место рождения
        /// </summary>
        /// <value>Место рождения</value>
        [DataMember(Name = "birthPlace", IsRequired = true, EmitDefaultValue = true)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityDocument {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  IssuedDate: ").Append(IssuedDate).Append("\n");
            sb.Append("  IssuingAuthority: ").Append(IssuingAuthority).Append("\n");
            sb.Append("  IssuingAuthorityCode: ").Append(IssuingAuthorityCode).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthPlace: ").Append(BirthPlace).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityDocument);
        }

        /// <summary>
        /// Returns true if IdentityDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.IssuedDate == input.IssuedDate ||
                    (this.IssuedDate != null &&
                    this.IssuedDate.Equals(input.IssuedDate))
                ) && 
                (
                    this.IssuingAuthority == input.IssuingAuthority ||
                    (this.IssuingAuthority != null &&
                    this.IssuingAuthority.Equals(input.IssuingAuthority))
                ) && 
                (
                    this.IssuingAuthorityCode == input.IssuingAuthorityCode ||
                    (this.IssuingAuthorityCode != null &&
                    this.IssuingAuthorityCode.Equals(input.IssuingAuthorityCode))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BirthPlace == input.BirthPlace ||
                    (this.BirthPlace != null &&
                    this.BirthPlace.Equals(input.BirthPlace))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.Series != null)
                {
                    hashCode = (hashCode * 59) + this.Series.GetHashCode();
                }
                if (this.IssuedDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssuedDate.GetHashCode();
                }
                if (this.IssuingAuthority != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAuthority.GetHashCode();
                }
                if (this.IssuingAuthorityCode != null)
                {
                    hashCode = (hashCode * 59) + this.IssuingAuthorityCode.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                if (this.BirthPlace != null)
                {
                    hashCode = (hashCode * 59) + this.BirthPlace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
