/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Данные для передачи документа
    /// </summary>
    [DataContract(Name = "DocumentDownloadDto")]
    public partial class DocumentDownloadDto : IEquatable<DocumentDownloadDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownloadDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentDownloadDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDownloadDto" /> class.
        /// </summary>
        /// <param name="requestId">Идентификатор запроса (required).</param>
        /// <param name="contentUrl">Ссылка для передачи контента.</param>
        /// <param name="expires">Время жизни ссылки в секундах.</param>
        public DocumentDownloadDto(string requestId = default(string), string contentUrl = default(string), long expires = default(long))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for DocumentDownloadDto and cannot be null");
            }
            this.RequestId = requestId;
            this.ContentUrl = contentUrl;
            this.Expires = expires;
        }

        /// <summary>
        /// Идентификатор запроса
        /// </summary>
        /// <value>Идентификатор запроса</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// Ссылка для передачи контента
        /// </summary>
        /// <value>Ссылка для передачи контента</value>
        [DataMember(Name = "contentUrl", EmitDefaultValue = false)]
        public string ContentUrl { get; set; }

        /// <summary>
        /// Время жизни ссылки в секундах
        /// </summary>
        /// <value>Время жизни ссылки в секундах</value>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public long Expires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentDownloadDto {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ContentUrl: ").Append(ContentUrl).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDownloadDto);
        }

        /// <summary>
        /// Returns true if DocumentDownloadDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDownloadDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDownloadDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ContentUrl == input.ContentUrl ||
                    (this.ContentUrl != null &&
                    this.ContentUrl.Equals(input.ContentUrl))
                ) && 
                (
                    this.Expires == input.Expires ||
                    this.Expires.Equals(input.Expires)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.ContentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ContentUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // RequestId (string) maxLength
            if (this.RequestId != null && this.RequestId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 36.", new [] { "RequestId" });
            }

            // RequestId (string) minLength
            if (this.RequestId != null && this.RequestId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be greater than 36.", new [] { "RequestId" });
            }

            // RequestId (string) pattern
            Regex regexRequestId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexRequestId.Match(this.RequestId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must match a pattern of " + regexRequestId, new [] { "RequestId" });
            }

            // ContentUrl (string) maxLength
            if (this.ContentUrl != null && this.ContentUrl.Length > 400)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUrl, length must be less than 400.", new [] { "ContentUrl" });
            }

            // ContentUrl (string) minLength
            if (this.ContentUrl != null && this.ContentUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUrl, length must be greater than 1.", new [] { "ContentUrl" });
            }

            // ContentUrl (string) pattern
            Regex regexContentUrl = new Regex(@"[\\s\\S]*", RegexOptions.CultureInvariant);
            if (false == regexContentUrl.Match(this.ContentUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentUrl, must match a pattern of " + regexContentUrl, new [] { "ContentUrl" });
            }

            // Expires (long) maximum
            if (this.Expires > (long)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expires, must be a value less than or equal to 9007199254740991.", new [] { "Expires" });
            }

            // Expires (long) minimum
            if (this.Expires < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Expires, must be a value greater than or equal to 0.", new [] { "Expires" });
            }

            yield break;
        }
    }

}
