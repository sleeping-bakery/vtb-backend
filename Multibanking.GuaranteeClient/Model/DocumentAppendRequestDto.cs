/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Документ для прикрепления по заявке
    /// </summary>
    [DataContract(Name = "DocumentAppendRequestDto")]
    public partial class DocumentAppendRequestDto : IEquatable<DocumentAppendRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAppendRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentAppendRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAppendRequestDto" /> class.
        /// </summary>
        /// <param name="id">Идентификатор документа (required).</param>
        /// <param name="fileName">Имя документа (required).</param>
        /// <param name="signature">Клиентская подпись документа (required).</param>
        /// <param name="requestId">Идентификатор запроса на создание документа (required).</param>
        public DocumentAppendRequestDto(string id = default(string), string fileName = default(string), string signature = default(string), long requestId = default(long))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DocumentAppendRequestDto and cannot be null");
            }
            this.Id = id;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for DocumentAppendRequestDto and cannot be null");
            }
            this.FileName = fileName;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for DocumentAppendRequestDto and cannot be null");
            }
            this.Signature = signature;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Идентификатор документа
        /// </summary>
        /// <value>Идентификатор документа</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Имя документа
        /// </summary>
        /// <value>Имя документа</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Клиентская подпись документа
        /// </summary>
        /// <value>Клиентская подпись документа</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Идентификатор запроса на создание документа
        /// </summary>
        /// <value>Идентификатор запроса на создание документа</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public long RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentAppendRequestDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentAppendRequestDto);
        }

        /// <summary>
        /// Returns true if DocumentAppendRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentAppendRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentAppendRequestDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    this.RequestId.Equals(input.RequestId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 36.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 36.", new [] { "Id" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            // FileName (string) maxLength
            if (this.FileName != null && this.FileName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be less than 255.", new [] { "FileName" });
            }

            // FileName (string) minLength
            if (this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            // FileName (string) pattern
            Regex regexFileName = new Regex(@"^[А-ЯЁа-яё\\w\\s-]+(\\(\\d+\\))*\\.[A-Za-z\\w]{1,4}$", RegexOptions.CultureInvariant);
            if (false == regexFileName.Match(this.FileName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, must match a pattern of " + regexFileName, new [] { "FileName" });
            }

            // Signature (string) maxLength
            if (this.Signature != null && this.Signature.Length > 15000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signature, length must be less than 15000.", new [] { "Signature" });
            }

            // Signature (string) minLength
            if (this.Signature != null && this.Signature.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signature, length must be greater than 1.", new [] { "Signature" });
            }

            // RequestId (long) maximum
            if (this.RequestId > (long)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must be a value less than or equal to 9007199254740991.", new [] { "RequestId" });
            }

            // RequestId (long) minimum
            if (this.RequestId < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must be a value greater than or equal to 0.", new [] { "RequestId" });
            }

            yield break;
        }
    }

}
