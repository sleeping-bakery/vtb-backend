/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Данные оферты
    /// </summary>
    [DataContract(Name = "OfferDto")]
    public partial class OfferDto : IEquatable<OfferDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDto" /> class.
        /// </summary>
        /// <param name="signOffers">signOffers (required).</param>
        public OfferDto(List<SignOfferDto> signOffers = default(List<SignOfferDto>))
        {
            // to ensure "signOffers" is required (not null)
            if (signOffers == null)
            {
                throw new ArgumentNullException("signOffers is a required property for OfferDto and cannot be null");
            }
            this.SignOffers = signOffers;
        }

        /// <summary>
        /// Gets or Sets SignOffers
        /// </summary>
        [DataMember(Name = "signOffers", IsRequired = true, EmitDefaultValue = true)]
        public List<SignOfferDto> SignOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferDto {\n");
            sb.Append("  SignOffers: ").Append(SignOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfferDto);
        }

        /// <summary>
        /// Returns true if OfferDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OfferDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignOffers == input.SignOffers ||
                    this.SignOffers != null &&
                    input.SignOffers != null &&
                    this.SignOffers.SequenceEqual(input.SignOffers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignOffers != null)
                {
                    hashCode = (hashCode * 59) + this.SignOffers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
