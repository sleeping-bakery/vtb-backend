/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Комментарий
    /// </summary>
    [DataContract(Name = "CommentResponseDto")]
    public class CommentResponseDto : IEquatable<CommentResponseDto>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CommentResponseDto" /> class.
        /// </summary>
        /// <param name="id">Идентификатор комментария.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="text">Текст.</param>
        /// <param name="label">Метка о непрочтенном комментарии.</param>
        /// <param name="files">files.</param>
        public CommentResponseDto(string id = default, DateTime createdDate = default, string text = default, string label = default, List<CommentFileInfoDto> files = default)
        {
            Id = id;
            CreatedDate = createdDate;
            Text = text;
            Label = label;
            Files = files;
        }

        /// <summary>
        ///     Идентификатор комментария
        /// </summary>
        /// <value>Идентификатор комментария</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        ///     Текст
        /// </summary>
        /// <value>Текст</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        ///     Метка о непрочтенном комментарии
        /// </summary>
        /// <value>Метка о непрочтенном комментарии</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        ///     Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        public List<CommentFileInfoDto> Files { get; set; }

        /// <summary>
        ///     Returns true if CommentResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentResponseDto input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    CreatedDate == input.CreatedDate ||
                    (CreatedDate != null &&
                     CreatedDate.Equals(input.CreatedDate))
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    Label == input.Label ||
                    (Label != null &&
                     Label.Equals(input.Label))
                ) &&
                (
                    Files == input.Files ||
                    (Files != null &&
                     input.Files != null &&
                     Files.SequenceEqual(input.Files))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (Id != null && Id.Length > 36) yield return new ValidationResult("Invalid value for Id, length must be less than 36.", new[] { "Id" });

            // Id (string) minLength
            if (Id != null && Id.Length < 36) yield return new ValidationResult("Invalid value for Id, length must be greater than 36.", new[] { "Id" });

            // Id (string) pattern
            var regexId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexId.Match(Id).Success) yield return new ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new[] { "Id" });

            // Text (string) maxLength
            if (Text != null && Text.Length > 500) yield return new ValidationResult("Invalid value for Text, length must be less than 500.", new[] { "Text" });

            // Label (string) maxLength
            if (Label != null && Label.Length > 255) yield return new ValidationResult("Invalid value for Label, length must be less than 255.", new[] { "Label" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentResponseDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CommentResponseDto);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (CreatedDate != null) hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                if (Text != null) hashCode = hashCode * 59 + Text.GetHashCode();
                if (Label != null) hashCode = hashCode * 59 + Label.GetHashCode();
                if (Files != null) hashCode = hashCode * 59 + Files.GetHashCode();
                return hashCode;
            }
        }
    }
}