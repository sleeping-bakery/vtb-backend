/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Информация по гарантии
    /// </summary>
    [DataContract(Name = "BankGuarantee")]
    public class BankGuarantee : IEquatable<BankGuarantee>, IValidatableObject
    {
        /// <summary>
        ///     Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на
        ///     возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </summary>
        /// <value>
        ///     Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на
        ///     возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BankGuaranteeClientTypeEnum
        {
            /// <summary>
            ///     Enum TENDER for value: TENDER
            /// </summary>
            [EnumMember(Value = "TENDER")] TENDER = 1,

            /// <summary>
            ///     Enum GOVERNMENTCONTRACTSEXECUTION for value: GOVERNMENT_CONTRACTS_EXECUTION
            /// </summary>
            [EnumMember(Value = "GOVERNMENT_CONTRACTS_EXECUTION")]
            GOVERNMENTCONTRACTSEXECUTION = 2,

            /// <summary>
            ///     Enum ADVANCEREFUND for value: ADVANCE_REFUND
            /// </summary>
            [EnumMember(Value = "ADVANCE_REFUND")] ADVANCEREFUND = 3,

            /// <summary>
            ///     Enum OBLIGATIONSEXECUTION for value: OBLIGATIONS_EXECUTION
            /// </summary>
            [EnumMember(Value = "OBLIGATIONS_EXECUTION")]
            OBLIGATIONSEXECUTION = 4,

            /// <summary>
            ///     Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")] PAYMENT = 5
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BankGuarantee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankGuarantee()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BankGuarantee" /> class.
        /// </summary>
        /// <param name="procurement">procurement (required).</param>
        /// <param name="bankGuaranteeSum">Сумма гарантии (required).</param>
        /// <param name="bankGuaranteeClientType">
        ///     Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту,
        ///     ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа (required).
        /// </param>
        /// <param name="beneficiary">beneficiary (required).</param>
        /// <param name="endDate">Дата окончания банковской гарантии. Не может быть ранее текущей даты. (required).</param>
        /// <param name="requiredExecutionDate">Желаемая дата выдачи гарантии (required).</param>
        /// <param name="startDate">Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии (required).</param>
        /// <param name="parentId">Идентификатор родительской заявки.</param>
        /// <param name="annualInterestRate">Запрошенная ставка комиссии, в % годовых.</param>
        public BankGuarantee(Procurement procurement = default, decimal bankGuaranteeSum = default, BankGuaranteeClientTypeEnum bankGuaranteeClientType = default,
            Beneficiary beneficiary = default, DateTime endDate = default, DateTime requiredExecutionDate = default, DateTime startDate = default, string parentId = default,
            decimal annualInterestRate = default)
        {
            // to ensure "procurement" is required (not null)
            if (procurement == null) throw new ArgumentNullException("procurement is a required property for BankGuarantee and cannot be null");
            Procurement = procurement;
            BankGuaranteeSum = bankGuaranteeSum;
            BankGuaranteeClientType = bankGuaranteeClientType;
            // to ensure "beneficiary" is required (not null)
            if (beneficiary == null) throw new ArgumentNullException("beneficiary is a required property for BankGuarantee and cannot be null");
            Beneficiary = beneficiary;
            EndDate = endDate;
            RequiredExecutionDate = requiredExecutionDate;
            StartDate = startDate;
            ParentId = parentId;
            AnnualInterestRate = annualInterestRate;
        }


        /// <summary>
        ///     Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на
        ///     возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </summary>
        /// <value>
        ///     Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на
        ///     возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </value>
        [DataMember(Name = "bankGuaranteeClientType", IsRequired = true, EmitDefaultValue = true)]
        public BankGuaranteeClientTypeEnum BankGuaranteeClientType { get; set; }

        /// <summary>
        ///     Gets or Sets Procurement
        /// </summary>
        [DataMember(Name = "procurement", IsRequired = true, EmitDefaultValue = true)]
        public Procurement Procurement { get; set; }

        /// <summary>
        ///     Сумма гарантии
        /// </summary>
        /// <value>Сумма гарантии</value>
        [DataMember(Name = "bankGuaranteeSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal BankGuaranteeSum { get; set; }

        /// <summary>
        ///     Gets or Sets Beneficiary
        /// </summary>
        [DataMember(Name = "beneficiary", IsRequired = true, EmitDefaultValue = true)]
        public Beneficiary Beneficiary { get; set; }

        /// <summary>
        ///     Дата окончания банковской гарантии. Не может быть ранее текущей даты.
        /// </summary>
        /// <value>Дата окончания банковской гарантии. Не может быть ранее текущей даты.</value>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        ///     Желаемая дата выдачи гарантии
        /// </summary>
        /// <value>Желаемая дата выдачи гарантии</value>
        [DataMember(Name = "requiredExecutionDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequiredExecutionDate { get; set; }

        /// <summary>
        ///     Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии
        /// </summary>
        /// <value>Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        ///     Идентификатор родительской заявки
        /// </summary>
        /// <value>Идентификатор родительской заявки</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        ///     Запрошенная ставка комиссии, в % годовых
        /// </summary>
        /// <value>Запрошенная ставка комиссии, в % годовых</value>
        [DataMember(Name = "annualInterestRate", EmitDefaultValue = false)]
        public decimal AnnualInterestRate { get; set; }

        /// <summary>
        ///     Returns true if BankGuarantee instances are equal
        /// </summary>
        /// <param name="input">Instance of BankGuarantee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankGuarantee input)
        {
            if (input == null) return false;
            return
                (
                    Procurement == input.Procurement ||
                    (Procurement != null &&
                     Procurement.Equals(input.Procurement))
                ) &&
                (
                    BankGuaranteeSum == input.BankGuaranteeSum ||
                    BankGuaranteeSum.Equals(input.BankGuaranteeSum)
                ) &&
                (
                    BankGuaranteeClientType == input.BankGuaranteeClientType ||
                    BankGuaranteeClientType.Equals(input.BankGuaranteeClientType)
                ) &&
                (
                    Beneficiary == input.Beneficiary ||
                    (Beneficiary != null &&
                     Beneficiary.Equals(input.Beneficiary))
                ) &&
                (
                    EndDate == input.EndDate ||
                    (EndDate != null &&
                     EndDate.Equals(input.EndDate))
                ) &&
                (
                    RequiredExecutionDate == input.RequiredExecutionDate ||
                    (RequiredExecutionDate != null &&
                     RequiredExecutionDate.Equals(input.RequiredExecutionDate))
                ) &&
                (
                    StartDate == input.StartDate ||
                    (StartDate != null &&
                     StartDate.Equals(input.StartDate))
                ) &&
                (
                    ParentId == input.ParentId ||
                    (ParentId != null &&
                     ParentId.Equals(input.ParentId))
                ) &&
                (
                    AnnualInterestRate == input.AnnualInterestRate ||
                    AnnualInterestRate.Equals(input.AnnualInterestRate)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // BankGuaranteeSum (decimal) maximum
            if (BankGuaranteeSum > 9007199254740991)
                yield return new ValidationResult("Invalid value for BankGuaranteeSum, must be a value less than or equal to 9007199254740991.", new[] { "BankGuaranteeSum" });

            // BankGuaranteeSum (decimal) minimum
            if (BankGuaranteeSum < 0)
                yield return new ValidationResult("Invalid value for BankGuaranteeSum, must be a value greater than or equal to 0.", new[] { "BankGuaranteeSum" });

            // EndDate (DateTime) maxLength
            if (EndDate != null && EndDate.ToString().Length > 10)
                yield return new ValidationResult("Invalid value for EndDate, length must be less than 10.", new[] { "EndDate" });

            // EndDate (DateTime) minLength
            if (EndDate != null && EndDate.ToString().Length < 10)
                yield return new ValidationResult("Invalid value for EndDate, length must be greater than 10.", new[] { "EndDate" });

            // EndDate (DateTime) pattern
            var regexEndDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexEndDate.Match(EndDate.ToString()).Success)
                yield return new ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new[] { "EndDate" });

            // RequiredExecutionDate (DateTime) maxLength
            if (RequiredExecutionDate != null && RequiredExecutionDate.ToString().Length > 10)
                yield return new ValidationResult("Invalid value for RequiredExecutionDate, length must be less than 10.", new[] { "RequiredExecutionDate" });

            // RequiredExecutionDate (DateTime) minLength
            if (RequiredExecutionDate != null && RequiredExecutionDate.ToString().Length < 10)
                yield return new ValidationResult("Invalid value for RequiredExecutionDate, length must be greater than 10.", new[] { "RequiredExecutionDate" });

            // RequiredExecutionDate (DateTime) pattern
            var regexRequiredExecutionDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexRequiredExecutionDate.Match(RequiredExecutionDate.ToString()).Success)
                yield return new ValidationResult("Invalid value for RequiredExecutionDate, must match a pattern of " + regexRequiredExecutionDate,
                    new[] { "RequiredExecutionDate" });

            // StartDate (DateTime) maxLength
            if (StartDate != null && StartDate.ToString().Length > 10)
                yield return new ValidationResult("Invalid value for StartDate, length must be less than 10.", new[] { "StartDate" });

            // StartDate (DateTime) minLength
            if (StartDate != null && StartDate.ToString().Length < 10)
                yield return new ValidationResult("Invalid value for StartDate, length must be greater than 10.", new[] { "StartDate" });

            // StartDate (DateTime) pattern
            var regexStartDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexStartDate.Match(StartDate.ToString()).Success)
                yield return new ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new[] { "StartDate" });

            // ParentId (string) maxLength
            if (ParentId != null && ParentId.Length > 36) yield return new ValidationResult("Invalid value for ParentId, length must be less than 36.", new[] { "ParentId" });

            // ParentId (string) minLength
            if (ParentId != null && ParentId.Length < 36) yield return new ValidationResult("Invalid value for ParentId, length must be greater than 36.", new[] { "ParentId" });

            // ParentId (string) pattern
            var regexParentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(ParentId).Success)
                yield return new ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new[] { "ParentId" });

            // AnnualInterestRate (decimal) maximum
            if (AnnualInterestRate > 99)
                yield return new ValidationResult("Invalid value for AnnualInterestRate, must be a value less than or equal to 99.", new[] { "AnnualInterestRate" });

            // AnnualInterestRate (decimal) minimum
            if (AnnualInterestRate < 0)
                yield return new ValidationResult("Invalid value for AnnualInterestRate, must be a value greater than or equal to 0.", new[] { "AnnualInterestRate" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankGuarantee {\n");
            sb.Append("  Procurement: ").Append(Procurement).Append("\n");
            sb.Append("  BankGuaranteeSum: ").Append(BankGuaranteeSum).Append("\n");
            sb.Append("  BankGuaranteeClientType: ").Append(BankGuaranteeClientType).Append("\n");
            sb.Append("  Beneficiary: ").Append(Beneficiary).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RequiredExecutionDate: ").Append(RequiredExecutionDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  AnnualInterestRate: ").Append(AnnualInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BankGuarantee);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Procurement != null) hashCode = hashCode * 59 + Procurement.GetHashCode();
                hashCode = hashCode * 59 + BankGuaranteeSum.GetHashCode();
                hashCode = hashCode * 59 + BankGuaranteeClientType.GetHashCode();
                if (Beneficiary != null) hashCode = hashCode * 59 + Beneficiary.GetHashCode();
                if (EndDate != null) hashCode = hashCode * 59 + EndDate.GetHashCode();
                if (RequiredExecutionDate != null) hashCode = hashCode * 59 + RequiredExecutionDate.GetHashCode();
                if (StartDate != null) hashCode = hashCode * 59 + StartDate.GetHashCode();
                if (ParentId != null) hashCode = hashCode * 59 + ParentId.GetHashCode();
                hashCode = hashCode * 59 + AnnualInterestRate.GetHashCode();
                return hashCode;
            }
        }
    }
}