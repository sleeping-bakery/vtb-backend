/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Информация по гарантии
    /// </summary>
    [DataContract(Name = "BankGuarantee")]
    public partial class BankGuarantee : IEquatable<BankGuarantee>, IValidatableObject
    {
        /// <summary>
        /// Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </summary>
        /// <value>Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BankGuaranteeClientTypeEnum
        {
            /// <summary>
            /// Enum TENDER for value: TENDER
            /// </summary>
            [EnumMember(Value = "TENDER")]
            TENDER = 1,

            /// <summary>
            /// Enum GOVERNMENTCONTRACTSEXECUTION for value: GOVERNMENT_CONTRACTS_EXECUTION
            /// </summary>
            [EnumMember(Value = "GOVERNMENT_CONTRACTS_EXECUTION")]
            GOVERNMENTCONTRACTSEXECUTION = 2,

            /// <summary>
            /// Enum ADVANCEREFUND for value: ADVANCE_REFUND
            /// </summary>
            [EnumMember(Value = "ADVANCE_REFUND")]
            ADVANCEREFUND = 3,

            /// <summary>
            /// Enum OBLIGATIONSEXECUTION for value: OBLIGATIONS_EXECUTION
            /// </summary>
            [EnumMember(Value = "OBLIGATIONS_EXECUTION")]
            OBLIGATIONSEXECUTION = 4,

            /// <summary>
            /// Enum PAYMENT for value: PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENT = 5

        }


        /// <summary>
        /// Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа
        /// </summary>
        /// <value>Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа</value>
        [DataMember(Name = "bankGuaranteeClientType", IsRequired = true, EmitDefaultValue = true)]
        public BankGuaranteeClientTypeEnum BankGuaranteeClientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankGuarantee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankGuarantee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankGuarantee" /> class.
        /// </summary>
        /// <param name="procurement">procurement (required).</param>
        /// <param name="bankGuaranteeSum">Сумма гарантии (required).</param>
        /// <param name="bankGuaranteeClientType">Вид банковской гарантии. TENDER - тендерная гарантия, GOVERNMENT_CONTRACTS_EXECUTION - Обеспечение исполнения обязательств по контракту, ADVANCE_REFUND - Обеспечение на возврат аванса, OBLIGATIONS_EXECUTION - Банковская гарантия на обеспечение гарантийных обязательств, PAYMENT - Гарантия платежа (required).</param>
        /// <param name="beneficiary">beneficiary (required).</param>
        /// <param name="endDate">Дата окончания банковской гарантии. Не может быть ранее текущей даты. (required).</param>
        /// <param name="requiredExecutionDate">Желаемая дата выдачи гарантии (required).</param>
        /// <param name="startDate">Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии (required).</param>
        /// <param name="parentId">Идентификатор родительской заявки.</param>
        /// <param name="annualInterestRate">Запрошенная ставка комиссии, в % годовых.</param>
        public BankGuarantee(Procurement procurement = default(Procurement), decimal bankGuaranteeSum = default(decimal), BankGuaranteeClientTypeEnum bankGuaranteeClientType = default(BankGuaranteeClientTypeEnum), Beneficiary beneficiary = default(Beneficiary), DateTime endDate = default(DateTime), DateTime requiredExecutionDate = default(DateTime), DateTime startDate = default(DateTime), string parentId = default(string), decimal annualInterestRate = default(decimal))
        {
            // to ensure "procurement" is required (not null)
            if (procurement == null)
            {
                throw new ArgumentNullException("procurement is a required property for BankGuarantee and cannot be null");
            }
            this.Procurement = procurement;
            this.BankGuaranteeSum = bankGuaranteeSum;
            this.BankGuaranteeClientType = bankGuaranteeClientType;
            // to ensure "beneficiary" is required (not null)
            if (beneficiary == null)
            {
                throw new ArgumentNullException("beneficiary is a required property for BankGuarantee and cannot be null");
            }
            this.Beneficiary = beneficiary;
            this.EndDate = endDate;
            this.RequiredExecutionDate = requiredExecutionDate;
            this.StartDate = startDate;
            this.ParentId = parentId;
            this.AnnualInterestRate = annualInterestRate;
        }

        /// <summary>
        /// Gets or Sets Procurement
        /// </summary>
        [DataMember(Name = "procurement", IsRequired = true, EmitDefaultValue = true)]
        public Procurement Procurement { get; set; }

        /// <summary>
        /// Сумма гарантии
        /// </summary>
        /// <value>Сумма гарантии</value>
        [DataMember(Name = "bankGuaranteeSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal BankGuaranteeSum { get; set; }

        /// <summary>
        /// Gets or Sets Beneficiary
        /// </summary>
        [DataMember(Name = "beneficiary", IsRequired = true, EmitDefaultValue = true)]
        public Beneficiary Beneficiary { get; set; }

        /// <summary>
        /// Дата окончания банковской гарантии. Не может быть ранее текущей даты.
        /// </summary>
        /// <value>Дата окончания банковской гарантии. Не может быть ранее текущей даты.</value>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Желаемая дата выдачи гарантии
        /// </summary>
        /// <value>Желаемая дата выдачи гарантии</value>
        [DataMember(Name = "requiredExecutionDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequiredExecutionDate { get; set; }

        /// <summary>
        /// Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии
        /// </summary>
        /// <value>Дата начала банковской гарантии. Не может быть ранее текущей даты. Должна быть меньше даты окончания гарантии</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Идентификатор родительской заявки
        /// </summary>
        /// <value>Идентификатор родительской заявки</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Запрошенная ставка комиссии, в % годовых
        /// </summary>
        /// <value>Запрошенная ставка комиссии, в % годовых</value>
        [DataMember(Name = "annualInterestRate", EmitDefaultValue = false)]
        public decimal AnnualInterestRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankGuarantee {\n");
            sb.Append("  Procurement: ").Append(Procurement).Append("\n");
            sb.Append("  BankGuaranteeSum: ").Append(BankGuaranteeSum).Append("\n");
            sb.Append("  BankGuaranteeClientType: ").Append(BankGuaranteeClientType).Append("\n");
            sb.Append("  Beneficiary: ").Append(Beneficiary).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RequiredExecutionDate: ").Append(RequiredExecutionDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  AnnualInterestRate: ").Append(AnnualInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankGuarantee);
        }

        /// <summary>
        /// Returns true if BankGuarantee instances are equal
        /// </summary>
        /// <param name="input">Instance of BankGuarantee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankGuarantee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Procurement == input.Procurement ||
                    (this.Procurement != null &&
                    this.Procurement.Equals(input.Procurement))
                ) && 
                (
                    this.BankGuaranteeSum == input.BankGuaranteeSum ||
                    this.BankGuaranteeSum.Equals(input.BankGuaranteeSum)
                ) && 
                (
                    this.BankGuaranteeClientType == input.BankGuaranteeClientType ||
                    this.BankGuaranteeClientType.Equals(input.BankGuaranteeClientType)
                ) && 
                (
                    this.Beneficiary == input.Beneficiary ||
                    (this.Beneficiary != null &&
                    this.Beneficiary.Equals(input.Beneficiary))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.RequiredExecutionDate == input.RequiredExecutionDate ||
                    (this.RequiredExecutionDate != null &&
                    this.RequiredExecutionDate.Equals(input.RequiredExecutionDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.AnnualInterestRate == input.AnnualInterestRate ||
                    this.AnnualInterestRate.Equals(input.AnnualInterestRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Procurement != null)
                {
                    hashCode = (hashCode * 59) + this.Procurement.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BankGuaranteeSum.GetHashCode();
                hashCode = (hashCode * 59) + this.BankGuaranteeClientType.GetHashCode();
                if (this.Beneficiary != null)
                {
                    hashCode = (hashCode * 59) + this.Beneficiary.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.RequiredExecutionDate != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredExecutionDate.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnnualInterestRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BankGuaranteeSum (decimal) maximum
            if (this.BankGuaranteeSum > (decimal)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankGuaranteeSum, must be a value less than or equal to 9007199254740991.", new [] { "BankGuaranteeSum" });
            }

            // BankGuaranteeSum (decimal) minimum
            if (this.BankGuaranteeSum < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankGuaranteeSum, must be a value greater than or equal to 0.", new [] { "BankGuaranteeSum" });
            }

            // EndDate (DateTime) maxLength
            if (this.EndDate != null && this.EndDate.ToString().Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, length must be less than 10.", new [] { "EndDate" });
            }

            // EndDate (DateTime) minLength
            if (this.EndDate != null && this.EndDate.ToString().Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, length must be greater than 10.", new [] { "EndDate" });
            }

            // EndDate (DateTime) pattern
            Regex regexEndDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexEndDate.Match(this.EndDate.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndDate, must match a pattern of " + regexEndDate, new [] { "EndDate" });
            }

            // RequiredExecutionDate (DateTime) maxLength
            if (this.RequiredExecutionDate != null && this.RequiredExecutionDate.ToString().Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequiredExecutionDate, length must be less than 10.", new [] { "RequiredExecutionDate" });
            }

            // RequiredExecutionDate (DateTime) minLength
            if (this.RequiredExecutionDate != null && this.RequiredExecutionDate.ToString().Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequiredExecutionDate, length must be greater than 10.", new [] { "RequiredExecutionDate" });
            }

            // RequiredExecutionDate (DateTime) pattern
            Regex regexRequiredExecutionDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexRequiredExecutionDate.Match(this.RequiredExecutionDate.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequiredExecutionDate, must match a pattern of " + regexRequiredExecutionDate, new [] { "RequiredExecutionDate" });
            }

            // StartDate (DateTime) maxLength
            if (this.StartDate != null && this.StartDate.ToString().Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, length must be less than 10.", new [] { "StartDate" });
            }

            // StartDate (DateTime) minLength
            if (this.StartDate != null && this.StartDate.ToString().Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, length must be greater than 10.", new [] { "StartDate" });
            }

            // StartDate (DateTime) pattern
            Regex regexStartDate = new Regex(@"^[0-9]{4}-[0-9]{2}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexStartDate.Match(this.StartDate.ToString()).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartDate, must match a pattern of " + regexStartDate, new [] { "StartDate" });
            }

            // ParentId (string) maxLength
            if (this.ParentId != null && this.ParentId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be less than 36.", new [] { "ParentId" });
            }

            // ParentId (string) minLength
            if (this.ParentId != null && this.ParentId.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, length must be greater than 36.", new [] { "ParentId" });
            }

            // ParentId (string) pattern
            Regex regexParentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(this.ParentId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new [] { "ParentId" });
            }

            // AnnualInterestRate (decimal) maximum
            if (this.AnnualInterestRate > (decimal)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnnualInterestRate, must be a value less than or equal to 99.", new [] { "AnnualInterestRate" });
            }

            // AnnualInterestRate (decimal) minimum
            if (this.AnnualInterestRate < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnnualInterestRate, must be a value greater than or equal to 0.", new [] { "AnnualInterestRate" });
            }

            yield break;
        }
    }

}
