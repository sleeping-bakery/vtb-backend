/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Предварительно рассчитанная комиссия
    /// </summary>
    [DataContract(Name = "CommissionResponseDto")]
    public partial class CommissionResponseDto : IEquatable<CommissionResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommissionResponseDto" /> class.
        /// </summary>
        /// <param name="commissionAmount">Величина комиссии.</param>
        public CommissionResponseDto(decimal commissionAmount = default(decimal))
        {
            this.CommissionAmount = commissionAmount;
        }

        /// <summary>
        /// Величина комиссии
        /// </summary>
        /// <value>Величина комиссии</value>
        [DataMember(Name = "commissionAmount", EmitDefaultValue = false)]
        public decimal CommissionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommissionResponseDto {\n");
            sb.Append("  CommissionAmount: ").Append(CommissionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommissionResponseDto);
        }

        /// <summary>
        /// Returns true if CommissionResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommissionResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommissionResponseDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CommissionAmount == input.CommissionAmount ||
                    this.CommissionAmount.Equals(input.CommissionAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CommissionAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CommissionAmount (decimal) maximum
            if (this.CommissionAmount > (decimal)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CommissionAmount, must be a value less than or equal to 9007199254740991.", new [] { "CommissionAmount" });
            }

            // CommissionAmount (decimal) minimum
            if (this.CommissionAmount < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CommissionAmount, must be a value greater than or equal to 0.", new [] { "CommissionAmount" });
            }

            yield break;
        }
    }

}
