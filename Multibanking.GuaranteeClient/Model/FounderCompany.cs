/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Данные об Учредителе Юр лице/ИП
    /// </summary>
    [DataContract(Name = "FounderCompany")]
    public partial class FounderCompany : IEquatable<FounderCompany>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FounderCompany" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FounderCompany() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FounderCompany" /> class.
        /// </summary>
        /// <param name="id">Id (required).</param>
        /// <param name="guaranteeCompanyInfo">guaranteeCompanyInfo (required).</param>
        /// <param name="addresses">addresses (required).</param>
        /// <param name="sharePercent">Доля, % (required).</param>
        /// <param name="founderPersons">founderPersons.</param>
        /// <param name="secondLevelFounderCompanies">secondLevelFounderCompanies.</param>
        public FounderCompany(string id = default(string), GuaranteeCompanyInfo guaranteeCompanyInfo = default(GuaranteeCompanyInfo), List<GuaranteeAddress> addresses = default(List<GuaranteeAddress>), decimal sharePercent = default(decimal), List<FounderPerson> founderPersons = default(List<FounderPerson>), List<SecondLevelFounderCompanyDto> secondLevelFounderCompanies = default(List<SecondLevelFounderCompanyDto>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FounderCompany and cannot be null");
            }
            this.Id = id;
            // to ensure "guaranteeCompanyInfo" is required (not null)
            if (guaranteeCompanyInfo == null)
            {
                throw new ArgumentNullException("guaranteeCompanyInfo is a required property for FounderCompany and cannot be null");
            }
            this.GuaranteeCompanyInfo = guaranteeCompanyInfo;
            // to ensure "addresses" is required (not null)
            if (addresses == null)
            {
                throw new ArgumentNullException("addresses is a required property for FounderCompany and cannot be null");
            }
            this.Addresses = addresses;
            this.SharePercent = sharePercent;
            this.FounderPersons = founderPersons;
            this.SecondLevelFounderCompanies = secondLevelFounderCompanies;
        }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets GuaranteeCompanyInfo
        /// </summary>
        [DataMember(Name = "guaranteeCompanyInfo", IsRequired = true, EmitDefaultValue = true)]
        public GuaranteeCompanyInfo GuaranteeCompanyInfo { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<GuaranteeAddress> Addresses { get; set; }

        /// <summary>
        /// Доля, %
        /// </summary>
        /// <value>Доля, %</value>
        [DataMember(Name = "sharePercent", IsRequired = true, EmitDefaultValue = true)]
        public decimal SharePercent { get; set; }

        /// <summary>
        /// Gets or Sets FounderPersons
        /// </summary>
        [DataMember(Name = "founderPersons", EmitDefaultValue = false)]
        public List<FounderPerson> FounderPersons { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelFounderCompanies
        /// </summary>
        [DataMember(Name = "secondLevelFounderCompanies", EmitDefaultValue = false)]
        public List<SecondLevelFounderCompanyDto> SecondLevelFounderCompanies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FounderCompany {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GuaranteeCompanyInfo: ").Append(GuaranteeCompanyInfo).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  SharePercent: ").Append(SharePercent).Append("\n");
            sb.Append("  FounderPersons: ").Append(FounderPersons).Append("\n");
            sb.Append("  SecondLevelFounderCompanies: ").Append(SecondLevelFounderCompanies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FounderCompany);
        }

        /// <summary>
        /// Returns true if FounderCompany instances are equal
        /// </summary>
        /// <param name="input">Instance of FounderCompany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FounderCompany input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GuaranteeCompanyInfo == input.GuaranteeCompanyInfo ||
                    (this.GuaranteeCompanyInfo != null &&
                    this.GuaranteeCompanyInfo.Equals(input.GuaranteeCompanyInfo))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.SharePercent == input.SharePercent ||
                    this.SharePercent.Equals(input.SharePercent)
                ) && 
                (
                    this.FounderPersons == input.FounderPersons ||
                    this.FounderPersons != null &&
                    input.FounderPersons != null &&
                    this.FounderPersons.SequenceEqual(input.FounderPersons)
                ) && 
                (
                    this.SecondLevelFounderCompanies == input.SecondLevelFounderCompanies ||
                    this.SecondLevelFounderCompanies != null &&
                    input.SecondLevelFounderCompanies != null &&
                    this.SecondLevelFounderCompanies.SequenceEqual(input.SecondLevelFounderCompanies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.GuaranteeCompanyInfo != null)
                {
                    hashCode = (hashCode * 59) + this.GuaranteeCompanyInfo.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SharePercent.GetHashCode();
                if (this.FounderPersons != null)
                {
                    hashCode = (hashCode * 59) + this.FounderPersons.GetHashCode();
                }
                if (this.SecondLevelFounderCompanies != null)
                {
                    hashCode = (hashCode * 59) + this.SecondLevelFounderCompanies.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
