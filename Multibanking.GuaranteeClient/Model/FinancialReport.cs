/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Бух. отчетность. Значения ожидаются в рублях
    /// </summary>
    [DataContract(Name = "FinancialReport")]
    public class FinancialReport : IEquatable<FinancialReport>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FinancialReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialReport()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="FinancialReport" /> class.
        /// </summary>
        /// <param name="dateStart">Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала) (required).</param>
        /// <param name="dateEnd">Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала) (required).</param>
        /// <param name="b1100">ВНЕОБОРОТНЫЕ АКТИВЫ. Итого по разделу I (required).</param>
        /// <param name="b1110">ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные активы (required).</param>
        /// <param name="b1120">ВНЕОБОРОТНЫЕ АКТИВЫ. Результаты исследований и разработок.</param>
        /// <param name="b1130">ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные поисковые активы.</param>
        /// <param name="b1140">ВНЕОБОРОТНЫЕ АКТИВЫ. Материальные поисковые активы.</param>
        /// <param name="b1150">ВНЕОБОРОТНЫЕ АКТИВЫ. Основные средства (required).</param>
        /// <param name="b1160">ВНЕОБОРОТНЫЕ АКТИВЫ. Доходные вложения в материальные ценности.</param>
        /// <param name="b1170">ВНЕОБОРОТНЫЕ АКТИВЫ. Финансовые вложения.</param>
        /// <param name="b1180">ВНЕОБОРОТНЫЕ АКТИВЫ. Отложенные налоговые активы.</param>
        /// <param name="b1190">ВНЕОБОРОТНЫЕ АКТИВЫ. Прочие внеоборотные активы.</param>
        /// <param name="b1200">ОБОРОТНЫЕ АКТИВЫ. Итого по разделу II (required).</param>
        /// <param name="b1210">ОБОРОТНЫЕ АКТИВЫ. Запасы (required).</param>
        /// <param name="b1220">ОБОРОТНЫЕ АКТИВЫ. Налог на добавленную стоимость по приобретенным ценностям.</param>
        /// <param name="b1230">ОБОРОТНЫЕ АКТИВЫ. Дебиторская задолженность (required).</param>
        /// <param name="b1240">ОБОРОТНЫЕ АКТИВЫ. Финансовые вложения (за исключением денежных эквивалентов).</param>
        /// <param name="b1250">ОБОРОТНЫЕ АКТИВЫ. Денежные средства и денежные эквиваленты.</param>
        /// <param name="b1260">ОБОРОТНЫЕ АКТИВЫ. Прочие оборотные активы.</param>
        /// <param name="b1300">ИТОГО по разделу III (required).</param>
        /// <param name="b1310">КАПИТАЛ И РЕЗЕРВЫ. Уставный капитал (складочный капитал, уставный фонд, вклады товарищей).</param>
        /// <param name="b1320">КАПИТАЛ И РЕЗЕРВЫ. Собственные акции, выкупленные у акционеров.</param>
        /// <param name="b1340">КАПИТАЛ И РЕЗЕРВЫ. Переоценка внеоборотных активов.</param>
        /// <param name="b1350">КАПИТАЛ И РЕЗЕРВЫ. Добавочный капитал (без переоценки).</param>
        /// <param name="b1360">КАПИТАЛ И РЕЗЕРВЫ. Резервный капитал.</param>
        /// <param name="b1370">КАПИТАЛ И РЕЗЕРВЫ. Нераспределенная прибыль (непокрытый убыток).</param>
        /// <param name="b1400">ИТОГО по разделу IV.</param>
        /// <param name="b1410">ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства (required).</param>
        /// <param name="b1420">ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Отложенные налоговые обязательства.</param>
        /// <param name="b1430">ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства.</param>
        /// <param name="b1450">ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства.</param>
        /// <param name="b1500">ИТОГО по разделу V.</param>
        /// <param name="b1510">КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства (required).</param>
        /// <param name="b1520">КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Кредиторская задолженность (required).</param>
        /// <param name="b1530">КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Доходы будущих периодов.</param>
        /// <param name="b1540">КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства.</param>
        /// <param name="b1550">КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства.</param>
        /// <param name="b1600">БАЛАНС (required).</param>
        /// <param name="b1700">Общая стоимость пассивов организации (required).</param>
        /// <param name="b2100">Валовая прибыль (required).</param>
        /// <param name="b2110">Выручка (required).</param>
        /// <param name="b2120">Себестоимость продаж (required).</param>
        /// <param name="b2200">Прибыль (убыток) от продаж.</param>
        /// <param name="b2210">Коммерческие расходы.</param>
        /// <param name="b2220">Управленческие расходы.</param>
        /// <param name="b2300">Прибыль (убыток) до налогообложения (required).</param>
        /// <param name="b2310">Доходы от участия в других организациях.</param>
        /// <param name="b2320">Проценты к получению.</param>
        /// <param name="b2330">Проценты к уплате (required).</param>
        /// <param name="b2340">Прочие доходы.</param>
        /// <param name="b2350">Прочие расходы.</param>
        /// <param name="b2400">Чистая прибыль (убыток) (required).</param>
        /// <param name="b2410">Налог на прибыль.</param>
        /// <param name="b2411">Текущий налог на прибыль.</param>
        /// <param name="b2412">Отложенный налог на прибыль.</param>
        /// <param name="b2460">Прочее.</param>
        /// <param name="b2500">Совокупный финансовый результат периода.</param>
        /// <param name="b2510">Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода.</param>
        /// <param name="b2520">Результат от прочих операций, не включаемый в чистую прибыль (убыток) периода.</param>
        /// <param name="b2530">Налог на прибыль от операций, результат которых не включается в чистую прибыль (убыток) периода.</param>
        /// <param name="b2900">Базовая прибыль (убыток) на акцию.</param>
        /// <param name="b2910">Разводненная прибыль (убыток) на акцию.</param>
        /// <param name="b5640">Амортизация.</param>
        public FinancialReport(DateTime dateStart = default, DateTime dateEnd = default, decimal b1100 = default, decimal b1110 = default, decimal b1120 = default,
            decimal b1130 = default, decimal b1140 = default, decimal b1150 = default, decimal b1160 = default, decimal b1170 = default, decimal b1180 = default,
            decimal b1190 = default, decimal b1200 = default, decimal b1210 = default, decimal b1220 = default, decimal b1230 = default, decimal b1240 = default,
            decimal b1250 = default, decimal b1260 = default, decimal b1300 = default, decimal b1310 = default, decimal b1320 = default, decimal b1340 = default,
            decimal b1350 = default, decimal b1360 = default, decimal b1370 = default, decimal b1400 = default, decimal b1410 = default, decimal b1420 = default,
            decimal b1430 = default, decimal b1450 = default, decimal b1500 = default, decimal b1510 = default, decimal b1520 = default, decimal b1530 = default,
            decimal b1540 = default, decimal b1550 = default, decimal b1600 = default, decimal b1700 = default, decimal b2100 = default, decimal b2110 = default,
            decimal b2120 = default, decimal b2200 = default, decimal b2210 = default, decimal b2220 = default, decimal b2300 = default, decimal b2310 = default,
            decimal b2320 = default, decimal b2330 = default, decimal b2340 = default, decimal b2350 = default, decimal b2400 = default, decimal b2410 = default,
            decimal b2411 = default, decimal b2412 = default, decimal b2460 = default, decimal b2500 = default, decimal b2510 = default, decimal b2520 = default,
            decimal b2530 = default, decimal b2900 = default, decimal b2910 = default, decimal b5640 = default)
        {
            DateStart = dateStart;
            DateEnd = dateEnd;
            B1100 = b1100;
            B1110 = b1110;
            B1150 = b1150;
            B1200 = b1200;
            B1210 = b1210;
            B1230 = b1230;
            B1300 = b1300;
            B1410 = b1410;
            B1510 = b1510;
            B1520 = b1520;
            B1600 = b1600;
            B1700 = b1700;
            B2100 = b2100;
            B2110 = b2110;
            B2120 = b2120;
            B2300 = b2300;
            B2330 = b2330;
            B2400 = b2400;
            B1120 = b1120;
            B1130 = b1130;
            B1140 = b1140;
            B1160 = b1160;
            B1170 = b1170;
            B1180 = b1180;
            B1190 = b1190;
            B1220 = b1220;
            B1240 = b1240;
            B1250 = b1250;
            B1260 = b1260;
            B1310 = b1310;
            B1320 = b1320;
            B1340 = b1340;
            B1350 = b1350;
            B1360 = b1360;
            B1370 = b1370;
            B1400 = b1400;
            B1420 = b1420;
            B1430 = b1430;
            B1450 = b1450;
            B1500 = b1500;
            B1530 = b1530;
            B1540 = b1540;
            B1550 = b1550;
            B2200 = b2200;
            B2210 = b2210;
            B2220 = b2220;
            B2310 = b2310;
            B2320 = b2320;
            B2340 = b2340;
            B2350 = b2350;
            B2410 = b2410;
            B2411 = b2411;
            B2412 = b2412;
            B2460 = b2460;
            B2500 = b2500;
            B2510 = b2510;
            B2520 = b2520;
            B2530 = b2530;
            B2900 = b2900;
            B2910 = b2910;
            B5640 = b5640;
        }

        /// <summary>
        ///     Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала)
        /// </summary>
        /// <value>Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала)</value>
        [DataMember(Name = "dateStart", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateStart { get; set; }

        /// <summary>
        ///     Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала)
        /// </summary>
        /// <value>Дата в формате &#39;гггг-мм&#39; (где гггг - год, мм - последний месяц квартала)</value>
        [DataMember(Name = "dateEnd", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateEnd { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Итого по разделу I
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Итого по разделу I</value>
        [DataMember(Name = "b1100", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1100 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные активы
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные активы</value>
        [DataMember(Name = "b1110", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1110 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Результаты исследований и разработок
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Результаты исследований и разработок</value>
        [DataMember(Name = "b1120", EmitDefaultValue = false)]
        public decimal B1120 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные поисковые активы
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Нематериальные поисковые активы</value>
        [DataMember(Name = "b1130", EmitDefaultValue = false)]
        public decimal B1130 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Материальные поисковые активы
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Материальные поисковые активы</value>
        [DataMember(Name = "b1140", EmitDefaultValue = false)]
        public decimal B1140 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Основные средства
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Основные средства</value>
        [DataMember(Name = "b1150", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1150 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Доходные вложения в материальные ценности
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Доходные вложения в материальные ценности</value>
        [DataMember(Name = "b1160", EmitDefaultValue = false)]
        public decimal B1160 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Финансовые вложения
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Финансовые вложения</value>
        [DataMember(Name = "b1170", EmitDefaultValue = false)]
        public decimal B1170 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Отложенные налоговые активы
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Отложенные налоговые активы</value>
        [DataMember(Name = "b1180", EmitDefaultValue = false)]
        public decimal B1180 { get; set; }

        /// <summary>
        ///     ВНЕОБОРОТНЫЕ АКТИВЫ. Прочие внеоборотные активы
        /// </summary>
        /// <value>ВНЕОБОРОТНЫЕ АКТИВЫ. Прочие внеоборотные активы</value>
        [DataMember(Name = "b1190", EmitDefaultValue = false)]
        public decimal B1190 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Итого по разделу II
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Итого по разделу II</value>
        [DataMember(Name = "b1200", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1200 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Запасы
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Запасы</value>
        [DataMember(Name = "b1210", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1210 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Налог на добавленную стоимость по приобретенным ценностям
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Налог на добавленную стоимость по приобретенным ценностям</value>
        [DataMember(Name = "b1220", EmitDefaultValue = false)]
        public decimal B1220 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Дебиторская задолженность
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Дебиторская задолженность</value>
        [DataMember(Name = "b1230", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1230 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Финансовые вложения (за исключением денежных эквивалентов)
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Финансовые вложения (за исключением денежных эквивалентов)</value>
        [DataMember(Name = "b1240", EmitDefaultValue = false)]
        public decimal B1240 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Денежные средства и денежные эквиваленты
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Денежные средства и денежные эквиваленты</value>
        [DataMember(Name = "b1250", EmitDefaultValue = false)]
        public decimal B1250 { get; set; }

        /// <summary>
        ///     ОБОРОТНЫЕ АКТИВЫ. Прочие оборотные активы
        /// </summary>
        /// <value>ОБОРОТНЫЕ АКТИВЫ. Прочие оборотные активы</value>
        [DataMember(Name = "b1260", EmitDefaultValue = false)]
        public decimal B1260 { get; set; }

        /// <summary>
        ///     ИТОГО по разделу III
        /// </summary>
        /// <value>ИТОГО по разделу III</value>
        [DataMember(Name = "b1300", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1300 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)</value>
        [DataMember(Name = "b1310", EmitDefaultValue = false)]
        public decimal B1310 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Собственные акции, выкупленные у акционеров
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Собственные акции, выкупленные у акционеров</value>
        [DataMember(Name = "b1320", EmitDefaultValue = false)]
        public decimal B1320 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Переоценка внеоборотных активов
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Переоценка внеоборотных активов</value>
        [DataMember(Name = "b1340", EmitDefaultValue = false)]
        public decimal B1340 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Добавочный капитал (без переоценки)
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Добавочный капитал (без переоценки)</value>
        [DataMember(Name = "b1350", EmitDefaultValue = false)]
        public decimal B1350 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Резервный капитал
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Резервный капитал</value>
        [DataMember(Name = "b1360", EmitDefaultValue = false)]
        public decimal B1360 { get; set; }

        /// <summary>
        ///     КАПИТАЛ И РЕЗЕРВЫ. Нераспределенная прибыль (непокрытый убыток)
        /// </summary>
        /// <value>КАПИТАЛ И РЕЗЕРВЫ. Нераспределенная прибыль (непокрытый убыток)</value>
        [DataMember(Name = "b1370", EmitDefaultValue = false)]
        public decimal B1370 { get; set; }

        /// <summary>
        ///     ИТОГО по разделу IV
        /// </summary>
        /// <value>ИТОГО по разделу IV</value>
        [DataMember(Name = "b1400", EmitDefaultValue = false)]
        public decimal B1400 { get; set; }

        /// <summary>
        ///     ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства
        /// </summary>
        /// <value>ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства</value>
        [DataMember(Name = "b1410", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1410 { get; set; }

        /// <summary>
        ///     ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Отложенные налоговые обязательства
        /// </summary>
        /// <value>ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Отложенные налоговые обязательства</value>
        [DataMember(Name = "b1420", EmitDefaultValue = false)]
        public decimal B1420 { get; set; }

        /// <summary>
        ///     ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства
        /// </summary>
        /// <value>ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства</value>
        [DataMember(Name = "b1430", EmitDefaultValue = false)]
        public decimal B1430 { get; set; }

        /// <summary>
        ///     ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства
        /// </summary>
        /// <value>ДОЛГОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства</value>
        [DataMember(Name = "b1450", EmitDefaultValue = false)]
        public decimal B1450 { get; set; }

        /// <summary>
        ///     ИТОГО по разделу V
        /// </summary>
        /// <value>ИТОГО по разделу V</value>
        [DataMember(Name = "b1500", EmitDefaultValue = false)]
        public decimal B1500 { get; set; }

        /// <summary>
        ///     КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства
        /// </summary>
        /// <value>КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Заемные средства</value>
        [DataMember(Name = "b1510", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1510 { get; set; }

        /// <summary>
        ///     КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Кредиторская задолженность
        /// </summary>
        /// <value>КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Кредиторская задолженность</value>
        [DataMember(Name = "b1520", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1520 { get; set; }

        /// <summary>
        ///     КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Доходы будущих периодов
        /// </summary>
        /// <value>КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Доходы будущих периодов</value>
        [DataMember(Name = "b1530", EmitDefaultValue = false)]
        public decimal B1530 { get; set; }

        /// <summary>
        ///     КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства
        /// </summary>
        /// <value>КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Оценочные обязательства</value>
        [DataMember(Name = "b1540", EmitDefaultValue = false)]
        public decimal B1540 { get; set; }

        /// <summary>
        ///     КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства
        /// </summary>
        /// <value>КРАТКОСРОЧНЫЕ ОБЯЗАТЕЛЬСТВА. Прочие обязательства</value>
        [DataMember(Name = "b1550", EmitDefaultValue = false)]
        public decimal B1550 { get; set; }

        /// <summary>
        ///     БАЛАНС
        /// </summary>
        /// <value>БАЛАНС</value>
        [DataMember(Name = "b1600", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1600 { get; set; }

        /// <summary>
        ///     Общая стоимость пассивов организации
        /// </summary>
        /// <value>Общая стоимость пассивов организации</value>
        [DataMember(Name = "b1700", IsRequired = true, EmitDefaultValue = true)]
        public decimal B1700 { get; set; }

        /// <summary>
        ///     Валовая прибыль
        /// </summary>
        /// <value>Валовая прибыль</value>
        [DataMember(Name = "b2100", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2100 { get; set; }

        /// <summary>
        ///     Выручка
        /// </summary>
        /// <value>Выручка</value>
        [DataMember(Name = "b2110", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2110 { get; set; }

        /// <summary>
        ///     Себестоимость продаж
        /// </summary>
        /// <value>Себестоимость продаж</value>
        [DataMember(Name = "b2120", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2120 { get; set; }

        /// <summary>
        ///     Прибыль (убыток) от продаж
        /// </summary>
        /// <value>Прибыль (убыток) от продаж</value>
        [DataMember(Name = "b2200", EmitDefaultValue = false)]
        public decimal B2200 { get; set; }

        /// <summary>
        ///     Коммерческие расходы
        /// </summary>
        /// <value>Коммерческие расходы</value>
        [DataMember(Name = "b2210", EmitDefaultValue = false)]
        public decimal B2210 { get; set; }

        /// <summary>
        ///     Управленческие расходы
        /// </summary>
        /// <value>Управленческие расходы</value>
        [DataMember(Name = "b2220", EmitDefaultValue = false)]
        public decimal B2220 { get; set; }

        /// <summary>
        ///     Прибыль (убыток) до налогообложения
        /// </summary>
        /// <value>Прибыль (убыток) до налогообложения</value>
        [DataMember(Name = "b2300", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2300 { get; set; }

        /// <summary>
        ///     Доходы от участия в других организациях
        /// </summary>
        /// <value>Доходы от участия в других организациях</value>
        [DataMember(Name = "b2310", EmitDefaultValue = false)]
        public decimal B2310 { get; set; }

        /// <summary>
        ///     Проценты к получению
        /// </summary>
        /// <value>Проценты к получению</value>
        [DataMember(Name = "b2320", EmitDefaultValue = false)]
        public decimal B2320 { get; set; }

        /// <summary>
        ///     Проценты к уплате
        /// </summary>
        /// <value>Проценты к уплате</value>
        [DataMember(Name = "b2330", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2330 { get; set; }

        /// <summary>
        ///     Прочие доходы
        /// </summary>
        /// <value>Прочие доходы</value>
        [DataMember(Name = "b2340", EmitDefaultValue = false)]
        public decimal B2340 { get; set; }

        /// <summary>
        ///     Прочие расходы
        /// </summary>
        /// <value>Прочие расходы</value>
        [DataMember(Name = "b2350", EmitDefaultValue = false)]
        public decimal B2350 { get; set; }

        /// <summary>
        ///     Чистая прибыль (убыток)
        /// </summary>
        /// <value>Чистая прибыль (убыток)</value>
        [DataMember(Name = "b2400", IsRequired = true, EmitDefaultValue = true)]
        public decimal B2400 { get; set; }

        /// <summary>
        ///     Налог на прибыль
        /// </summary>
        /// <value>Налог на прибыль</value>
        [DataMember(Name = "b2410", EmitDefaultValue = false)]
        public decimal B2410 { get; set; }

        /// <summary>
        ///     Текущий налог на прибыль
        /// </summary>
        /// <value>Текущий налог на прибыль</value>
        [DataMember(Name = "b2411", EmitDefaultValue = false)]
        public decimal B2411 { get; set; }

        /// <summary>
        ///     Отложенный налог на прибыль
        /// </summary>
        /// <value>Отложенный налог на прибыль</value>
        [DataMember(Name = "b2412", EmitDefaultValue = false)]
        public decimal B2412 { get; set; }

        /// <summary>
        ///     Прочее
        /// </summary>
        /// <value>Прочее</value>
        [DataMember(Name = "b2460", EmitDefaultValue = false)]
        public decimal B2460 { get; set; }

        /// <summary>
        ///     Совокупный финансовый результат периода
        /// </summary>
        /// <value>Совокупный финансовый результат периода</value>
        [DataMember(Name = "b2500", EmitDefaultValue = false)]
        public decimal B2500 { get; set; }

        /// <summary>
        ///     Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода
        /// </summary>
        /// <value>Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода</value>
        [DataMember(Name = "b2510", EmitDefaultValue = false)]
        public decimal B2510 { get; set; }

        /// <summary>
        ///     Результат от прочих операций, не включаемый в чистую прибыль (убыток) периода
        /// </summary>
        /// <value>Результат от прочих операций, не включаемый в чистую прибыль (убыток) периода</value>
        [DataMember(Name = "b2520", EmitDefaultValue = false)]
        public decimal B2520 { get; set; }

        /// <summary>
        ///     Налог на прибыль от операций, результат которых не включается в чистую прибыль (убыток) периода
        /// </summary>
        /// <value>Налог на прибыль от операций, результат которых не включается в чистую прибыль (убыток) периода</value>
        [DataMember(Name = "b2530", EmitDefaultValue = false)]
        public decimal B2530 { get; set; }

        /// <summary>
        ///     Базовая прибыль (убыток) на акцию
        /// </summary>
        /// <value>Базовая прибыль (убыток) на акцию</value>
        [DataMember(Name = "b2900", EmitDefaultValue = false)]
        public decimal B2900 { get; set; }

        /// <summary>
        ///     Разводненная прибыль (убыток) на акцию
        /// </summary>
        /// <value>Разводненная прибыль (убыток) на акцию</value>
        [DataMember(Name = "b2910", EmitDefaultValue = false)]
        public decimal B2910 { get; set; }

        /// <summary>
        ///     Амортизация
        /// </summary>
        /// <value>Амортизация</value>
        [DataMember(Name = "b5640", EmitDefaultValue = false)]
        public decimal B5640 { get; set; }

        /// <summary>
        ///     Returns true if FinancialReport instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialReport input)
        {
            if (input == null) return false;
            return
                (
                    DateStart == input.DateStart ||
                    (DateStart != null &&
                     DateStart.Equals(input.DateStart))
                ) &&
                (
                    DateEnd == input.DateEnd ||
                    (DateEnd != null &&
                     DateEnd.Equals(input.DateEnd))
                ) &&
                (
                    B1100 == input.B1100 ||
                    B1100.Equals(input.B1100)
                ) &&
                (
                    B1110 == input.B1110 ||
                    B1110.Equals(input.B1110)
                ) &&
                (
                    B1120 == input.B1120 ||
                    B1120.Equals(input.B1120)
                ) &&
                (
                    B1130 == input.B1130 ||
                    B1130.Equals(input.B1130)
                ) &&
                (
                    B1140 == input.B1140 ||
                    B1140.Equals(input.B1140)
                ) &&
                (
                    B1150 == input.B1150 ||
                    B1150.Equals(input.B1150)
                ) &&
                (
                    B1160 == input.B1160 ||
                    B1160.Equals(input.B1160)
                ) &&
                (
                    B1170 == input.B1170 ||
                    B1170.Equals(input.B1170)
                ) &&
                (
                    B1180 == input.B1180 ||
                    B1180.Equals(input.B1180)
                ) &&
                (
                    B1190 == input.B1190 ||
                    B1190.Equals(input.B1190)
                ) &&
                (
                    B1200 == input.B1200 ||
                    B1200.Equals(input.B1200)
                ) &&
                (
                    B1210 == input.B1210 ||
                    B1210.Equals(input.B1210)
                ) &&
                (
                    B1220 == input.B1220 ||
                    B1220.Equals(input.B1220)
                ) &&
                (
                    B1230 == input.B1230 ||
                    B1230.Equals(input.B1230)
                ) &&
                (
                    B1240 == input.B1240 ||
                    B1240.Equals(input.B1240)
                ) &&
                (
                    B1250 == input.B1250 ||
                    B1250.Equals(input.B1250)
                ) &&
                (
                    B1260 == input.B1260 ||
                    B1260.Equals(input.B1260)
                ) &&
                (
                    B1300 == input.B1300 ||
                    B1300.Equals(input.B1300)
                ) &&
                (
                    B1310 == input.B1310 ||
                    B1310.Equals(input.B1310)
                ) &&
                (
                    B1320 == input.B1320 ||
                    B1320.Equals(input.B1320)
                ) &&
                (
                    B1340 == input.B1340 ||
                    B1340.Equals(input.B1340)
                ) &&
                (
                    B1350 == input.B1350 ||
                    B1350.Equals(input.B1350)
                ) &&
                (
                    B1360 == input.B1360 ||
                    B1360.Equals(input.B1360)
                ) &&
                (
                    B1370 == input.B1370 ||
                    B1370.Equals(input.B1370)
                ) &&
                (
                    B1400 == input.B1400 ||
                    B1400.Equals(input.B1400)
                ) &&
                (
                    B1410 == input.B1410 ||
                    B1410.Equals(input.B1410)
                ) &&
                (
                    B1420 == input.B1420 ||
                    B1420.Equals(input.B1420)
                ) &&
                (
                    B1430 == input.B1430 ||
                    B1430.Equals(input.B1430)
                ) &&
                (
                    B1450 == input.B1450 ||
                    B1450.Equals(input.B1450)
                ) &&
                (
                    B1500 == input.B1500 ||
                    B1500.Equals(input.B1500)
                ) &&
                (
                    B1510 == input.B1510 ||
                    B1510.Equals(input.B1510)
                ) &&
                (
                    B1520 == input.B1520 ||
                    B1520.Equals(input.B1520)
                ) &&
                (
                    B1530 == input.B1530 ||
                    B1530.Equals(input.B1530)
                ) &&
                (
                    B1540 == input.B1540 ||
                    B1540.Equals(input.B1540)
                ) &&
                (
                    B1550 == input.B1550 ||
                    B1550.Equals(input.B1550)
                ) &&
                (
                    B1600 == input.B1600 ||
                    B1600.Equals(input.B1600)
                ) &&
                (
                    B1700 == input.B1700 ||
                    B1700.Equals(input.B1700)
                ) &&
                (
                    B2100 == input.B2100 ||
                    B2100.Equals(input.B2100)
                ) &&
                (
                    B2110 == input.B2110 ||
                    B2110.Equals(input.B2110)
                ) &&
                (
                    B2120 == input.B2120 ||
                    B2120.Equals(input.B2120)
                ) &&
                (
                    B2200 == input.B2200 ||
                    B2200.Equals(input.B2200)
                ) &&
                (
                    B2210 == input.B2210 ||
                    B2210.Equals(input.B2210)
                ) &&
                (
                    B2220 == input.B2220 ||
                    B2220.Equals(input.B2220)
                ) &&
                (
                    B2300 == input.B2300 ||
                    B2300.Equals(input.B2300)
                ) &&
                (
                    B2310 == input.B2310 ||
                    B2310.Equals(input.B2310)
                ) &&
                (
                    B2320 == input.B2320 ||
                    B2320.Equals(input.B2320)
                ) &&
                (
                    B2330 == input.B2330 ||
                    B2330.Equals(input.B2330)
                ) &&
                (
                    B2340 == input.B2340 ||
                    B2340.Equals(input.B2340)
                ) &&
                (
                    B2350 == input.B2350 ||
                    B2350.Equals(input.B2350)
                ) &&
                (
                    B2400 == input.B2400 ||
                    B2400.Equals(input.B2400)
                ) &&
                (
                    B2410 == input.B2410 ||
                    B2410.Equals(input.B2410)
                ) &&
                (
                    B2411 == input.B2411 ||
                    B2411.Equals(input.B2411)
                ) &&
                (
                    B2412 == input.B2412 ||
                    B2412.Equals(input.B2412)
                ) &&
                (
                    B2460 == input.B2460 ||
                    B2460.Equals(input.B2460)
                ) &&
                (
                    B2500 == input.B2500 ||
                    B2500.Equals(input.B2500)
                ) &&
                (
                    B2510 == input.B2510 ||
                    B2510.Equals(input.B2510)
                ) &&
                (
                    B2520 == input.B2520 ||
                    B2520.Equals(input.B2520)
                ) &&
                (
                    B2530 == input.B2530 ||
                    B2530.Equals(input.B2530)
                ) &&
                (
                    B2900 == input.B2900 ||
                    B2900.Equals(input.B2900)
                ) &&
                (
                    B2910 == input.B2910 ||
                    B2910.Equals(input.B2910)
                ) &&
                (
                    B5640 == input.B5640 ||
                    B5640.Equals(input.B5640)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // DateStart (DateTime) maxLength
            if (DateStart != null && DateStart.ToString().Length > 7)
                yield return new ValidationResult("Invalid value for DateStart, length must be less than 7.", new[] { "DateStart" });

            // DateStart (DateTime) minLength
            if (DateStart != null && DateStart.ToString().Length < 7)
                yield return new ValidationResult("Invalid value for DateStart, length must be greater than 7.", new[] { "DateStart" });

            // DateStart (DateTime) pattern
            var regexDateStart = new Regex(@"^[0-9]{4}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexDateStart.Match(DateStart.ToString()).Success)
                yield return new ValidationResult("Invalid value for DateStart, must match a pattern of " + regexDateStart, new[] { "DateStart" });

            // DateEnd (DateTime) maxLength
            if (DateEnd != null && DateEnd.ToString().Length > 7) yield return new ValidationResult("Invalid value for DateEnd, length must be less than 7.", new[] { "DateEnd" });

            // DateEnd (DateTime) minLength
            if (DateEnd != null && DateEnd.ToString().Length < 7)
                yield return new ValidationResult("Invalid value for DateEnd, length must be greater than 7.", new[] { "DateEnd" });

            // DateEnd (DateTime) pattern
            var regexDateEnd = new Regex(@"^[0-9]{4}-[0-9]{2}$", RegexOptions.CultureInvariant);
            if (false == regexDateEnd.Match(DateEnd.ToString()).Success)
                yield return new ValidationResult("Invalid value for DateEnd, must match a pattern of " + regexDateEnd, new[] { "DateEnd" });

            // B1100 (decimal) maximum
            if (B1100 > 9007199254740991) yield return new ValidationResult("Invalid value for B1100, must be a value less than or equal to 9007199254740991.", new[] { "B1100" });

            // B1100 (decimal) minimum
            if (B1100 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1100, must be a value greater than or equal to -9007199254740991.", new[] { "B1100" });

            // B1110 (decimal) maximum
            if (B1110 > 9007199254740991) yield return new ValidationResult("Invalid value for B1110, must be a value less than or equal to 9007199254740991.", new[] { "B1110" });

            // B1110 (decimal) minimum
            if (B1110 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1110, must be a value greater than or equal to -9007199254740991.", new[] { "B1110" });

            // B1120 (decimal) maximum
            if (B1120 > 9007199254740991) yield return new ValidationResult("Invalid value for B1120, must be a value less than or equal to 9007199254740991.", new[] { "B1120" });

            // B1120 (decimal) minimum
            if (B1120 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1120, must be a value greater than or equal to -9007199254740991.", new[] { "B1120" });

            // B1130 (decimal) maximum
            if (B1130 > 9007199254740991) yield return new ValidationResult("Invalid value for B1130, must be a value less than or equal to 9007199254740991.", new[] { "B1130" });

            // B1130 (decimal) minimum
            if (B1130 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1130, must be a value greater than or equal to -9007199254740991.", new[] { "B1130" });

            // B1140 (decimal) maximum
            if (B1140 > 9007199254740991) yield return new ValidationResult("Invalid value for B1140, must be a value less than or equal to 9007199254740991.", new[] { "B1140" });

            // B1140 (decimal) minimum
            if (B1140 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1140, must be a value greater than or equal to -9007199254740991.", new[] { "B1140" });

            // B1150 (decimal) maximum
            if (B1150 > 9007199254740991) yield return new ValidationResult("Invalid value for B1150, must be a value less than or equal to 9007199254740991.", new[] { "B1150" });

            // B1150 (decimal) minimum
            if (B1150 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1150, must be a value greater than or equal to -9007199254740991.", new[] { "B1150" });

            // B1160 (decimal) maximum
            if (B1160 > 9007199254740991) yield return new ValidationResult("Invalid value for B1160, must be a value less than or equal to 9007199254740991.", new[] { "B1160" });

            // B1160 (decimal) minimum
            if (B1160 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1160, must be a value greater than or equal to -9007199254740991.", new[] { "B1160" });

            // B1170 (decimal) maximum
            if (B1170 > 9007199254740991) yield return new ValidationResult("Invalid value for B1170, must be a value less than or equal to 9007199254740991.", new[] { "B1170" });

            // B1170 (decimal) minimum
            if (B1170 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1170, must be a value greater than or equal to -9007199254740991.", new[] { "B1170" });

            // B1180 (decimal) maximum
            if (B1180 > 9007199254740991) yield return new ValidationResult("Invalid value for B1180, must be a value less than or equal to 9007199254740991.", new[] { "B1180" });

            // B1180 (decimal) minimum
            if (B1180 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1180, must be a value greater than or equal to -9007199254740991.", new[] { "B1180" });

            // B1190 (decimal) maximum
            if (B1190 > 9007199254740991) yield return new ValidationResult("Invalid value for B1190, must be a value less than or equal to 9007199254740991.", new[] { "B1190" });

            // B1190 (decimal) minimum
            if (B1190 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1190, must be a value greater than or equal to -9007199254740991.", new[] { "B1190" });

            // B1200 (decimal) maximum
            if (B1200 > 9007199254740991) yield return new ValidationResult("Invalid value for B1200, must be a value less than or equal to 9007199254740991.", new[] { "B1200" });

            // B1200 (decimal) minimum
            if (B1200 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1200, must be a value greater than or equal to -9007199254740991.", new[] { "B1200" });

            // B1210 (decimal) maximum
            if (B1210 > 9007199254740991) yield return new ValidationResult("Invalid value for B1210, must be a value less than or equal to 9007199254740991.", new[] { "B1210" });

            // B1210 (decimal) minimum
            if (B1210 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1210, must be a value greater than or equal to -9007199254740991.", new[] { "B1210" });

            // B1220 (decimal) maximum
            if (B1220 > 9007199254740991) yield return new ValidationResult("Invalid value for B1220, must be a value less than or equal to 9007199254740991.", new[] { "B1220" });

            // B1220 (decimal) minimum
            if (B1220 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1220, must be a value greater than or equal to -9007199254740991.", new[] { "B1220" });

            // B1230 (decimal) maximum
            if (B1230 > 9007199254740991) yield return new ValidationResult("Invalid value for B1230, must be a value less than or equal to 9007199254740991.", new[] { "B1230" });

            // B1230 (decimal) minimum
            if (B1230 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1230, must be a value greater than or equal to -9007199254740991.", new[] { "B1230" });

            // B1240 (decimal) maximum
            if (B1240 > 9007199254740991) yield return new ValidationResult("Invalid value for B1240, must be a value less than or equal to 9007199254740991.", new[] { "B1240" });

            // B1240 (decimal) minimum
            if (B1240 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1240, must be a value greater than or equal to -9007199254740991.", new[] { "B1240" });

            // B1250 (decimal) maximum
            if (B1250 > 9007199254740991) yield return new ValidationResult("Invalid value for B1250, must be a value less than or equal to 9007199254740991.", new[] { "B1250" });

            // B1250 (decimal) minimum
            if (B1250 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1250, must be a value greater than or equal to -9007199254740991.", new[] { "B1250" });

            // B1260 (decimal) maximum
            if (B1260 > 9007199254740991) yield return new ValidationResult("Invalid value for B1260, must be a value less than or equal to 9007199254740991.", new[] { "B1260" });

            // B1260 (decimal) minimum
            if (B1260 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1260, must be a value greater than or equal to -9007199254740991.", new[] { "B1260" });

            // B1300 (decimal) maximum
            if (B1300 > 9007199254740991) yield return new ValidationResult("Invalid value for B1300, must be a value less than or equal to 9007199254740991.", new[] { "B1300" });

            // B1300 (decimal) minimum
            if (B1300 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1300, must be a value greater than or equal to -9007199254740991.", new[] { "B1300" });

            // B1310 (decimal) maximum
            if (B1310 > 9007199254740991) yield return new ValidationResult("Invalid value for B1310, must be a value less than or equal to 9007199254740991.", new[] { "B1310" });

            // B1310 (decimal) minimum
            if (B1310 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1310, must be a value greater than or equal to -9007199254740991.", new[] { "B1310" });

            // B1320 (decimal) maximum
            if (B1320 > 9007199254740991) yield return new ValidationResult("Invalid value for B1320, must be a value less than or equal to 9007199254740991.", new[] { "B1320" });

            // B1320 (decimal) minimum
            if (B1320 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1320, must be a value greater than or equal to -9007199254740991.", new[] { "B1320" });

            // B1340 (decimal) maximum
            if (B1340 > 9007199254740991) yield return new ValidationResult("Invalid value for B1340, must be a value less than or equal to 9007199254740991.", new[] { "B1340" });

            // B1340 (decimal) minimum
            if (B1340 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1340, must be a value greater than or equal to -9007199254740991.", new[] { "B1340" });

            // B1350 (decimal) maximum
            if (B1350 > 9007199254740991) yield return new ValidationResult("Invalid value for B1350, must be a value less than or equal to 9007199254740991.", new[] { "B1350" });

            // B1350 (decimal) minimum
            if (B1350 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1350, must be a value greater than or equal to -9007199254740991.", new[] { "B1350" });

            // B1360 (decimal) maximum
            if (B1360 > 9007199254740991) yield return new ValidationResult("Invalid value for B1360, must be a value less than or equal to 9007199254740991.", new[] { "B1360" });

            // B1360 (decimal) minimum
            if (B1360 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1360, must be a value greater than or equal to -9007199254740991.", new[] { "B1360" });

            // B1370 (decimal) maximum
            if (B1370 > 9007199254740991) yield return new ValidationResult("Invalid value for B1370, must be a value less than or equal to 9007199254740991.", new[] { "B1370" });

            // B1370 (decimal) minimum
            if (B1370 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1370, must be a value greater than or equal to -9007199254740991.", new[] { "B1370" });

            // B1400 (decimal) maximum
            if (B1400 > 9007199254740991) yield return new ValidationResult("Invalid value for B1400, must be a value less than or equal to 9007199254740991.", new[] { "B1400" });

            // B1400 (decimal) minimum
            if (B1400 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1400, must be a value greater than or equal to -9007199254740991.", new[] { "B1400" });

            // B1410 (decimal) maximum
            if (B1410 > 9007199254740991) yield return new ValidationResult("Invalid value for B1410, must be a value less than or equal to 9007199254740991.", new[] { "B1410" });

            // B1410 (decimal) minimum
            if (B1410 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1410, must be a value greater than or equal to -9007199254740991.", new[] { "B1410" });

            // B1420 (decimal) maximum
            if (B1420 > 9007199254740991) yield return new ValidationResult("Invalid value for B1420, must be a value less than or equal to 9007199254740991.", new[] { "B1420" });

            // B1420 (decimal) minimum
            if (B1420 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1420, must be a value greater than or equal to -9007199254740991.", new[] { "B1420" });

            // B1430 (decimal) maximum
            if (B1430 > 9007199254740991) yield return new ValidationResult("Invalid value for B1430, must be a value less than or equal to 9007199254740991.", new[] { "B1430" });

            // B1430 (decimal) minimum
            if (B1430 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1430, must be a value greater than or equal to -9007199254740991.", new[] { "B1430" });

            // B1450 (decimal) maximum
            if (B1450 > 9007199254740991) yield return new ValidationResult("Invalid value for B1450, must be a value less than or equal to 9007199254740991.", new[] { "B1450" });

            // B1450 (decimal) minimum
            if (B1450 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1450, must be a value greater than or equal to -9007199254740991.", new[] { "B1450" });

            // B1500 (decimal) maximum
            if (B1500 > 9007199254740991) yield return new ValidationResult("Invalid value for B1500, must be a value less than or equal to 9007199254740991.", new[] { "B1500" });

            // B1500 (decimal) minimum
            if (B1500 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1500, must be a value greater than or equal to -9007199254740991.", new[] { "B1500" });

            // B1510 (decimal) maximum
            if (B1510 > 9007199254740991) yield return new ValidationResult("Invalid value for B1510, must be a value less than or equal to 9007199254740991.", new[] { "B1510" });

            // B1510 (decimal) minimum
            if (B1510 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1510, must be a value greater than or equal to -9007199254740991.", new[] { "B1510" });

            // B1520 (decimal) maximum
            if (B1520 > 9007199254740991) yield return new ValidationResult("Invalid value for B1520, must be a value less than or equal to 9007199254740991.", new[] { "B1520" });

            // B1520 (decimal) minimum
            if (B1520 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1520, must be a value greater than or equal to -9007199254740991.", new[] { "B1520" });

            // B1530 (decimal) maximum
            if (B1530 > 9007199254740991) yield return new ValidationResult("Invalid value for B1530, must be a value less than or equal to 9007199254740991.", new[] { "B1530" });

            // B1530 (decimal) minimum
            if (B1530 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1530, must be a value greater than or equal to -9007199254740991.", new[] { "B1530" });

            // B1540 (decimal) maximum
            if (B1540 > 9007199254740991) yield return new ValidationResult("Invalid value for B1540, must be a value less than or equal to 9007199254740991.", new[] { "B1540" });

            // B1540 (decimal) minimum
            if (B1540 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1540, must be a value greater than or equal to -9007199254740991.", new[] { "B1540" });

            // B1550 (decimal) maximum
            if (B1550 > 9007199254740991) yield return new ValidationResult("Invalid value for B1550, must be a value less than or equal to 9007199254740991.", new[] { "B1550" });

            // B1550 (decimal) minimum
            if (B1550 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1550, must be a value greater than or equal to -9007199254740991.", new[] { "B1550" });

            // B1600 (decimal) maximum
            if (B1600 > 9007199254740991) yield return new ValidationResult("Invalid value for B1600, must be a value less than or equal to 9007199254740991.", new[] { "B1600" });

            // B1600 (decimal) minimum
            if (B1600 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1600, must be a value greater than or equal to -9007199254740991.", new[] { "B1600" });

            // B1700 (decimal) maximum
            if (B1700 > 9007199254740991) yield return new ValidationResult("Invalid value for B1700, must be a value less than or equal to 9007199254740991.", new[] { "B1700" });

            // B1700 (decimal) minimum
            if (B1700 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B1700, must be a value greater than or equal to -9007199254740991.", new[] { "B1700" });

            // B2100 (decimal) maximum
            if (B2100 > 9007199254740991) yield return new ValidationResult("Invalid value for B2100, must be a value less than or equal to 9007199254740991.", new[] { "B2100" });

            // B2100 (decimal) minimum
            if (B2100 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2100, must be a value greater than or equal to -9007199254740991.", new[] { "B2100" });

            // B2110 (decimal) maximum
            if (B2110 > 9007199254740991) yield return new ValidationResult("Invalid value for B2110, must be a value less than or equal to 9007199254740991.", new[] { "B2110" });

            // B2110 (decimal) minimum
            if (B2110 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2110, must be a value greater than or equal to -9007199254740991.", new[] { "B2110" });

            // B2120 (decimal) maximum
            if (B2120 > 9007199254740991) yield return new ValidationResult("Invalid value for B2120, must be a value less than or equal to 9007199254740991.", new[] { "B2120" });

            // B2120 (decimal) minimum
            if (B2120 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2120, must be a value greater than or equal to -9007199254740991.", new[] { "B2120" });

            // B2200 (decimal) maximum
            if (B2200 > 9007199254740991) yield return new ValidationResult("Invalid value for B2200, must be a value less than or equal to 9007199254740991.", new[] { "B2200" });

            // B2200 (decimal) minimum
            if (B2200 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2200, must be a value greater than or equal to -9007199254740991.", new[] { "B2200" });

            // B2210 (decimal) maximum
            if (B2210 > 9007199254740991) yield return new ValidationResult("Invalid value for B2210, must be a value less than or equal to 9007199254740991.", new[] { "B2210" });

            // B2210 (decimal) minimum
            if (B2210 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2210, must be a value greater than or equal to -9007199254740991.", new[] { "B2210" });

            // B2220 (decimal) maximum
            if (B2220 > 9007199254740991) yield return new ValidationResult("Invalid value for B2220, must be a value less than or equal to 9007199254740991.", new[] { "B2220" });

            // B2220 (decimal) minimum
            if (B2220 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2220, must be a value greater than or equal to -9007199254740991.", new[] { "B2220" });

            // B2300 (decimal) maximum
            if (B2300 > 9007199254740991) yield return new ValidationResult("Invalid value for B2300, must be a value less than or equal to 9007199254740991.", new[] { "B2300" });

            // B2300 (decimal) minimum
            if (B2300 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2300, must be a value greater than or equal to -9007199254740991.", new[] { "B2300" });

            // B2310 (decimal) maximum
            if (B2310 > 9007199254740991) yield return new ValidationResult("Invalid value for B2310, must be a value less than or equal to 9007199254740991.", new[] { "B2310" });

            // B2310 (decimal) minimum
            if (B2310 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2310, must be a value greater than or equal to -9007199254740991.", new[] { "B2310" });

            // B2320 (decimal) maximum
            if (B2320 > 9007199254740991) yield return new ValidationResult("Invalid value for B2320, must be a value less than or equal to 9007199254740991.", new[] { "B2320" });

            // B2320 (decimal) minimum
            if (B2320 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2320, must be a value greater than or equal to -9007199254740991.", new[] { "B2320" });

            // B2330 (decimal) maximum
            if (B2330 > 9007199254740991) yield return new ValidationResult("Invalid value for B2330, must be a value less than or equal to 9007199254740991.", new[] { "B2330" });

            // B2330 (decimal) minimum
            if (B2330 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2330, must be a value greater than or equal to -9007199254740991.", new[] { "B2330" });

            // B2340 (decimal) maximum
            if (B2340 > 9007199254740991) yield return new ValidationResult("Invalid value for B2340, must be a value less than or equal to 9007199254740991.", new[] { "B2340" });

            // B2340 (decimal) minimum
            if (B2340 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2340, must be a value greater than or equal to -9007199254740991.", new[] { "B2340" });

            // B2350 (decimal) maximum
            if (B2350 > 9007199254740991) yield return new ValidationResult("Invalid value for B2350, must be a value less than or equal to 9007199254740991.", new[] { "B2350" });

            // B2350 (decimal) minimum
            if (B2350 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2350, must be a value greater than or equal to -9007199254740991.", new[] { "B2350" });

            // B2400 (decimal) maximum
            if (B2400 > 9007199254740991) yield return new ValidationResult("Invalid value for B2400, must be a value less than or equal to 9007199254740991.", new[] { "B2400" });

            // B2400 (decimal) minimum
            if (B2400 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2400, must be a value greater than or equal to -9007199254740991.", new[] { "B2400" });

            // B2410 (decimal) maximum
            if (B2410 > 9007199254740991) yield return new ValidationResult("Invalid value for B2410, must be a value less than or equal to 9007199254740991.", new[] { "B2410" });

            // B2410 (decimal) minimum
            if (B2410 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2410, must be a value greater than or equal to -9007199254740991.", new[] { "B2410" });

            // B2411 (decimal) maximum
            if (B2411 > 9007199254740991) yield return new ValidationResult("Invalid value for B2411, must be a value less than or equal to 9007199254740991.", new[] { "B2411" });

            // B2411 (decimal) minimum
            if (B2411 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2411, must be a value greater than or equal to -9007199254740991.", new[] { "B2411" });

            // B2412 (decimal) maximum
            if (B2412 > 9007199254740991) yield return new ValidationResult("Invalid value for B2412, must be a value less than or equal to 9007199254740991.", new[] { "B2412" });

            // B2412 (decimal) minimum
            if (B2412 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2412, must be a value greater than or equal to -9007199254740991.", new[] { "B2412" });

            // B2460 (decimal) maximum
            if (B2460 > 9007199254740991) yield return new ValidationResult("Invalid value for B2460, must be a value less than or equal to 9007199254740991.", new[] { "B2460" });

            // B2460 (decimal) minimum
            if (B2460 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2460, must be a value greater than or equal to -9007199254740991.", new[] { "B2460" });

            // B2500 (decimal) maximum
            if (B2500 > 9007199254740991) yield return new ValidationResult("Invalid value for B2500, must be a value less than or equal to 9007199254740991.", new[] { "B2500" });

            // B2500 (decimal) minimum
            if (B2500 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2500, must be a value greater than or equal to -9007199254740991.", new[] { "B2500" });

            // B2510 (decimal) maximum
            if (B2510 > 9007199254740991) yield return new ValidationResult("Invalid value for B2510, must be a value less than or equal to 9007199254740991.", new[] { "B2510" });

            // B2510 (decimal) minimum
            if (B2510 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2510, must be a value greater than or equal to -9007199254740991.", new[] { "B2510" });

            // B2520 (decimal) maximum
            if (B2520 > 9007199254740991) yield return new ValidationResult("Invalid value for B2520, must be a value less than or equal to 9007199254740991.", new[] { "B2520" });

            // B2520 (decimal) minimum
            if (B2520 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2520, must be a value greater than or equal to -9007199254740991.", new[] { "B2520" });

            // B2530 (decimal) maximum
            if (B2530 > 9007199254740991) yield return new ValidationResult("Invalid value for B2530, must be a value less than or equal to 9007199254740991.", new[] { "B2530" });

            // B2530 (decimal) minimum
            if (B2530 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2530, must be a value greater than or equal to -9007199254740991.", new[] { "B2530" });

            // B2900 (decimal) maximum
            if (B2900 > 9007199254740991) yield return new ValidationResult("Invalid value for B2900, must be a value less than or equal to 9007199254740991.", new[] { "B2900" });

            // B2900 (decimal) minimum
            if (B2900 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2900, must be a value greater than or equal to -9007199254740991.", new[] { "B2900" });

            // B2910 (decimal) maximum
            if (B2910 > 9007199254740991) yield return new ValidationResult("Invalid value for B2910, must be a value less than or equal to 9007199254740991.", new[] { "B2910" });

            // B2910 (decimal) minimum
            if (B2910 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B2910, must be a value greater than or equal to -9007199254740991.", new[] { "B2910" });

            // B5640 (decimal) maximum
            if (B5640 > 9007199254740991) yield return new ValidationResult("Invalid value for B5640, must be a value less than or equal to 9007199254740991.", new[] { "B5640" });

            // B5640 (decimal) minimum
            if (B5640 < -9007199254740991)
                yield return new ValidationResult("Invalid value for B5640, must be a value greater than or equal to -9007199254740991.", new[] { "B5640" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialReport {\n");
            sb.Append("  DateStart: ").Append(DateStart).Append("\n");
            sb.Append("  DateEnd: ").Append(DateEnd).Append("\n");
            sb.Append("  B1100: ").Append(B1100).Append("\n");
            sb.Append("  B1110: ").Append(B1110).Append("\n");
            sb.Append("  B1120: ").Append(B1120).Append("\n");
            sb.Append("  B1130: ").Append(B1130).Append("\n");
            sb.Append("  B1140: ").Append(B1140).Append("\n");
            sb.Append("  B1150: ").Append(B1150).Append("\n");
            sb.Append("  B1160: ").Append(B1160).Append("\n");
            sb.Append("  B1170: ").Append(B1170).Append("\n");
            sb.Append("  B1180: ").Append(B1180).Append("\n");
            sb.Append("  B1190: ").Append(B1190).Append("\n");
            sb.Append("  B1200: ").Append(B1200).Append("\n");
            sb.Append("  B1210: ").Append(B1210).Append("\n");
            sb.Append("  B1220: ").Append(B1220).Append("\n");
            sb.Append("  B1230: ").Append(B1230).Append("\n");
            sb.Append("  B1240: ").Append(B1240).Append("\n");
            sb.Append("  B1250: ").Append(B1250).Append("\n");
            sb.Append("  B1260: ").Append(B1260).Append("\n");
            sb.Append("  B1300: ").Append(B1300).Append("\n");
            sb.Append("  B1310: ").Append(B1310).Append("\n");
            sb.Append("  B1320: ").Append(B1320).Append("\n");
            sb.Append("  B1340: ").Append(B1340).Append("\n");
            sb.Append("  B1350: ").Append(B1350).Append("\n");
            sb.Append("  B1360: ").Append(B1360).Append("\n");
            sb.Append("  B1370: ").Append(B1370).Append("\n");
            sb.Append("  B1400: ").Append(B1400).Append("\n");
            sb.Append("  B1410: ").Append(B1410).Append("\n");
            sb.Append("  B1420: ").Append(B1420).Append("\n");
            sb.Append("  B1430: ").Append(B1430).Append("\n");
            sb.Append("  B1450: ").Append(B1450).Append("\n");
            sb.Append("  B1500: ").Append(B1500).Append("\n");
            sb.Append("  B1510: ").Append(B1510).Append("\n");
            sb.Append("  B1520: ").Append(B1520).Append("\n");
            sb.Append("  B1530: ").Append(B1530).Append("\n");
            sb.Append("  B1540: ").Append(B1540).Append("\n");
            sb.Append("  B1550: ").Append(B1550).Append("\n");
            sb.Append("  B1600: ").Append(B1600).Append("\n");
            sb.Append("  B1700: ").Append(B1700).Append("\n");
            sb.Append("  B2100: ").Append(B2100).Append("\n");
            sb.Append("  B2110: ").Append(B2110).Append("\n");
            sb.Append("  B2120: ").Append(B2120).Append("\n");
            sb.Append("  B2200: ").Append(B2200).Append("\n");
            sb.Append("  B2210: ").Append(B2210).Append("\n");
            sb.Append("  B2220: ").Append(B2220).Append("\n");
            sb.Append("  B2300: ").Append(B2300).Append("\n");
            sb.Append("  B2310: ").Append(B2310).Append("\n");
            sb.Append("  B2320: ").Append(B2320).Append("\n");
            sb.Append("  B2330: ").Append(B2330).Append("\n");
            sb.Append("  B2340: ").Append(B2340).Append("\n");
            sb.Append("  B2350: ").Append(B2350).Append("\n");
            sb.Append("  B2400: ").Append(B2400).Append("\n");
            sb.Append("  B2410: ").Append(B2410).Append("\n");
            sb.Append("  B2411: ").Append(B2411).Append("\n");
            sb.Append("  B2412: ").Append(B2412).Append("\n");
            sb.Append("  B2460: ").Append(B2460).Append("\n");
            sb.Append("  B2500: ").Append(B2500).Append("\n");
            sb.Append("  B2510: ").Append(B2510).Append("\n");
            sb.Append("  B2520: ").Append(B2520).Append("\n");
            sb.Append("  B2530: ").Append(B2530).Append("\n");
            sb.Append("  B2900: ").Append(B2900).Append("\n");
            sb.Append("  B2910: ").Append(B2910).Append("\n");
            sb.Append("  B5640: ").Append(B5640).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FinancialReport);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DateStart != null) hashCode = hashCode * 59 + DateStart.GetHashCode();
                if (DateEnd != null) hashCode = hashCode * 59 + DateEnd.GetHashCode();
                hashCode = hashCode * 59 + B1100.GetHashCode();
                hashCode = hashCode * 59 + B1110.GetHashCode();
                hashCode = hashCode * 59 + B1120.GetHashCode();
                hashCode = hashCode * 59 + B1130.GetHashCode();
                hashCode = hashCode * 59 + B1140.GetHashCode();
                hashCode = hashCode * 59 + B1150.GetHashCode();
                hashCode = hashCode * 59 + B1160.GetHashCode();
                hashCode = hashCode * 59 + B1170.GetHashCode();
                hashCode = hashCode * 59 + B1180.GetHashCode();
                hashCode = hashCode * 59 + B1190.GetHashCode();
                hashCode = hashCode * 59 + B1200.GetHashCode();
                hashCode = hashCode * 59 + B1210.GetHashCode();
                hashCode = hashCode * 59 + B1220.GetHashCode();
                hashCode = hashCode * 59 + B1230.GetHashCode();
                hashCode = hashCode * 59 + B1240.GetHashCode();
                hashCode = hashCode * 59 + B1250.GetHashCode();
                hashCode = hashCode * 59 + B1260.GetHashCode();
                hashCode = hashCode * 59 + B1300.GetHashCode();
                hashCode = hashCode * 59 + B1310.GetHashCode();
                hashCode = hashCode * 59 + B1320.GetHashCode();
                hashCode = hashCode * 59 + B1340.GetHashCode();
                hashCode = hashCode * 59 + B1350.GetHashCode();
                hashCode = hashCode * 59 + B1360.GetHashCode();
                hashCode = hashCode * 59 + B1370.GetHashCode();
                hashCode = hashCode * 59 + B1400.GetHashCode();
                hashCode = hashCode * 59 + B1410.GetHashCode();
                hashCode = hashCode * 59 + B1420.GetHashCode();
                hashCode = hashCode * 59 + B1430.GetHashCode();
                hashCode = hashCode * 59 + B1450.GetHashCode();
                hashCode = hashCode * 59 + B1500.GetHashCode();
                hashCode = hashCode * 59 + B1510.GetHashCode();
                hashCode = hashCode * 59 + B1520.GetHashCode();
                hashCode = hashCode * 59 + B1530.GetHashCode();
                hashCode = hashCode * 59 + B1540.GetHashCode();
                hashCode = hashCode * 59 + B1550.GetHashCode();
                hashCode = hashCode * 59 + B1600.GetHashCode();
                hashCode = hashCode * 59 + B1700.GetHashCode();
                hashCode = hashCode * 59 + B2100.GetHashCode();
                hashCode = hashCode * 59 + B2110.GetHashCode();
                hashCode = hashCode * 59 + B2120.GetHashCode();
                hashCode = hashCode * 59 + B2200.GetHashCode();
                hashCode = hashCode * 59 + B2210.GetHashCode();
                hashCode = hashCode * 59 + B2220.GetHashCode();
                hashCode = hashCode * 59 + B2300.GetHashCode();
                hashCode = hashCode * 59 + B2310.GetHashCode();
                hashCode = hashCode * 59 + B2320.GetHashCode();
                hashCode = hashCode * 59 + B2330.GetHashCode();
                hashCode = hashCode * 59 + B2340.GetHashCode();
                hashCode = hashCode * 59 + B2350.GetHashCode();
                hashCode = hashCode * 59 + B2400.GetHashCode();
                hashCode = hashCode * 59 + B2410.GetHashCode();
                hashCode = hashCode * 59 + B2411.GetHashCode();
                hashCode = hashCode * 59 + B2412.GetHashCode();
                hashCode = hashCode * 59 + B2460.GetHashCode();
                hashCode = hashCode * 59 + B2500.GetHashCode();
                hashCode = hashCode * 59 + B2510.GetHashCode();
                hashCode = hashCode * 59 + B2520.GetHashCode();
                hashCode = hashCode * 59 + B2530.GetHashCode();
                hashCode = hashCode * 59 + B2900.GetHashCode();
                hashCode = hashCode * 59 + B2910.GetHashCode();
                hashCode = hashCode * 59 + B5640.GetHashCode();
                return hashCode;
            }
        }
    }
}