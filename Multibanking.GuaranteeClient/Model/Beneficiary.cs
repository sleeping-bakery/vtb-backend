/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Данные о бенефициаре
    /// </summary>
    [DataContract(Name = "Beneficiary")]
    public class Beneficiary : IEquatable<Beneficiary>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Beneficiary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Beneficiary()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Beneficiary" /> class.
        /// </summary>
        /// <param name="fullName">Название (required).</param>
        /// <param name="shortName">Название (required).</param>
        /// <param name="inn">ИНН (required).</param>
        /// <param name="kpp">КПП.</param>
        /// <param name="ogrn">ОГРН (required).</param>
        /// <param name="okopf">ОКОПФ (required).</param>
        /// <param name="oktmo">ОКТМО (required).</param>
        /// <param name="okpo">ОКПО (required).</param>
        /// <param name="okved">ОКВЭД (required).</param>
        /// <param name="okvedName">Наименование ОКВЭД.</param>
        /// <param name="addresses">addresses (required).</param>
        public Beneficiary(string fullName = default, string shortName = default, string inn = default, string kpp = default, string ogrn = default, string okopf = default,
            string oktmo = default, string okpo = default, string okved = default, string okvedName = default, List<GuaranteeAddress> addresses = default)
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null) throw new ArgumentNullException("fullName is a required property for Beneficiary and cannot be null");
            FullName = fullName;
            // to ensure "shortName" is required (not null)
            if (shortName == null) throw new ArgumentNullException("shortName is a required property for Beneficiary and cannot be null");
            ShortName = shortName;
            // to ensure "inn" is required (not null)
            if (inn == null) throw new ArgumentNullException("inn is a required property for Beneficiary and cannot be null");
            Inn = inn;
            // to ensure "ogrn" is required (not null)
            if (ogrn == null) throw new ArgumentNullException("ogrn is a required property for Beneficiary and cannot be null");
            Ogrn = ogrn;
            // to ensure "okopf" is required (not null)
            if (okopf == null) throw new ArgumentNullException("okopf is a required property for Beneficiary and cannot be null");
            Okopf = okopf;
            // to ensure "oktmo" is required (not null)
            if (oktmo == null) throw new ArgumentNullException("oktmo is a required property for Beneficiary and cannot be null");
            Oktmo = oktmo;
            // to ensure "okpo" is required (not null)
            if (okpo == null) throw new ArgumentNullException("okpo is a required property for Beneficiary and cannot be null");
            Okpo = okpo;
            // to ensure "okved" is required (not null)
            if (okved == null) throw new ArgumentNullException("okved is a required property for Beneficiary and cannot be null");
            Okved = okved;
            // to ensure "addresses" is required (not null)
            if (addresses == null) throw new ArgumentNullException("addresses is a required property for Beneficiary and cannot be null");
            Addresses = addresses;
            Kpp = kpp;
            OkvedName = okvedName;
        }

        /// <summary>
        ///     Название
        /// </summary>
        /// <value>Название</value>
        [DataMember(Name = "fullName", IsRequired = true, EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        ///     Название
        /// </summary>
        /// <value>Название</value>
        [DataMember(Name = "shortName", IsRequired = true, EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        ///     ИНН
        /// </summary>
        /// <value>ИНН</value>
        [DataMember(Name = "inn", IsRequired = true, EmitDefaultValue = true)]
        public string Inn { get; set; }

        /// <summary>
        ///     КПП
        /// </summary>
        /// <value>КПП</value>
        [DataMember(Name = "kpp", EmitDefaultValue = false)]
        public string Kpp { get; set; }

        /// <summary>
        ///     ОГРН
        /// </summary>
        /// <value>ОГРН</value>
        [DataMember(Name = "ogrn", IsRequired = true, EmitDefaultValue = true)]
        public string Ogrn { get; set; }

        /// <summary>
        ///     ОКОПФ
        /// </summary>
        /// <value>ОКОПФ</value>
        [DataMember(Name = "okopf", IsRequired = true, EmitDefaultValue = true)]
        public string Okopf { get; set; }

        /// <summary>
        ///     ОКТМО
        /// </summary>
        /// <value>ОКТМО</value>
        [DataMember(Name = "oktmo", IsRequired = true, EmitDefaultValue = true)]
        public string Oktmo { get; set; }

        /// <summary>
        ///     ОКПО
        /// </summary>
        /// <value>ОКПО</value>
        [DataMember(Name = "okpo", IsRequired = true, EmitDefaultValue = true)]
        public string Okpo { get; set; }

        /// <summary>
        ///     ОКВЭД
        /// </summary>
        /// <value>ОКВЭД</value>
        [DataMember(Name = "okved", IsRequired = true, EmitDefaultValue = true)]
        public string Okved { get; set; }

        /// <summary>
        ///     Наименование ОКВЭД
        /// </summary>
        /// <value>Наименование ОКВЭД</value>
        [DataMember(Name = "okvedName", EmitDefaultValue = false)]
        public string OkvedName { get; set; }

        /// <summary>
        ///     Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<GuaranteeAddress> Addresses { get; set; }

        /// <summary>
        ///     Returns true if Beneficiary instances are equal
        /// </summary>
        /// <param name="input">Instance of Beneficiary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Beneficiary input)
        {
            if (input == null) return false;
            return
                (
                    FullName == input.FullName ||
                    (FullName != null &&
                     FullName.Equals(input.FullName))
                ) &&
                (
                    ShortName == input.ShortName ||
                    (ShortName != null &&
                     ShortName.Equals(input.ShortName))
                ) &&
                (
                    Inn == input.Inn ||
                    (Inn != null &&
                     Inn.Equals(input.Inn))
                ) &&
                (
                    Kpp == input.Kpp ||
                    (Kpp != null &&
                     Kpp.Equals(input.Kpp))
                ) &&
                (
                    Ogrn == input.Ogrn ||
                    (Ogrn != null &&
                     Ogrn.Equals(input.Ogrn))
                ) &&
                (
                    Okopf == input.Okopf ||
                    (Okopf != null &&
                     Okopf.Equals(input.Okopf))
                ) &&
                (
                    Oktmo == input.Oktmo ||
                    (Oktmo != null &&
                     Oktmo.Equals(input.Oktmo))
                ) &&
                (
                    Okpo == input.Okpo ||
                    (Okpo != null &&
                     Okpo.Equals(input.Okpo))
                ) &&
                (
                    Okved == input.Okved ||
                    (Okved != null &&
                     Okved.Equals(input.Okved))
                ) &&
                (
                    OkvedName == input.OkvedName ||
                    (OkvedName != null &&
                     OkvedName.Equals(input.OkvedName))
                ) &&
                (
                    Addresses == input.Addresses ||
                    (Addresses != null &&
                     input.Addresses != null &&
                     Addresses.SequenceEqual(input.Addresses))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // FullName (string) maxLength
            if (FullName != null && FullName.Length > 1000) yield return new ValidationResult("Invalid value for FullName, length must be less than 1000.", new[] { "FullName" });

            // FullName (string) minLength
            if (FullName != null && FullName.Length < 1) yield return new ValidationResult("Invalid value for FullName, length must be greater than 1.", new[] { "FullName" });

            // ShortName (string) maxLength
            if (ShortName != null && ShortName.Length > 500) yield return new ValidationResult("Invalid value for ShortName, length must be less than 500.", new[] { "ShortName" });

            // ShortName (string) minLength
            if (ShortName != null && ShortName.Length < 1) yield return new ValidationResult("Invalid value for ShortName, length must be greater than 1.", new[] { "ShortName" });

            // Inn (string) maxLength
            if (Inn != null && Inn.Length > 12) yield return new ValidationResult("Invalid value for Inn, length must be less than 12.", new[] { "Inn" });

            // Inn (string) minLength
            if (Inn != null && Inn.Length < 10) yield return new ValidationResult("Invalid value for Inn, length must be greater than 10.", new[] { "Inn" });

            // Kpp (string) maxLength
            if (Kpp != null && Kpp.Length > 9) yield return new ValidationResult("Invalid value for Kpp, length must be less than 9.", new[] { "Kpp" });

            // Kpp (string) minLength
            if (Kpp != null && Kpp.Length < 9) yield return new ValidationResult("Invalid value for Kpp, length must be greater than 9.", new[] { "Kpp" });

            // Ogrn (string) maxLength
            if (Ogrn != null && Ogrn.Length > 15) yield return new ValidationResult("Invalid value for Ogrn, length must be less than 15.", new[] { "Ogrn" });

            // Ogrn (string) minLength
            if (Ogrn != null && Ogrn.Length < 13) yield return new ValidationResult("Invalid value for Ogrn, length must be greater than 13.", new[] { "Ogrn" });

            // Okopf (string) maxLength
            if (Okopf != null && Okopf.Length > 5) yield return new ValidationResult("Invalid value for Okopf, length must be less than 5.", new[] { "Okopf" });

            // Okopf (string) minLength
            if (Okopf != null && Okopf.Length < 5) yield return new ValidationResult("Invalid value for Okopf, length must be greater than 5.", new[] { "Okopf" });

            // Oktmo (string) maxLength
            if (Oktmo != null && Oktmo.Length > 11) yield return new ValidationResult("Invalid value for Oktmo, length must be less than 11.", new[] { "Oktmo" });

            // Oktmo (string) minLength
            if (Oktmo != null && Oktmo.Length < 8) yield return new ValidationResult("Invalid value for Oktmo, length must be greater than 8.", new[] { "Oktmo" });

            // Okpo (string) maxLength
            if (Okpo != null && Okpo.Length > 10) yield return new ValidationResult("Invalid value for Okpo, length must be less than 10.", new[] { "Okpo" });

            // Okpo (string) minLength
            if (Okpo != null && Okpo.Length < 8) yield return new ValidationResult("Invalid value for Okpo, length must be greater than 8.", new[] { "Okpo" });

            // Okved (string) maxLength
            if (Okved != null && Okved.Length > 8) yield return new ValidationResult("Invalid value for Okved, length must be less than 8.", new[] { "Okved" });

            // Okved (string) minLength
            if (Okved != null && Okved.Length < 2) yield return new ValidationResult("Invalid value for Okved, length must be greater than 2.", new[] { "Okved" });

            // OkvedName (string) maxLength
            if (OkvedName != null && OkvedName.Length > 700) yield return new ValidationResult("Invalid value for OkvedName, length must be less than 700.", new[] { "OkvedName" });

            // OkvedName (string) minLength
            if (OkvedName != null && OkvedName.Length < 1) yield return new ValidationResult("Invalid value for OkvedName, length must be greater than 1.", new[] { "OkvedName" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Beneficiary {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Inn: ").Append(Inn).Append("\n");
            sb.Append("  Kpp: ").Append(Kpp).Append("\n");
            sb.Append("  Ogrn: ").Append(Ogrn).Append("\n");
            sb.Append("  Okopf: ").Append(Okopf).Append("\n");
            sb.Append("  Oktmo: ").Append(Oktmo).Append("\n");
            sb.Append("  Okpo: ").Append(Okpo).Append("\n");
            sb.Append("  Okved: ").Append(Okved).Append("\n");
            sb.Append("  OkvedName: ").Append(OkvedName).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Beneficiary);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (FullName != null) hashCode = hashCode * 59 + FullName.GetHashCode();
                if (ShortName != null) hashCode = hashCode * 59 + ShortName.GetHashCode();
                if (Inn != null) hashCode = hashCode * 59 + Inn.GetHashCode();
                if (Kpp != null) hashCode = hashCode * 59 + Kpp.GetHashCode();
                if (Ogrn != null) hashCode = hashCode * 59 + Ogrn.GetHashCode();
                if (Okopf != null) hashCode = hashCode * 59 + Okopf.GetHashCode();
                if (Oktmo != null) hashCode = hashCode * 59 + Oktmo.GetHashCode();
                if (Okpo != null) hashCode = hashCode * 59 + Okpo.GetHashCode();
                if (Okved != null) hashCode = hashCode * 59 + Okved.GetHashCode();
                if (OkvedName != null) hashCode = hashCode * 59 + OkvedName.GetHashCode();
                if (Addresses != null) hashCode = hashCode * 59 + Addresses.GetHashCode();
                return hashCode;
            }
        }
    }
}