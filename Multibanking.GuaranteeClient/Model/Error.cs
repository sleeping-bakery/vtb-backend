/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Ошибка
    /// </summary>
    [DataContract(Name = "Error")]
    public partial class Error : IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="httpCode">HTTP код ошибки.</param>
        /// <param name="httpMessage">HTTP описание ошибки.</param>
        /// <param name="moreInformation">Подробная информация об ошибке.</param>
        public Error(string httpCode = default(string), string httpMessage = default(string), string moreInformation = default(string))
        {
            this.HttpCode = httpCode;
            this.HttpMessage = httpMessage;
            this.MoreInformation = moreInformation;
        }

        /// <summary>
        /// HTTP код ошибки
        /// </summary>
        /// <value>HTTP код ошибки</value>
        [DataMember(Name = "httpCode", EmitDefaultValue = false)]
        public string HttpCode { get; set; }

        /// <summary>
        /// HTTP описание ошибки
        /// </summary>
        /// <value>HTTP описание ошибки</value>
        [DataMember(Name = "httpMessage", EmitDefaultValue = false)]
        public string HttpMessage { get; set; }

        /// <summary>
        /// Подробная информация об ошибке
        /// </summary>
        /// <value>Подробная информация об ошибке</value>
        [DataMember(Name = "moreInformation", EmitDefaultValue = false)]
        public string MoreInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  HttpCode: ").Append(HttpCode).Append("\n");
            sb.Append("  HttpMessage: ").Append(HttpMessage).Append("\n");
            sb.Append("  MoreInformation: ").Append(MoreInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HttpCode == input.HttpCode ||
                    (this.HttpCode != null &&
                    this.HttpCode.Equals(input.HttpCode))
                ) && 
                (
                    this.HttpMessage == input.HttpMessage ||
                    (this.HttpMessage != null &&
                    this.HttpMessage.Equals(input.HttpMessage))
                ) && 
                (
                    this.MoreInformation == input.MoreInformation ||
                    (this.MoreInformation != null &&
                    this.MoreInformation.Equals(input.MoreInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpCode != null)
                {
                    hashCode = (hashCode * 59) + this.HttpCode.GetHashCode();
                }
                if (this.HttpMessage != null)
                {
                    hashCode = (hashCode * 59) + this.HttpMessage.GetHashCode();
                }
                if (this.MoreInformation != null)
                {
                    hashCode = (hashCode * 59) + this.MoreInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // HttpCode (string) maxLength
            if (this.HttpCode != null && this.HttpCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HttpCode, length must be less than 3.", new [] { "HttpCode" });
            }

            // HttpMessage (string) maxLength
            if (this.HttpMessage != null && this.HttpMessage.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HttpMessage, length must be less than 255.", new [] { "HttpMessage" });
            }

            // MoreInformation (string) maxLength
            if (this.MoreInformation != null && this.MoreInformation.Length > 5000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MoreInformation, length must be less than 5000.", new [] { "MoreInformation" });
            }

            yield break;
        }
    }

}
