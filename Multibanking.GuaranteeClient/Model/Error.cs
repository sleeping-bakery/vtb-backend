/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Ошибка
    /// </summary>
    [DataContract(Name = "Error")]
    public class Error : IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="httpCode">HTTP код ошибки.</param>
        /// <param name="httpMessage">HTTP описание ошибки.</param>
        /// <param name="moreInformation">Подробная информация об ошибке.</param>
        public Error(string httpCode = default, string httpMessage = default, string moreInformation = default)
        {
            HttpCode = httpCode;
            HttpMessage = httpMessage;
            MoreInformation = moreInformation;
        }

        /// <summary>
        ///     HTTP код ошибки
        /// </summary>
        /// <value>HTTP код ошибки</value>
        [DataMember(Name = "httpCode", EmitDefaultValue = false)]
        public string HttpCode { get; set; }

        /// <summary>
        ///     HTTP описание ошибки
        /// </summary>
        /// <value>HTTP описание ошибки</value>
        [DataMember(Name = "httpMessage", EmitDefaultValue = false)]
        public string HttpMessage { get; set; }

        /// <summary>
        ///     Подробная информация об ошибке
        /// </summary>
        /// <value>Подробная информация об ошибке</value>
        [DataMember(Name = "moreInformation", EmitDefaultValue = false)]
        public string MoreInformation { get; set; }

        /// <summary>
        ///     Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null) return false;
            return
                (
                    HttpCode == input.HttpCode ||
                    (HttpCode != null &&
                     HttpCode.Equals(input.HttpCode))
                ) &&
                (
                    HttpMessage == input.HttpMessage ||
                    (HttpMessage != null &&
                     HttpMessage.Equals(input.HttpMessage))
                ) &&
                (
                    MoreInformation == input.MoreInformation ||
                    (MoreInformation != null &&
                     MoreInformation.Equals(input.MoreInformation))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // HttpCode (string) maxLength
            if (HttpCode != null && HttpCode.Length > 3) yield return new ValidationResult("Invalid value for HttpCode, length must be less than 3.", new[] { "HttpCode" });

            // HttpMessage (string) maxLength
            if (HttpMessage != null && HttpMessage.Length > 255)
                yield return new ValidationResult("Invalid value for HttpMessage, length must be less than 255.", new[] { "HttpMessage" });

            // MoreInformation (string) maxLength
            if (MoreInformation != null && MoreInformation.Length > 5000)
                yield return new ValidationResult("Invalid value for MoreInformation, length must be less than 5000.", new[] { "MoreInformation" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  HttpCode: ").Append(HttpCode).Append("\n");
            sb.Append("  HttpMessage: ").Append(HttpMessage).Append("\n");
            sb.Append("  MoreInformation: ").Append(MoreInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Error);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (HttpCode != null) hashCode = hashCode * 59 + HttpCode.GetHashCode();
                if (HttpMessage != null) hashCode = hashCode * 59 + HttpMessage.GetHashCode();
                if (MoreInformation != null) hashCode = hashCode * 59 + MoreInformation.GetHashCode();
                return hashCode;
            }
        }
    }
}