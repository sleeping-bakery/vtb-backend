/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     DTO с текстовым комментарием, ссылкокй на документ от клиента с правками/замечаниями
    /// </summary>
    [DataContract(Name = "CommentDto")]
    public class CommentDto : IEquatable<CommentDto>, IValidatableObject
    {
        /// <summary>
        ///     Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии
        /// </summary>
        /// <value>Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommentTypeEnum
        {
            /// <summary>
            ///     Enum OFFERAPPROVAL for value: OFFER_APPROVAL
            /// </summary>
            [EnumMember(Value = "OFFER_APPROVAL")] OFFERAPPROVAL = 1,

            /// <summary>
            ///     Enum GUARANTEECHANGE for value: GUARANTEE_CHANGE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_CHANGE")]
            GUARANTEECHANGE = 2
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CommentDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommentDto()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CommentDto" /> class.
        /// </summary>
        /// <param name="comment">Комментарий.</param>
        /// <param name="commentType">Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии (required).</param>
        /// <param name="fileName">Имя документа (required).</param>
        /// <param name="requestId">Идентификатор запроса на создание документа (required).</param>
        public CommentDto(string comment = default, CommentTypeEnum commentType = default, string fileName = default, long requestId = default)
        {
            CommentType = commentType;
            // to ensure "fileName" is required (not null)
            if (fileName == null) throw new ArgumentNullException("fileName is a required property for CommentDto and cannot be null");
            FileName = fileName;
            RequestId = requestId;
            Comment = comment;
        }


        /// <summary>
        ///     Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии
        /// </summary>
        /// <value>Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии</value>
        [DataMember(Name = "commentType", IsRequired = true, EmitDefaultValue = true)]
        public CommentTypeEnum CommentType { get; set; }

        /// <summary>
        ///     Комментарий
        /// </summary>
        /// <value>Комментарий</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        ///     Имя документа
        /// </summary>
        /// <value>Имя документа</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        ///     Идентификатор запроса на создание документа
        /// </summary>
        /// <value>Идентификатор запроса на создание документа</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public long RequestId { get; set; }

        /// <summary>
        ///     Returns true if CommentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentDto input)
        {
            if (input == null) return false;
            return
                (
                    Comment == input.Comment ||
                    (Comment != null &&
                     Comment.Equals(input.Comment))
                ) &&
                (
                    CommentType == input.CommentType ||
                    CommentType.Equals(input.CommentType)
                ) &&
                (
                    FileName == input.FileName ||
                    (FileName != null &&
                     FileName.Equals(input.FileName))
                ) &&
                (
                    RequestId == input.RequestId ||
                    RequestId.Equals(input.RequestId)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (Comment != null && Comment.Length > 1500) yield return new ValidationResult("Invalid value for Comment, length must be less than 1500.", new[] { "Comment" });

            // Comment (string) minLength
            if (Comment != null && Comment.Length < 0) yield return new ValidationResult("Invalid value for Comment, length must be greater than 0.", new[] { "Comment" });

            // FileName (string) maxLength
            if (FileName != null && FileName.Length > 255) yield return new ValidationResult("Invalid value for FileName, length must be less than 255.", new[] { "FileName" });

            // FileName (string) minLength
            if (FileName != null && FileName.Length < 1) yield return new ValidationResult("Invalid value for FileName, length must be greater than 1.", new[] { "FileName" });

            // FileName (string) pattern
            var regexFileName = new Regex(@"^[А-ЯЁа-яё\\w\\s-]+(\\(\\d+\\))*\\.[A-Za-z\\w]{1,4}$", RegexOptions.CultureInvariant);
            if (false == regexFileName.Match(FileName).Success)
                yield return new ValidationResult("Invalid value for FileName, must match a pattern of " + regexFileName, new[] { "FileName" });

            // RequestId (long) maximum
            if (RequestId > 9007199254740991)
                yield return new ValidationResult("Invalid value for RequestId, must be a value less than or equal to 9007199254740991.", new[] { "RequestId" });

            // RequestId (long) minimum
            if (RequestId < 0) yield return new ValidationResult("Invalid value for RequestId, must be a value greater than or equal to 0.", new[] { "RequestId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentDto {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommentType: ").Append(CommentType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CommentDto);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Comment != null) hashCode = hashCode * 59 + Comment.GetHashCode();
                hashCode = hashCode * 59 + CommentType.GetHashCode();
                if (FileName != null) hashCode = hashCode * 59 + FileName.GetHashCode();
                hashCode = hashCode * 59 + RequestId.GetHashCode();
                return hashCode;
            }
        }
    }
}