/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// DTO с текстовым комментарием, ссылкокй на документ от клиента с правками/замечаниями
    /// </summary>
    [DataContract(Name = "CommentDto")]
    public partial class CommentDto : IEquatable<CommentDto>, IValidatableObject
    {
        /// <summary>
        /// Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии
        /// </summary>
        /// <value>Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommentTypeEnum
        {
            /// <summary>
            /// Enum OFFERAPPROVAL for value: OFFER_APPROVAL
            /// </summary>
            [EnumMember(Value = "OFFER_APPROVAL")]
            OFFERAPPROVAL = 1,

            /// <summary>
            /// Enum GUARANTEECHANGE for value: GUARANTEE_CHANGE
            /// </summary>
            [EnumMember(Value = "GUARANTEE_CHANGE")]
            GUARANTEECHANGE = 2

        }


        /// <summary>
        /// Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии
        /// </summary>
        /// <value>Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии</value>
        [DataMember(Name = "commentType", IsRequired = true, EmitDefaultValue = true)]
        public CommentTypeEnum CommentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommentDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentDto" /> class.
        /// </summary>
        /// <param name="comment">Комментарий.</param>
        /// <param name="commentType">Тип комментария. OFFER_APPROVAL - в процессе запроса клиента правок по оферте, GUARANTEE_CHANGE - клиент хочет изменить текст гарантии (required).</param>
        /// <param name="fileName">Имя документа (required).</param>
        /// <param name="requestId">Идентификатор запроса на создание документа (required).</param>
        public CommentDto(string comment = default(string), CommentTypeEnum commentType = default(CommentTypeEnum), string fileName = default(string), long requestId = default(long))
        {
            this.CommentType = commentType;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for CommentDto and cannot be null");
            }
            this.FileName = fileName;
            this.RequestId = requestId;
            this.Comment = comment;
        }

        /// <summary>
        /// Комментарий
        /// </summary>
        /// <value>Комментарий</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Имя документа
        /// </summary>
        /// <value>Имя документа</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// Идентификатор запроса на создание документа
        /// </summary>
        /// <value>Идентификатор запроса на создание документа</value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public long RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommentDto {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommentType: ").Append(CommentType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommentDto);
        }

        /// <summary>
        /// Returns true if CommentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CommentType == input.CommentType ||
                    this.CommentType.Equals(input.CommentType)
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    this.RequestId.Equals(input.RequestId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CommentType.GetHashCode();
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, length must be less than 1500.", new [] { "Comment" });
            }

            // Comment (string) minLength
            if (this.Comment != null && this.Comment.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comment, length must be greater than 0.", new [] { "Comment" });
            }

            // FileName (string) maxLength
            if (this.FileName != null && this.FileName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be less than 255.", new [] { "FileName" });
            }

            // FileName (string) minLength
            if (this.FileName != null && this.FileName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be greater than 1.", new [] { "FileName" });
            }

            // FileName (string) pattern
            Regex regexFileName = new Regex(@"^[А-ЯЁа-яё\\w\\s-]+(\\(\\d+\\))*\\.[A-Za-z\\w]{1,4}$", RegexOptions.CultureInvariant);
            if (false == regexFileName.Match(this.FileName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, must match a pattern of " + regexFileName, new [] { "FileName" });
            }

            // RequestId (long) maximum
            if (this.RequestId > (long)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must be a value less than or equal to 9007199254740991.", new [] { "RequestId" });
            }

            // RequestId (long) minimum
            if (this.RequestId < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, must be a value greater than or equal to 0.", new [] { "RequestId" });
            }

            yield break;
        }
    }

}
