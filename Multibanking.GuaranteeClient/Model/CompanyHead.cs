/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Данные о руководителе
    /// </summary>
    [DataContract(Name = "CompanyHead")]
    public partial class CompanyHead : IEquatable<CompanyHead>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyHead" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyHead() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyHead" /> class.
        /// </summary>
        /// <param name="id">Id (required).</param>
        /// <param name="personData">personData (required).</param>
        /// <param name="identityDocument">identityDocument (required).</param>
        /// <param name="authorizingDoc">Основание полномочий.</param>
        /// <param name="contacts">contacts.</param>
        public CompanyHead(string id = default(string), PersonData personData = default(PersonData), IdentityDocument identityDocument = default(IdentityDocument), string authorizingDoc = default(string), List<ContactData> contacts = default(List<ContactData>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CompanyHead and cannot be null");
            }
            this.Id = id;
            // to ensure "personData" is required (not null)
            if (personData == null)
            {
                throw new ArgumentNullException("personData is a required property for CompanyHead and cannot be null");
            }
            this.PersonData = personData;
            // to ensure "identityDocument" is required (not null)
            if (identityDocument == null)
            {
                throw new ArgumentNullException("identityDocument is a required property for CompanyHead and cannot be null");
            }
            this.IdentityDocument = identityDocument;
            this.AuthorizingDoc = authorizingDoc;
            this.Contacts = contacts;
        }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PersonData
        /// </summary>
        [DataMember(Name = "personData", IsRequired = true, EmitDefaultValue = true)]
        public PersonData PersonData { get; set; }

        /// <summary>
        /// Gets or Sets IdentityDocument
        /// </summary>
        [DataMember(Name = "identityDocument", IsRequired = true, EmitDefaultValue = true)]
        public IdentityDocument IdentityDocument { get; set; }

        /// <summary>
        /// Основание полномочий
        /// </summary>
        /// <value>Основание полномочий</value>
        [DataMember(Name = "authorizingDoc", EmitDefaultValue = false)]
        public string AuthorizingDoc { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<ContactData> Contacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyHead {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonData: ").Append(PersonData).Append("\n");
            sb.Append("  IdentityDocument: ").Append(IdentityDocument).Append("\n");
            sb.Append("  AuthorizingDoc: ").Append(AuthorizingDoc).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyHead);
        }

        /// <summary>
        /// Returns true if CompanyHead instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyHead to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyHead input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PersonData == input.PersonData ||
                    (this.PersonData != null &&
                    this.PersonData.Equals(input.PersonData))
                ) && 
                (
                    this.IdentityDocument == input.IdentityDocument ||
                    (this.IdentityDocument != null &&
                    this.IdentityDocument.Equals(input.IdentityDocument))
                ) && 
                (
                    this.AuthorizingDoc == input.AuthorizingDoc ||
                    (this.AuthorizingDoc != null &&
                    this.AuthorizingDoc.Equals(input.AuthorizingDoc))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PersonData != null)
                {
                    hashCode = (hashCode * 59) + this.PersonData.GetHashCode();
                }
                if (this.IdentityDocument != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityDocument.GetHashCode();
                }
                if (this.AuthorizingDoc != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizingDoc.GetHashCode();
                }
                if (this.Contacts != null)
                {
                    hashCode = (hashCode * 59) + this.Contacts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
