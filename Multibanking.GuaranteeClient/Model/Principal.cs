/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Данные принципала
    /// </summary>
    [DataContract(Name = "Principal")]
    public class Principal : IEquatable<Principal>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Principal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Principal()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Principal" /> class.
        /// </summary>
        /// <param name="id">Id (required).</param>
        /// <param name="addresses">addresses (required).</param>
        /// <param name="bankAccounts">bankAccounts (required).</param>
        /// <param name="companyInfo">guaranteeCompanyInfo (required).</param>
        /// <param name="contactPerson">contactPerson (required).</param>
        /// <param name="founders">founders.</param>
        /// <param name="accountStatement">accountStatement.</param>
        public Principal(string id = default, List<GuaranteeAddress> addresses = default, List<BankAccount> bankAccounts = default, PrincipalCompanyInfoDto companyInfo = default,
            ContactPerson contactPerson = default, Founders founders = default, FinancialStatement accountStatement = default)
        {
            // to ensure "id" is required (not null)
            if (id == null) throw new ArgumentNullException("id is a required property for Principal and cannot be null");
            Id = id;
            // to ensure "addresses" is required (not null)
            if (addresses == null) throw new ArgumentNullException("addresses is a required property for Principal and cannot be null");
            Addresses = addresses;
            // to ensure "bankAccounts" is required (not null)
            if (bankAccounts == null) throw new ArgumentNullException("bankAccounts is a required property for Principal and cannot be null");
            BankAccounts = bankAccounts;
            // to ensure "guaranteeCompanyInfo" is required (not null)
            if (companyInfo == null) throw new ArgumentNullException("guaranteeCompanyInfo is a required property for Principal and cannot be null");
            CompanyInfo = companyInfo;
            // to ensure "contactPerson" is required (not null)
            if (contactPerson == null) throw new ArgumentNullException("contactPerson is a required property for Principal and cannot be null");
            ContactPerson = contactPerson;
            Founders = founders;
            AccountStatement = accountStatement;
        }

        /// <summary>
        ///     Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        ///     Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<GuaranteeAddress> Addresses { get; set; }

        /// <summary>
        ///     Gets or Sets BankAccounts
        /// </summary>
        [DataMember(Name = "bankAccounts", IsRequired = true, EmitDefaultValue = true)]
        public List<BankAccount> BankAccounts { get; set; }

        /// <summary>
        ///     Gets or Sets GuaranteeCompanyInfo
        /// </summary>
        [DataMember(Name = "guaranteeCompanyInfo", IsRequired = true, EmitDefaultValue = true)]
        public PrincipalCompanyInfoDto CompanyInfo { get; set; }

        /// <summary>
        ///     Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contactPerson", IsRequired = true, EmitDefaultValue = true)]
        public ContactPerson ContactPerson { get; set; }

        /// <summary>
        ///     Gets or Sets Founders
        /// </summary>
        [DataMember(Name = "founders", EmitDefaultValue = false)]
        public Founders Founders { get; set; }

        /// <summary>
        ///     Gets or Sets AccountStatement
        /// </summary>
        [DataMember(Name = "accountStatement", EmitDefaultValue = false)]
        public FinancialStatement AccountStatement { get; set; }

        /// <summary>
        ///     Returns true if Principal instances are equal
        /// </summary>
        /// <param name="input">Instance of Principal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Principal input)
        {
            if (input == null) return false;
            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Addresses == input.Addresses ||
                    (Addresses != null &&
                     input.Addresses != null &&
                     Addresses.SequenceEqual(input.Addresses))
                ) &&
                (
                    BankAccounts == input.BankAccounts ||
                    (BankAccounts != null &&
                     input.BankAccounts != null &&
                     BankAccounts.SequenceEqual(input.BankAccounts))
                ) &&
                (
                    CompanyInfo == input.CompanyInfo ||
                    (CompanyInfo != null &&
                     CompanyInfo.Equals(input.CompanyInfo))
                ) &&
                (
                    ContactPerson == input.ContactPerson ||
                    (ContactPerson != null &&
                     ContactPerson.Equals(input.ContactPerson))
                ) &&
                (
                    Founders == input.Founders ||
                    (Founders != null &&
                     Founders.Equals(input.Founders))
                ) &&
                (
                    AccountStatement == input.AccountStatement ||
                    (AccountStatement != null &&
                     AccountStatement.Equals(input.AccountStatement))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Principal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  BankAccounts: ").Append(BankAccounts).Append("\n");
            sb.Append("  GuaranteeCompanyInfo: ").Append(CompanyInfo).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  Founders: ").Append(Founders).Append("\n");
            sb.Append("  AccountStatement: ").Append(AccountStatement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Principal);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
                if (Addresses != null) hashCode = hashCode * 59 + Addresses.GetHashCode();
                if (BankAccounts != null) hashCode = hashCode * 59 + BankAccounts.GetHashCode();
                if (CompanyInfo != null) hashCode = hashCode * 59 + CompanyInfo.GetHashCode();
                if (ContactPerson != null) hashCode = hashCode * 59 + ContactPerson.GetHashCode();
                if (Founders != null) hashCode = hashCode * 59 + Founders.GetHashCode();
                if (AccountStatement != null) hashCode = hashCode * 59 + AccountStatement.GetHashCode();
                return hashCode;
            }
        }
    }
}