/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Ответ с идентификатором заявки
    /// </summary>
    [DataContract(Name = "OrderResponse")]
    public class OrderResponse : IEquatable<OrderResponse>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderResponse()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderResponse" /> class.
        /// </summary>
        /// <param name="orderId">Идентификатор заявки (required).</param>
        /// <param name="orderNumber">Номер заявки.</param>
        /// <param name="parentId">Идентификатор родительской заявки.</param>
        public OrderResponse(string orderId = default, string orderNumber = default, string parentId = default)
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null) throw new ArgumentNullException("orderId is a required property for OrderResponse and cannot be null");
            OrderId = orderId;
            OrderNumber = orderNumber;
            ParentId = parentId;
        }

        /// <summary>
        ///     Идентификатор заявки
        /// </summary>
        /// <value>Идентификатор заявки</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        ///     Номер заявки
        /// </summary>
        /// <value>Номер заявки</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        ///     Идентификатор родительской заявки
        /// </summary>
        /// <value>Идентификатор родительской заявки</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        ///     Returns true if OrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderResponse input)
        {
            if (input == null) return false;
            return
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                     OrderId.Equals(input.OrderId))
                ) &&
                (
                    OrderNumber == input.OrderNumber ||
                    (OrderNumber != null &&
                     OrderNumber.Equals(input.OrderNumber))
                ) &&
                (
                    ParentId == input.ParentId ||
                    (ParentId != null &&
                     ParentId.Equals(input.ParentId))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // OrderId (string) maxLength
            if (OrderId != null && OrderId.Length > 255) yield return new ValidationResult("Invalid value for OrderId, length must be less than 255.", new[] { "OrderId" });

            // OrderNumber (string) maxLength
            if (OrderNumber != null && OrderNumber.Length > 255)
                yield return new ValidationResult("Invalid value for OrderNumber, length must be less than 255.", new[] { "OrderNumber" });

            // ParentId (string) maxLength
            if (ParentId != null && ParentId.Length > 36) yield return new ValidationResult("Invalid value for ParentId, length must be less than 36.", new[] { "ParentId" });

            // ParentId (string) minLength
            if (ParentId != null && ParentId.Length < 36) yield return new ValidationResult("Invalid value for ParentId, length must be greater than 36.", new[] { "ParentId" });

            // ParentId (string) pattern
            var regexParentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexParentId.Match(ParentId).Success)
                yield return new ValidationResult("Invalid value for ParentId, must match a pattern of " + regexParentId, new[] { "ParentId" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderResponse {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OrderResponse);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (OrderId != null) hashCode = hashCode * 59 + OrderId.GetHashCode();
                if (OrderNumber != null) hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                if (ParentId != null) hashCode = hashCode * 59 + ParentId.GetHashCode();
                return hashCode;
            }
        }
    }
}