/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Скидка
    /// </summary>
    [DataContract(Name = "DiscountResponse")]
    public partial class DiscountResponse : IEquatable<DiscountResponse>, IValidatableObject
    {
        /// <summary>
        /// OK - запрос на изменение комиссии принят, DECLINE - запрос на изменение комиссии отклонен, WAIT - решение еще не принято
        /// </summary>
        /// <value>OK - запрос на изменение комиссии принят, DECLINE - запрос на изменение комиссии отклонен, WAIT - решение еще не принято</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountSolutionEnum
        {
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,

            /// <summary>
            /// Enum DECLINE for value: DECLINE
            /// </summary>
            [EnumMember(Value = "DECLINE")]
            DECLINE = 2,

            /// <summary>
            /// Enum WAIT for value: WAIT
            /// </summary>
            [EnumMember(Value = "WAIT")]
            WAIT = 3

        }


        /// <summary>
        /// OK - запрос на изменение комиссии принят, DECLINE - запрос на изменение комиссии отклонен, WAIT - решение еще не принято
        /// </summary>
        /// <value>OK - запрос на изменение комиссии принят, DECLINE - запрос на изменение комиссии отклонен, WAIT - решение еще не принято</value>
        [DataMember(Name = "discountSolution", IsRequired = true, EmitDefaultValue = true)]
        public DiscountSolutionEnum DiscountSolution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DiscountResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountResponse" /> class.
        /// </summary>
        /// <param name="discountSolution">OK - запрос на изменение комиссии принят, DECLINE - запрос на изменение комиссии отклонен, WAIT - решение еще не принято (required).</param>
        /// <param name="discountCommission">Сумма комиссии, с учетом запрошенной клиентом скидки, руб (required).</param>
        /// <param name="annualInterestRate">Запрошенная ставка комиссии, в % годовых (required).</param>
        public DiscountResponse(DiscountSolutionEnum discountSolution = default(DiscountSolutionEnum), decimal discountCommission = default(decimal), decimal annualInterestRate = default(decimal))
        {
            this.DiscountSolution = discountSolution;
            this.DiscountCommission = discountCommission;
            this.AnnualInterestRate = annualInterestRate;
        }

        /// <summary>
        /// Сумма комиссии, с учетом запрошенной клиентом скидки, руб
        /// </summary>
        /// <value>Сумма комиссии, с учетом запрошенной клиентом скидки, руб</value>
        [DataMember(Name = "discountCommission", IsRequired = true, EmitDefaultValue = true)]
        public decimal DiscountCommission { get; set; }

        /// <summary>
        /// Запрошенная ставка комиссии, в % годовых
        /// </summary>
        /// <value>Запрошенная ставка комиссии, в % годовых</value>
        [DataMember(Name = "annualInterestRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal AnnualInterestRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscountResponse {\n");
            sb.Append("  DiscountSolution: ").Append(DiscountSolution).Append("\n");
            sb.Append("  DiscountCommission: ").Append(DiscountCommission).Append("\n");
            sb.Append("  AnnualInterestRate: ").Append(AnnualInterestRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscountResponse);
        }

        /// <summary>
        /// Returns true if DiscountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscountResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DiscountSolution == input.DiscountSolution ||
                    this.DiscountSolution.Equals(input.DiscountSolution)
                ) && 
                (
                    this.DiscountCommission == input.DiscountCommission ||
                    this.DiscountCommission.Equals(input.DiscountCommission)
                ) && 
                (
                    this.AnnualInterestRate == input.AnnualInterestRate ||
                    this.AnnualInterestRate.Equals(input.AnnualInterestRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DiscountSolution.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountCommission.GetHashCode();
                hashCode = (hashCode * 59) + this.AnnualInterestRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DiscountCommission (decimal) maximum
            if (this.DiscountCommission > (decimal)9007199254740991)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiscountCommission, must be a value less than or equal to 9007199254740991.", new [] { "DiscountCommission" });
            }

            // DiscountCommission (decimal) minimum
            if (this.DiscountCommission < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiscountCommission, must be a value greater than or equal to 0.", new [] { "DiscountCommission" });
            }

            // AnnualInterestRate (decimal) maximum
            if (this.AnnualInterestRate > (decimal)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnnualInterestRate, must be a value less than or equal to 99.", new [] { "AnnualInterestRate" });
            }

            // AnnualInterestRate (decimal) minimum
            if (this.AnnualInterestRate < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnnualInterestRate, must be a value greater than or equal to 0.", new [] { "AnnualInterestRate" });
            }

            yield break;
        }
    }

}
