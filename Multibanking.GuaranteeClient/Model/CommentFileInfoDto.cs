/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Документы к комментариям
    /// </summary>
    [DataContract(Name = "CommentFileInfoDto")]
    public class CommentFileInfoDto : IEquatable<CommentFileInfoDto>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="CommentFileInfoDto" /> class.
        /// </summary>
        /// <param name="documentId">Идентификатор загружаемого документа.</param>
        /// <param name="fileName">Имя передаваемого документа.</param>
        public CommentFileInfoDto(string documentId = default, string fileName = default)
        {
            DocumentId = documentId;
            FileName = fileName;
        }

        /// <summary>
        ///     Идентификатор загружаемого документа
        /// </summary>
        /// <value>Идентификатор загружаемого документа</value>
        [DataMember(Name = "documentId", EmitDefaultValue = false)]
        public string DocumentId { get; set; }

        /// <summary>
        ///     Имя передаваемого документа
        /// </summary>
        /// <value>Имя передаваемого документа</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        ///     Returns true if CommentFileInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentFileInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentFileInfoDto input)
        {
            if (input == null) return false;
            return
                (
                    DocumentId == input.DocumentId ||
                    (DocumentId != null &&
                     DocumentId.Equals(input.DocumentId))
                ) &&
                (
                    FileName == input.FileName ||
                    (FileName != null &&
                     FileName.Equals(input.FileName))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // DocumentId (string) maxLength
            if (DocumentId != null && DocumentId.Length > 36)
                yield return new ValidationResult("Invalid value for DocumentId, length must be less than 36.", new[] { "DocumentId" });

            // DocumentId (string) minLength
            if (DocumentId != null && DocumentId.Length < 36)
                yield return new ValidationResult("Invalid value for DocumentId, length must be greater than 36.", new[] { "DocumentId" });

            // DocumentId (string) pattern
            var regexDocumentId = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexDocumentId.Match(DocumentId).Success)
                yield return new ValidationResult("Invalid value for DocumentId, must match a pattern of " + regexDocumentId, new[] { "DocumentId" });

            // FileName (string) maxLength
            if (FileName != null && FileName.Length > 255) yield return new ValidationResult("Invalid value for FileName, length must be less than 255.", new[] { "FileName" });

            // FileName (string) minLength
            if (FileName != null && FileName.Length < 1) yield return new ValidationResult("Invalid value for FileName, length must be greater than 1.", new[] { "FileName" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentFileInfoDto {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CommentFileInfoDto);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (DocumentId != null) hashCode = hashCode * 59 + DocumentId.GetHashCode();
                if (FileName != null) hashCode = hashCode * 59 + FileName.GetHashCode();
                return hashCode;
            }
        }
    }
}