/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Контактное лицо по гарантиям.
    /// </summary>
    [DataContract(Name = "ContactPerson")]
    public class ContactPerson : IEquatable<ContactPerson>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactPerson" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactPerson()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactPerson" /> class.
        /// </summary>
        /// <param name="lastName">Фамилия (required).</param>
        /// <param name="firstName">Имя (required).</param>
        /// <param name="secondName">Отчество.</param>
        /// <param name="contact">contact (required).</param>
        public ContactPerson(string lastName = default, string firstName = default, string secondName = default, ContactData contact = default)
        {
            // to ensure "lastName" is required (not null)
            if (lastName == null) throw new ArgumentNullException("lastName is a required property for ContactPerson and cannot be null");
            LastName = lastName;
            // to ensure "firstName" is required (not null)
            if (firstName == null) throw new ArgumentNullException("firstName is a required property for ContactPerson and cannot be null");
            FirstName = firstName;
            // to ensure "contact" is required (not null)
            if (contact == null) throw new ArgumentNullException("contact is a required property for ContactPerson and cannot be null");
            Contact = contact;
            SecondName = secondName;
        }

        /// <summary>
        ///     Фамилия
        /// </summary>
        /// <value>Фамилия</value>
        [DataMember(Name = "lastName", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        ///     Имя
        /// </summary>
        /// <value>Имя</value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        ///     Отчество
        /// </summary>
        /// <value>Отчество</value>
        [DataMember(Name = "secondName", EmitDefaultValue = false)]
        public string SecondName { get; set; }

        /// <summary>
        ///     Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "contact", IsRequired = true, EmitDefaultValue = true)]
        public ContactData Contact { get; set; }

        /// <summary>
        ///     Returns true if ContactPerson instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactPerson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactPerson input)
        {
            if (input == null) return false;
            return
                (
                    LastName == input.LastName ||
                    (LastName != null &&
                     LastName.Equals(input.LastName))
                ) &&
                (
                    FirstName == input.FirstName ||
                    (FirstName != null &&
                     FirstName.Equals(input.FirstName))
                ) &&
                (
                    SecondName == input.SecondName ||
                    (SecondName != null &&
                     SecondName.Equals(input.SecondName))
                ) &&
                (
                    Contact == input.Contact ||
                    (Contact != null &&
                     Contact.Equals(input.Contact))
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // LastName (string) maxLength
            if (LastName != null && LastName.Length > 255) yield return new ValidationResult("Invalid value for LastName, length must be less than 255.", new[] { "LastName" });

            // LastName (string) minLength
            if (LastName != null && LastName.Length < 1) yield return new ValidationResult("Invalid value for LastName, length must be greater than 1.", new[] { "LastName" });

            // FirstName (string) maxLength
            if (FirstName != null && FirstName.Length > 255) yield return new ValidationResult("Invalid value for FirstName, length must be less than 255.", new[] { "FirstName" });

            // FirstName (string) minLength
            if (FirstName != null && FirstName.Length < 1) yield return new ValidationResult("Invalid value for FirstName, length must be greater than 1.", new[] { "FirstName" });

            // SecondName (string) maxLength
            if (SecondName != null && SecondName.Length > 255)
                yield return new ValidationResult("Invalid value for SecondName, length must be less than 255.", new[] { "SecondName" });

            // SecondName (string) minLength
            if (SecondName != null && SecondName.Length < 1)
                yield return new ValidationResult("Invalid value for SecondName, length must be greater than 1.", new[] { "SecondName" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactPerson {\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  SecondName: ").Append(SecondName).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ContactPerson);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LastName != null) hashCode = hashCode * 59 + LastName.GetHashCode();
                if (FirstName != null) hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (SecondName != null) hashCode = hashCode * 59 + SecondName.GetHashCode();
                if (Contact != null) hashCode = hashCode * 59 + Contact.GetHashCode();
                return hashCode;
            }
        }
    }
}