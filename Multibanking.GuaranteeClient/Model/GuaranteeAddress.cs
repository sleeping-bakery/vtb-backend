/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    ///     Адрес + тип
    /// </summary>
    [DataContract(Name = "GuaranteeAddress")]
    public class GuaranteeAddress : IEquatable<GuaranteeAddress>, IValidatableObject
    {
        /// <summary>
        ///     Тип адреса (Юридический/Фактический)
        /// </summary>
        /// <value>Тип адреса (Юридический/Фактический)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeEnum
        {
            /// <summary>
            ///     Enum LEGAL for value: LEGAL
            /// </summary>
            [EnumMember(Value = "LEGAL")] LEGAL = 1,

            /// <summary>
            ///     Enum ACTUAL for value: ACTUAL
            /// </summary>
            [EnumMember(Value = "ACTUAL")] ACTUAL = 2
        }

        /// <summary>
        ///     Страна (значение из двух букв по справочнику ISO)
        /// </summary>
        /// <value>Страна (значение из двух букв по справочнику ISO)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CountryEnum
        {
            /// <summary>
            ///     Enum AF for value: AF
            /// </summary>
            [EnumMember(Value = "AF")] AF = 1,

            /// <summary>
            ///     Enum AL for value: AL
            /// </summary>
            [EnumMember(Value = "AL")] AL = 2,

            /// <summary>
            ///     Enum AQ for value: AQ
            /// </summary>
            [EnumMember(Value = "AQ")] AQ = 3,

            /// <summary>
            ///     Enum DZ for value: DZ
            /// </summary>
            [EnumMember(Value = "DZ")] DZ = 4,

            /// <summary>
            ///     Enum AS for value: AS
            /// </summary>
            [EnumMember(Value = "AS")] AS = 5,

            /// <summary>
            ///     Enum AD for value: AD
            /// </summary>
            [EnumMember(Value = "AD")] AD = 6,

            /// <summary>
            ///     Enum AO for value: AO
            /// </summary>
            [EnumMember(Value = "AO")] AO = 7,

            /// <summary>
            ///     Enum AG for value: AG
            /// </summary>
            [EnumMember(Value = "AG")] AG = 8,

            /// <summary>
            ///     Enum AZ for value: AZ
            /// </summary>
            [EnumMember(Value = "AZ")] AZ = 9,

            /// <summary>
            ///     Enum AR for value: AR
            /// </summary>
            [EnumMember(Value = "AR")] AR = 10,

            /// <summary>
            ///     Enum AU for value: AU
            /// </summary>
            [EnumMember(Value = "AU")] AU = 11,

            /// <summary>
            ///     Enum AT for value: AT
            /// </summary>
            [EnumMember(Value = "AT")] AT = 12,

            /// <summary>
            ///     Enum AB for value: AB
            /// </summary>
            [EnumMember(Value = "AB")] AB = 13,

            /// <summary>
            ///     Enum BS for value: BS
            /// </summary>
            [EnumMember(Value = "BS")] BS = 14,

            /// <summary>
            ///     Enum BH for value: BH
            /// </summary>
            [EnumMember(Value = "BH")] BH = 15,

            /// <summary>
            ///     Enum BD for value: BD
            /// </summary>
            [EnumMember(Value = "BD")] BD = 16,

            /// <summary>
            ///     Enum AM for value: AM
            /// </summary>
            [EnumMember(Value = "AM")] AM = 17,

            /// <summary>
            ///     Enum BB for value: BB
            /// </summary>
            [EnumMember(Value = "BB")] BB = 18,

            /// <summary>
            ///     Enum BE for value: BE
            /// </summary>
            [EnumMember(Value = "BE")] BE = 19,

            /// <summary>
            ///     Enum BM for value: BM
            /// </summary>
            [EnumMember(Value = "BM")] BM = 20,

            /// <summary>
            ///     Enum BT for value: BT
            /// </summary>
            [EnumMember(Value = "BT")] BT = 21,

            /// <summary>
            ///     Enum BO for value: BO
            /// </summary>
            [EnumMember(Value = "BO")] BO = 22,

            /// <summary>
            ///     Enum BA for value: BA
            /// </summary>
            [EnumMember(Value = "BA")] BA = 23,

            /// <summary>
            ///     Enum BW for value: BW
            /// </summary>
            [EnumMember(Value = "BW")] BW = 24,

            /// <summary>
            ///     Enum BV for value: BV
            /// </summary>
            [EnumMember(Value = "BV")] BV = 25,

            /// <summary>
            ///     Enum BR for value: BR
            /// </summary>
            [EnumMember(Value = "BR")] BR = 26,

            /// <summary>
            ///     Enum BZ for value: BZ
            /// </summary>
            [EnumMember(Value = "BZ")] BZ = 27,

            /// <summary>
            ///     Enum IO for value: IO
            /// </summary>
            [EnumMember(Value = "IO")] IO = 28,

            /// <summary>
            ///     Enum SB for value: SB
            /// </summary>
            [EnumMember(Value = "SB")] SB = 29,

            /// <summary>
            ///     Enum VG for value: VG
            /// </summary>
            [EnumMember(Value = "VG")] VG = 30,

            /// <summary>
            ///     Enum BN for value: BN
            /// </summary>
            [EnumMember(Value = "BN")] BN = 31,

            /// <summary>
            ///     Enum BG for value: BG
            /// </summary>
            [EnumMember(Value = "BG")] BG = 32,

            /// <summary>
            ///     Enum MM for value: MM
            /// </summary>
            [EnumMember(Value = "MM")] MM = 33,

            /// <summary>
            ///     Enum BI for value: BI
            /// </summary>
            [EnumMember(Value = "BI")] BI = 34,

            /// <summary>
            ///     Enum BY for value: BY
            /// </summary>
            [EnumMember(Value = "BY")] BY = 35,

            /// <summary>
            ///     Enum KH for value: KH
            /// </summary>
            [EnumMember(Value = "KH")] KH = 36,

            /// <summary>
            ///     Enum CM for value: CM
            /// </summary>
            [EnumMember(Value = "CM")] CM = 37,

            /// <summary>
            ///     Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")] CA = 38,

            /// <summary>
            ///     Enum CV for value: CV
            /// </summary>
            [EnumMember(Value = "CV")] CV = 39,

            /// <summary>
            ///     Enum KY for value: KY
            /// </summary>
            [EnumMember(Value = "KY")] KY = 40,

            /// <summary>
            ///     Enum CF for value: CF
            /// </summary>
            [EnumMember(Value = "CF")] CF = 41,

            /// <summary>
            ///     Enum LK for value: LK
            /// </summary>
            [EnumMember(Value = "LK")] LK = 42,

            /// <summary>
            ///     Enum TD for value: TD
            /// </summary>
            [EnumMember(Value = "TD")] TD = 43,

            /// <summary>
            ///     Enum CL for value: CL
            /// </summary>
            [EnumMember(Value = "CL")] CL = 44,

            /// <summary>
            ///     Enum CN for value: CN
            /// </summary>
            [EnumMember(Value = "CN")] CN = 45,

            /// <summary>
            ///     Enum TW for value: TW
            /// </summary>
            [EnumMember(Value = "TW")] TW = 46,

            /// <summary>
            ///     Enum CX for value: CX
            /// </summary>
            [EnumMember(Value = "CX")] CX = 47,

            /// <summary>
            ///     Enum CC for value: CC
            /// </summary>
            [EnumMember(Value = "CC")] CC = 48,

            /// <summary>
            ///     Enum CO for value: CO
            /// </summary>
            [EnumMember(Value = "CO")] CO = 49,

            /// <summary>
            ///     Enum KM for value: KM
            /// </summary>
            [EnumMember(Value = "KM")] KM = 50,

            /// <summary>
            ///     Enum YT for value: YT
            /// </summary>
            [EnumMember(Value = "YT")] YT = 51,

            /// <summary>
            ///     Enum CG for value: CG
            /// </summary>
            [EnumMember(Value = "CG")] CG = 52,

            /// <summary>
            ///     Enum CD for value: CD
            /// </summary>
            [EnumMember(Value = "CD")] CD = 53,

            /// <summary>
            ///     Enum CK for value: CK
            /// </summary>
            [EnumMember(Value = "CK")] CK = 54,

            /// <summary>
            ///     Enum CR for value: CR
            /// </summary>
            [EnumMember(Value = "CR")] CR = 55,

            /// <summary>
            ///     Enum HR for value: HR
            /// </summary>
            [EnumMember(Value = "HR")] HR = 56,

            /// <summary>
            ///     Enum CU for value: CU
            /// </summary>
            [EnumMember(Value = "CU")] CU = 57,

            /// <summary>
            ///     Enum CY for value: CY
            /// </summary>
            [EnumMember(Value = "CY")] CY = 58,

            /// <summary>
            ///     Enum CZ for value: CZ
            /// </summary>
            [EnumMember(Value = "CZ")] CZ = 59,

            /// <summary>
            ///     Enum BJ for value: BJ
            /// </summary>
            [EnumMember(Value = "BJ")] BJ = 60,

            /// <summary>
            ///     Enum DK for value: DK
            /// </summary>
            [EnumMember(Value = "DK")] DK = 61,

            /// <summary>
            ///     Enum DM for value: DM
            /// </summary>
            [EnumMember(Value = "DM")] DM = 62,

            /// <summary>
            ///     Enum DO for value: DO
            /// </summary>
            [EnumMember(Value = "DO")] DO = 63,

            /// <summary>
            ///     Enum EC for value: EC
            /// </summary>
            [EnumMember(Value = "EC")] EC = 64,

            /// <summary>
            ///     Enum SV for value: SV
            /// </summary>
            [EnumMember(Value = "SV")] SV = 65,

            /// <summary>
            ///     Enum GQ for value: GQ
            /// </summary>
            [EnumMember(Value = "GQ")] GQ = 66,

            /// <summary>
            ///     Enum ET for value: ET
            /// </summary>
            [EnumMember(Value = "ET")] ET = 67,

            /// <summary>
            ///     Enum ER for value: ER
            /// </summary>
            [EnumMember(Value = "ER")] ER = 68,

            /// <summary>
            ///     Enum EE for value: EE
            /// </summary>
            [EnumMember(Value = "EE")] EE = 69,

            /// <summary>
            ///     Enum FO for value: FO
            /// </summary>
            [EnumMember(Value = "FO")] FO = 70,

            /// <summary>
            ///     Enum FK for value: FK
            /// </summary>
            [EnumMember(Value = "FK")] FK = 71,

            /// <summary>
            ///     Enum GS for value: GS
            /// </summary>
            [EnumMember(Value = "GS")] GS = 72,

            /// <summary>
            ///     Enum FJ for value: FJ
            /// </summary>
            [EnumMember(Value = "FJ")] FJ = 73,

            /// <summary>
            ///     Enum FI for value: FI
            /// </summary>
            [EnumMember(Value = "FI")] FI = 74,

            /// <summary>
            ///     Enum AX for value: AX
            /// </summary>
            [EnumMember(Value = "AX")] AX = 75,

            /// <summary>
            ///     Enum FR for value: FR
            /// </summary>
            [EnumMember(Value = "FR")] FR = 76,

            /// <summary>
            ///     Enum GF for value: GF
            /// </summary>
            [EnumMember(Value = "GF")] GF = 77,

            /// <summary>
            ///     Enum PF for value: PF
            /// </summary>
            [EnumMember(Value = "PF")] PF = 78,

            /// <summary>
            ///     Enum TF for value: TF
            /// </summary>
            [EnumMember(Value = "TF")] TF = 79,

            /// <summary>
            ///     Enum DJ for value: DJ
            /// </summary>
            [EnumMember(Value = "DJ")] DJ = 80,

            /// <summary>
            ///     Enum GA for value: GA
            /// </summary>
            [EnumMember(Value = "GA")] GA = 81,

            /// <summary>
            ///     Enum GE for value: GE
            /// </summary>
            [EnumMember(Value = "GE")] GE = 82,

            /// <summary>
            ///     Enum GM for value: GM
            /// </summary>
            [EnumMember(Value = "GM")] GM = 83,

            /// <summary>
            ///     Enum PS for value: PS
            /// </summary>
            [EnumMember(Value = "PS")] PS = 84,

            /// <summary>
            ///     Enum DE for value: DE
            /// </summary>
            [EnumMember(Value = "DE")] DE = 85,

            /// <summary>
            ///     Enum GH for value: GH
            /// </summary>
            [EnumMember(Value = "GH")] GH = 86,

            /// <summary>
            ///     Enum GI for value: GI
            /// </summary>
            [EnumMember(Value = "GI")] GI = 87,

            /// <summary>
            ///     Enum KI for value: KI
            /// </summary>
            [EnumMember(Value = "KI")] KI = 88,

            /// <summary>
            ///     Enum GR for value: GR
            /// </summary>
            [EnumMember(Value = "GR")] GR = 89,

            /// <summary>
            ///     Enum GL for value: GL
            /// </summary>
            [EnumMember(Value = "GL")] GL = 90,

            /// <summary>
            ///     Enum GD for value: GD
            /// </summary>
            [EnumMember(Value = "GD")] GD = 91,

            /// <summary>
            ///     Enum GP for value: GP
            /// </summary>
            [EnumMember(Value = "GP")] GP = 92,

            /// <summary>
            ///     Enum GU for value: GU
            /// </summary>
            [EnumMember(Value = "GU")] GU = 93,

            /// <summary>
            ///     Enum GT for value: GT
            /// </summary>
            [EnumMember(Value = "GT")] GT = 94,

            /// <summary>
            ///     Enum GN for value: GN
            /// </summary>
            [EnumMember(Value = "GN")] GN = 95,

            /// <summary>
            ///     Enum GY for value: GY
            /// </summary>
            [EnumMember(Value = "GY")] GY = 96,

            /// <summary>
            ///     Enum HT for value: HT
            /// </summary>
            [EnumMember(Value = "HT")] HT = 97,

            /// <summary>
            ///     Enum HM for value: HM
            /// </summary>
            [EnumMember(Value = "HM")] HM = 98,

            /// <summary>
            ///     Enum VA for value: VA
            /// </summary>
            [EnumMember(Value = "VA")] VA = 99,

            /// <summary>
            ///     Enum HN for value: HN
            /// </summary>
            [EnumMember(Value = "HN")] HN = 100,

            /// <summary>
            ///     Enum HK for value: HK
            /// </summary>
            [EnumMember(Value = "HK")] HK = 101,

            /// <summary>
            ///     Enum HU for value: HU
            /// </summary>
            [EnumMember(Value = "HU")] HU = 102,

            /// <summary>
            ///     Enum IS for value: IS
            /// </summary>
            [EnumMember(Value = "IS")] IS = 103,

            /// <summary>
            ///     Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")] IN = 104,

            /// <summary>
            ///     Enum ID for value: ID
            /// </summary>
            [EnumMember(Value = "ID")] ID = 105,

            /// <summary>
            ///     Enum IR for value: IR
            /// </summary>
            [EnumMember(Value = "IR")] IR = 106,

            /// <summary>
            ///     Enum IQ for value: IQ
            /// </summary>
            [EnumMember(Value = "IQ")] IQ = 107,

            /// <summary>
            ///     Enum IE for value: IE
            /// </summary>
            [EnumMember(Value = "IE")] IE = 108,

            /// <summary>
            ///     Enum IL for value: IL
            /// </summary>
            [EnumMember(Value = "IL")] IL = 109,

            /// <summary>
            ///     Enum IT for value: IT
            /// </summary>
            [EnumMember(Value = "IT")] IT = 110,

            /// <summary>
            ///     Enum CI for value: CI
            /// </summary>
            [EnumMember(Value = "CI")] CI = 111,

            /// <summary>
            ///     Enum JM for value: JM
            /// </summary>
            [EnumMember(Value = "JM")] JM = 112,

            /// <summary>
            ///     Enum JP for value: JP
            /// </summary>
            [EnumMember(Value = "JP")] JP = 113,

            /// <summary>
            ///     Enum KZ for value: KZ
            /// </summary>
            [EnumMember(Value = "KZ")] KZ = 114,

            /// <summary>
            ///     Enum JO for value: JO
            /// </summary>
            [EnumMember(Value = "JO")] JO = 115,

            /// <summary>
            ///     Enum KE for value: KE
            /// </summary>
            [EnumMember(Value = "KE")] KE = 116,

            /// <summary>
            ///     Enum KP for value: KP
            /// </summary>
            [EnumMember(Value = "KP")] KP = 117,

            /// <summary>
            ///     Enum KR for value: KR
            /// </summary>
            [EnumMember(Value = "KR")] KR = 118,

            /// <summary>
            ///     Enum KW for value: KW
            /// </summary>
            [EnumMember(Value = "KW")] KW = 119,

            /// <summary>
            ///     Enum KG for value: KG
            /// </summary>
            [EnumMember(Value = "KG")] KG = 120,

            /// <summary>
            ///     Enum LA for value: LA
            /// </summary>
            [EnumMember(Value = "LA")] LA = 121,

            /// <summary>
            ///     Enum LB for value: LB
            /// </summary>
            [EnumMember(Value = "LB")] LB = 122,

            /// <summary>
            ///     Enum LS for value: LS
            /// </summary>
            [EnumMember(Value = "LS")] LS = 123,

            /// <summary>
            ///     Enum LV for value: LV
            /// </summary>
            [EnumMember(Value = "LV")] LV = 124,

            /// <summary>
            ///     Enum LR for value: LR
            /// </summary>
            [EnumMember(Value = "LR")] LR = 125,

            /// <summary>
            ///     Enum LY for value: LY
            /// </summary>
            [EnumMember(Value = "LY")] LY = 126,

            /// <summary>
            ///     Enum LI for value: LI
            /// </summary>
            [EnumMember(Value = "LI")] LI = 127,

            /// <summary>
            ///     Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")] LT = 128,

            /// <summary>
            ///     Enum LU for value: LU
            /// </summary>
            [EnumMember(Value = "LU")] LU = 129,

            /// <summary>
            ///     Enum MO for value: MO
            /// </summary>
            [EnumMember(Value = "MO")] MO = 130,

            /// <summary>
            ///     Enum MG for value: MG
            /// </summary>
            [EnumMember(Value = "MG")] MG = 131,

            /// <summary>
            ///     Enum MW for value: MW
            /// </summary>
            [EnumMember(Value = "MW")] MW = 132,

            /// <summary>
            ///     Enum MY for value: MY
            /// </summary>
            [EnumMember(Value = "MY")] MY = 133,

            /// <summary>
            ///     Enum MV for value: MV
            /// </summary>
            [EnumMember(Value = "MV")] MV = 134,

            /// <summary>
            ///     Enum ML for value: ML
            /// </summary>
            [EnumMember(Value = "ML")] ML = 135,

            /// <summary>
            ///     Enum MT for value: MT
            /// </summary>
            [EnumMember(Value = "MT")] MT = 136,

            /// <summary>
            ///     Enum MQ for value: MQ
            /// </summary>
            [EnumMember(Value = "MQ")] MQ = 137,

            /// <summary>
            ///     Enum MR for value: MR
            /// </summary>
            [EnumMember(Value = "MR")] MR = 138,

            /// <summary>
            ///     Enum MU for value: MU
            /// </summary>
            [EnumMember(Value = "MU")] MU = 139,

            /// <summary>
            ///     Enum MX for value: MX
            /// </summary>
            [EnumMember(Value = "MX")] MX = 140,

            /// <summary>
            ///     Enum MC for value: MC
            /// </summary>
            [EnumMember(Value = "MC")] MC = 141,

            /// <summary>
            ///     Enum MN for value: MN
            /// </summary>
            [EnumMember(Value = "MN")] MN = 142,

            /// <summary>
            ///     Enum MD for value: MD
            /// </summary>
            [EnumMember(Value = "MD")] MD = 143,

            /// <summary>
            ///     Enum ME for value: ME
            /// </summary>
            [EnumMember(Value = "ME")] ME = 144,

            /// <summary>
            ///     Enum MS for value: MS
            /// </summary>
            [EnumMember(Value = "MS")] MS = 145,

            /// <summary>
            ///     Enum MA for value: MA
            /// </summary>
            [EnumMember(Value = "MA")] MA = 146,

            /// <summary>
            ///     Enum MZ for value: MZ
            /// </summary>
            [EnumMember(Value = "MZ")] MZ = 147,

            /// <summary>
            ///     Enum OM for value: OM
            /// </summary>
            [EnumMember(Value = "OM")] OM = 148,

            /// <summary>
            ///     Enum OS for value: OS
            /// </summary>
            [EnumMember(Value = "OS")] OS = 149,

            /// <summary>
            ///     Enum NA for value: NA
            /// </summary>
            [EnumMember(Value = "NA")] NA = 150,

            /// <summary>
            ///     Enum NR for value: NR
            /// </summary>
            [EnumMember(Value = "NR")] NR = 151,

            /// <summary>
            ///     Enum NP for value: NP
            /// </summary>
            [EnumMember(Value = "NP")] NP = 152,

            /// <summary>
            ///     Enum NL for value: NL
            /// </summary>
            [EnumMember(Value = "NL")] NL = 153,

            /// <summary>
            ///     Enum CW for value: CW
            /// </summary>
            [EnumMember(Value = "CW")] CW = 154,

            /// <summary>
            ///     Enum AW for value: AW
            /// </summary>
            [EnumMember(Value = "AW")] AW = 155,

            /// <summary>
            ///     Enum SX for value: SX
            /// </summary>
            [EnumMember(Value = "SX")] SX = 156,

            /// <summary>
            ///     Enum BQ for value: BQ
            /// </summary>
            [EnumMember(Value = "BQ")] BQ = 157,

            /// <summary>
            ///     Enum NC for value: NC
            /// </summary>
            [EnumMember(Value = "NC")] NC = 158,

            /// <summary>
            ///     Enum VU for value: VU
            /// </summary>
            [EnumMember(Value = "VU")] VU = 159,

            /// <summary>
            ///     Enum NZ for value: NZ
            /// </summary>
            [EnumMember(Value = "NZ")] NZ = 160,

            /// <summary>
            ///     Enum NI for value: NI
            /// </summary>
            [EnumMember(Value = "NI")] NI = 161,

            /// <summary>
            ///     Enum NE for value: NE
            /// </summary>
            [EnumMember(Value = "NE")] NE = 162,

            /// <summary>
            ///     Enum NG for value: NG
            /// </summary>
            [EnumMember(Value = "NG")] NG = 163,

            /// <summary>
            ///     Enum NU for value: NU
            /// </summary>
            [EnumMember(Value = "NU")] NU = 164,

            /// <summary>
            ///     Enum NF for value: NF
            /// </summary>
            [EnumMember(Value = "NF")] NF = 165,

            /// <summary>
            ///     Enum NO for value: NO
            /// </summary>
            [EnumMember(Value = "NO")] NO = 166,

            /// <summary>
            ///     Enum MP for value: MP
            /// </summary>
            [EnumMember(Value = "MP")] MP = 167,

            /// <summary>
            ///     Enum UM for value: UM
            /// </summary>
            [EnumMember(Value = "UM")] UM = 168,

            /// <summary>
            ///     Enum FM for value: FM
            /// </summary>
            [EnumMember(Value = "FM")] FM = 169,

            /// <summary>
            ///     Enum MH for value: MH
            /// </summary>
            [EnumMember(Value = "MH")] MH = 170,

            /// <summary>
            ///     Enum PW for value: PW
            /// </summary>
            [EnumMember(Value = "PW")] PW = 171,

            /// <summary>
            ///     Enum PK for value: PK
            /// </summary>
            [EnumMember(Value = "PK")] PK = 172,

            /// <summary>
            ///     Enum PA for value: PA
            /// </summary>
            [EnumMember(Value = "PA")] PA = 173,

            /// <summary>
            ///     Enum PG for value: PG
            /// </summary>
            [EnumMember(Value = "PG")] PG = 174,

            /// <summary>
            ///     Enum PY for value: PY
            /// </summary>
            [EnumMember(Value = "PY")] PY = 175,

            /// <summary>
            ///     Enum PE for value: PE
            /// </summary>
            [EnumMember(Value = "PE")] PE = 176,

            /// <summary>
            ///     Enum PH for value: PH
            /// </summary>
            [EnumMember(Value = "PH")] PH = 177,

            /// <summary>
            ///     Enum PN for value: PN
            /// </summary>
            [EnumMember(Value = "PN")] PN = 178,

            /// <summary>
            ///     Enum PL for value: PL
            /// </summary>
            [EnumMember(Value = "PL")] PL = 179,

            /// <summary>
            ///     Enum PT for value: PT
            /// </summary>
            [EnumMember(Value = "PT")] PT = 180,

            /// <summary>
            ///     Enum GW for value: GW
            /// </summary>
            [EnumMember(Value = "GW")] GW = 181,

            /// <summary>
            ///     Enum TL for value: TL
            /// </summary>
            [EnumMember(Value = "TL")] TL = 182,

            /// <summary>
            ///     Enum PR for value: PR
            /// </summary>
            [EnumMember(Value = "PR")] PR = 183,

            /// <summary>
            ///     Enum QA for value: QA
            /// </summary>
            [EnumMember(Value = "QA")] QA = 184,

            /// <summary>
            ///     Enum RE for value: RE
            /// </summary>
            [EnumMember(Value = "RE")] RE = 185,

            /// <summary>
            ///     Enum RO for value: RO
            /// </summary>
            [EnumMember(Value = "RO")] RO = 186,

            /// <summary>
            ///     Enum RU for value: RU
            /// </summary>
            [EnumMember(Value = "RU")] RU = 187,

            /// <summary>
            ///     Enum RW for value: RW
            /// </summary>
            [EnumMember(Value = "RW")] RW = 188,

            /// <summary>
            ///     Enum BL for value: BL
            /// </summary>
            [EnumMember(Value = "BL")] BL = 189,

            /// <summary>
            ///     Enum SH for value: SH
            /// </summary>
            [EnumMember(Value = "SH")] SH = 190,

            /// <summary>
            ///     Enum KN for value: KN
            /// </summary>
            [EnumMember(Value = "KN")] KN = 191,

            /// <summary>
            ///     Enum AI for value: AI
            /// </summary>
            [EnumMember(Value = "AI")] AI = 192,

            /// <summary>
            ///     Enum LC for value: LC
            /// </summary>
            [EnumMember(Value = "LC")] LC = 193,

            /// <summary>
            ///     Enum MF for value: MF
            /// </summary>
            [EnumMember(Value = "MF")] MF = 194,

            /// <summary>
            ///     Enum PM for value: PM
            /// </summary>
            [EnumMember(Value = "PM")] PM = 195,

            /// <summary>
            ///     Enum VC for value: VC
            /// </summary>
            [EnumMember(Value = "VC")] VC = 196,

            /// <summary>
            ///     Enum SM for value: SM
            /// </summary>
            [EnumMember(Value = "SM")] SM = 197,

            /// <summary>
            ///     Enum ST for value: ST
            /// </summary>
            [EnumMember(Value = "ST")] ST = 198,

            /// <summary>
            ///     Enum SA for value: SA
            /// </summary>
            [EnumMember(Value = "SA")] SA = 199,

            /// <summary>
            ///     Enum SN for value: SN
            /// </summary>
            [EnumMember(Value = "SN")] SN = 200,

            /// <summary>
            ///     Enum RS for value: RS
            /// </summary>
            [EnumMember(Value = "RS")] RS = 201,

            /// <summary>
            ///     Enum SC for value: SC
            /// </summary>
            [EnumMember(Value = "SC")] SC = 202,

            /// <summary>
            ///     Enum SL for value: SL
            /// </summary>
            [EnumMember(Value = "SL")] SL = 203,

            /// <summary>
            ///     Enum SG for value: SG
            /// </summary>
            [EnumMember(Value = "SG")] SG = 204,

            /// <summary>
            ///     Enum SK for value: SK
            /// </summary>
            [EnumMember(Value = "SK")] SK = 205,

            /// <summary>
            ///     Enum VN for value: VN
            /// </summary>
            [EnumMember(Value = "VN")] VN = 206,

            /// <summary>
            ///     Enum SI for value: SI
            /// </summary>
            [EnumMember(Value = "SI")] SI = 207,

            /// <summary>
            ///     Enum SO for value: SO
            /// </summary>
            [EnumMember(Value = "SO")] SO = 208,

            /// <summary>
            ///     Enum ZA for value: ZA
            /// </summary>
            [EnumMember(Value = "ZA")] ZA = 209,

            /// <summary>
            ///     Enum ZW for value: ZW
            /// </summary>
            [EnumMember(Value = "ZW")] ZW = 210,

            /// <summary>
            ///     Enum ES for value: ES
            /// </summary>
            [EnumMember(Value = "ES")] ES = 211,

            /// <summary>
            ///     Enum SS for value: SS
            /// </summary>
            [EnumMember(Value = "SS")] SS = 212,

            /// <summary>
            ///     Enum SD for value: SD
            /// </summary>
            [EnumMember(Value = "SD")] SD = 213,

            /// <summary>
            ///     Enum EH for value: EH
            /// </summary>
            [EnumMember(Value = "EH")] EH = 214,

            /// <summary>
            ///     Enum SR for value: SR
            /// </summary>
            [EnumMember(Value = "SR")] SR = 215,

            /// <summary>
            ///     Enum SJ for value: SJ
            /// </summary>
            [EnumMember(Value = "SJ")] SJ = 216,

            /// <summary>
            ///     Enum SZ for value: SZ
            /// </summary>
            [EnumMember(Value = "SZ")] SZ = 217,

            /// <summary>
            ///     Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")] SE = 218,

            /// <summary>
            ///     Enum CH for value: CH
            /// </summary>
            [EnumMember(Value = "CH")] CH = 219,

            /// <summary>
            ///     Enum SY for value: SY
            /// </summary>
            [EnumMember(Value = "SY")] SY = 220,

            /// <summary>
            ///     Enum TJ for value: TJ
            /// </summary>
            [EnumMember(Value = "TJ")] TJ = 221,

            /// <summary>
            ///     Enum TH for value: TH
            /// </summary>
            [EnumMember(Value = "TH")] TH = 222,

            /// <summary>
            ///     Enum TG for value: TG
            /// </summary>
            [EnumMember(Value = "TG")] TG = 223,

            /// <summary>
            ///     Enum TK for value: TK
            /// </summary>
            [EnumMember(Value = "TK")] TK = 224,

            /// <summary>
            ///     Enum TO for value: TO
            /// </summary>
            [EnumMember(Value = "TO")] TO = 225,

            /// <summary>
            ///     Enum TT for value: TT
            /// </summary>
            [EnumMember(Value = "TT")] TT = 226,

            /// <summary>
            ///     Enum AE for value: AE
            /// </summary>
            [EnumMember(Value = "AE")] AE = 227,

            /// <summary>
            ///     Enum TN for value: TN
            /// </summary>
            [EnumMember(Value = "TN")] TN = 228,

            /// <summary>
            ///     Enum TR for value: TR
            /// </summary>
            [EnumMember(Value = "TR")] TR = 229,

            /// <summary>
            ///     Enum TM for value: TM
            /// </summary>
            [EnumMember(Value = "TM")] TM = 230,

            /// <summary>
            ///     Enum TC for value: TC
            /// </summary>
            [EnumMember(Value = "TC")] TC = 231,

            /// <summary>
            ///     Enum TV for value: TV
            /// </summary>
            [EnumMember(Value = "TV")] TV = 232,

            /// <summary>
            ///     Enum UG for value: UG
            /// </summary>
            [EnumMember(Value = "UG")] UG = 233,

            /// <summary>
            ///     Enum UA for value: UA
            /// </summary>
            [EnumMember(Value = "UA")] UA = 234,

            /// <summary>
            ///     Enum MK for value: MK
            /// </summary>
            [EnumMember(Value = "MK")] MK = 235,

            /// <summary>
            ///     Enum EG for value: EG
            /// </summary>
            [EnumMember(Value = "EG")] EG = 236,

            /// <summary>
            ///     Enum GB for value: GB
            /// </summary>
            [EnumMember(Value = "GB")] GB = 237,

            /// <summary>
            ///     Enum GG for value: GG
            /// </summary>
            [EnumMember(Value = "GG")] GG = 238,

            /// <summary>
            ///     Enum JE for value: JE
            /// </summary>
            [EnumMember(Value = "JE")] JE = 239,

            /// <summary>
            ///     Enum IM for value: IM
            /// </summary>
            [EnumMember(Value = "IM")] IM = 240,

            /// <summary>
            ///     Enum TZ for value: TZ
            /// </summary>
            [EnumMember(Value = "TZ")] TZ = 241,

            /// <summary>
            ///     Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")] US = 242,

            /// <summary>
            ///     Enum VI for value: VI
            /// </summary>
            [EnumMember(Value = "VI")] VI = 243,

            /// <summary>
            ///     Enum BF for value: BF
            /// </summary>
            [EnumMember(Value = "BF")] BF = 244,

            /// <summary>
            ///     Enum UY for value: UY
            /// </summary>
            [EnumMember(Value = "UY")] UY = 245,

            /// <summary>
            ///     Enum UZ for value: UZ
            /// </summary>
            [EnumMember(Value = "UZ")] UZ = 246,

            /// <summary>
            ///     Enum VE for value: VE
            /// </summary>
            [EnumMember(Value = "VE")] VE = 247,

            /// <summary>
            ///     Enum WF for value: WF
            /// </summary>
            [EnumMember(Value = "WF")] WF = 248,

            /// <summary>
            ///     Enum WS for value: WS
            /// </summary>
            [EnumMember(Value = "WS")] WS = 249,

            /// <summary>
            ///     Enum YE for value: YE
            /// </summary>
            [EnumMember(Value = "YE")] YE = 250,

            /// <summary>
            ///     Enum ZM for value: ZM
            /// </summary>
            [EnumMember(Value = "ZM")] ZM = 251
        }

        /// <summary>
        ///     \&quot;1 - Республика Адыгея (Адыгея)\&quot;, \&quot;2 - Республика Башкортостан\&quot;,\&quot;3 - Республика Бурятия\&quot;, \&quot;4 - Республика Алтай\&quot;, \&quot;5 -
        ///     Республика Дагестан\&quot;,\&quot;6 - Республика Ингушетия\&quot;, \&quot;7 - Кабардино-Балкарская Республика\&quot;, \&quot;8 - Республика Калмыкия\&quot;,\&quot;9 -
        ///     Карачаево-Черкесская Республика\&quot;, \&quot;10 - Республика Карелия\&quot;, \&quot;11 - Республика Коми\&quot;,\&quot;12 - Республика Марий Эл\&quot;, \&quot;13 -
        ///     Республика Мордовия\&quot;, \&quot;14 - Республика Саха (Якутия)\&quot;,\&quot;15 - Республика Северная Осетия - Алания\&quot;, \&quot;16 - Республика Татарстан (Татарстан)\
        ///     &quot;,\&quot;17 - Республика Тыва\&quot;, \&quot;18 - Удмуртская Республика\&quot;, \&quot;19 - Республика Хакасия\&quot;,\&quot;20 - Чеченская Республика\&quot;, \&quot;21 -
        ///     Чувашская Республика - Чувашия\&quot;, \&quot;22 - Алтайский край\&quot;,\&quot;23 - Краснодарский край\&quot;, \&quot;24 - Красноярский край\&quot;, \&quot;25 - Приморский
        ///     край\&quot;,\&quot;26 - Ставропольский край\&quot;, \&quot;27 - Хабаровский край\&quot;, \&quot;28 - Амурская область\&quot;,\&quot;29 - Архангельская область\&quot;, \&quot;
        ///     30 - Астраханская область\&quot;, \&quot;31 - Белгородская область\&quot;,\&quot;32 - Брянская область\&quot;, \&quot;33 - Владимирская область\&quot;, \&quot;34 -
        ///     Волгоградская область\&quot;,\&quot;35 - Вологодская область\&quot;, \&quot;36 - Воронежская область\&quot;, \&quot;37 - Ивановская область\&quot;,\&quot;38 - Иркутская
        ///     область\&quot;, \&quot;39 - Калининградская область\&quot;, \&quot;40 - Калужская область\&quot;,\&quot;41 - Камчатский край\&quot;, \&quot;42 - Кемеровская область - Кузбасс\
        ///     &quot;, \&quot;43 - Кировская область\&quot;,\&quot;44 - Костромская область\&quot;, \&quot;45 - Курганская область\&quot;, \&quot;46 - Курская область\&quot;,\&quot;47 -
        ///     Ленинградская область\&quot;, \&quot;48 - Липецкая область\&quot;, \&quot;49 - Магаданская область\&quot;,\&quot;50 - Московская область\&quot;, \&quot;51 - Мурманская
        ///     область\&quot;, \&quot;52 - Нижегородская область\&quot;,\&quot;53 - Новгородская область\&quot;, \&quot;54 - Новосибирская область\&quot;, \&quot;55 - Омская область\&quot;,\
        ///     &quot;56 - Оренбургская область\&quot;, \&quot;57 - Орловская область\&quot;, \&quot;58 - Пензенская область\&quot;,\&quot;59 - Пермский край\&quot;, \&quot;60 - Псковская
        ///     область\&quot;, \&quot;61 - Ростовская область\&quot;,\&quot;62 - Рязанская область\&quot;, \&quot;63 - Самарская область\&quot;, \&quot;64 - Саратовская область\&quot;,\
        ///     &quot;65 - Сахалинская область\&quot;, \&quot;66 - Свердловская область\&quot;, \&quot;67 - Смоленская область\&quot;,\&quot;68 - Тамбовская область\&quot;, \&quot;69 -
        ///     Тверская область\&quot;, \&quot;70 - Томская область\&quot;,\&quot;71 - Тульская область\&quot;, \&quot;72 - Тюменская область\&quot;, \&quot;73 - Ульяновская область\&quot;,\
        ///     &quot;74 - Челябинская область\&quot;, \&quot;75 - Забайкальский край\&quot;, \&quot;76 - Ярославская область\&quot;,\&quot;77 - Г.Москва\&quot;, \&quot;78 -
        ///     Г.Санкт-Петербург\&quot;, \&quot;79 - Еврейская автономная область\&quot;,\&quot;83 - Ненецкий автономный округ\&quot;, \&quot;86 - Ханты-Мансийский автономный округ - Югра\
        ///     &quot;,\&quot;87 - Чукотский автономный округ\&quot;, \&quot;89 - Ямало-Ненецкий автономный округ\&quot;,\&quot;90 - Запорожская область\&quot;, \&quot;91 - Республика Крым\
        ///     &quot;, \&quot;92 - город федерального значения Севастополь\&quot;,\&quot;93 - Донецкая Народная Республика\&quot;, \&quot;94 - Луганская Народная Республика\&quot;, \&quot;95
        ///     - Херсонская область\&quot;,\&quot;99 - Иные территории, включая город и космодром Байконур\&quot;
        /// </summary>
        /// <value>
        ///     \&quot;1 - Республика Адыгея (Адыгея)\&quot;, \&quot;2 - Республика Башкортостан\&quot;,\&quot;3 - Республика Бурятия\&quot;, \&quot;4 - Республика Алтай\&quot;, \&quot;5 -
        ///     Республика Дагестан\&quot;,\&quot;6 - Республика Ингушетия\&quot;, \&quot;7 - Кабардино-Балкарская Республика\&quot;, \&quot;8 - Республика Калмыкия\&quot;,\&quot;9 -
        ///     Карачаево-Черкесская Республика\&quot;, \&quot;10 - Республика Карелия\&quot;, \&quot;11 - Республика Коми\&quot;,\&quot;12 - Республика Марий Эл\&quot;, \&quot;13 -
        ///     Республика Мордовия\&quot;, \&quot;14 - Республика Саха (Якутия)\&quot;,\&quot;15 - Республика Северная Осетия - Алания\&quot;, \&quot;16 - Республика Татарстан (Татарстан)\
        ///     &quot;,\&quot;17 - Республика Тыва\&quot;, \&quot;18 - Удмуртская Республика\&quot;, \&quot;19 - Республика Хакасия\&quot;,\&quot;20 - Чеченская Республика\&quot;, \&quot;21 -
        ///     Чувашская Республика - Чувашия\&quot;, \&quot;22 - Алтайский край\&quot;,\&quot;23 - Краснодарский край\&quot;, \&quot;24 - Красноярский край\&quot;, \&quot;25 - Приморский
        ///     край\&quot;,\&quot;26 - Ставропольский край\&quot;, \&quot;27 - Хабаровский край\&quot;, \&quot;28 - Амурская область\&quot;,\&quot;29 - Архангельская область\&quot;, \&quot;
        ///     30 - Астраханская область\&quot;, \&quot;31 - Белгородская область\&quot;,\&quot;32 - Брянская область\&quot;, \&quot;33 - Владимирская область\&quot;, \&quot;34 -
        ///     Волгоградская область\&quot;,\&quot;35 - Вологодская область\&quot;, \&quot;36 - Воронежская область\&quot;, \&quot;37 - Ивановская область\&quot;,\&quot;38 - Иркутская
        ///     область\&quot;, \&quot;39 - Калининградская область\&quot;, \&quot;40 - Калужская область\&quot;,\&quot;41 - Камчатский край\&quot;, \&quot;42 - Кемеровская область - Кузбасс\
        ///     &quot;, \&quot;43 - Кировская область\&quot;,\&quot;44 - Костромская область\&quot;, \&quot;45 - Курганская область\&quot;, \&quot;46 - Курская область\&quot;,\&quot;47 -
        ///     Ленинградская область\&quot;, \&quot;48 - Липецкая область\&quot;, \&quot;49 - Магаданская область\&quot;,\&quot;50 - Московская область\&quot;, \&quot;51 - Мурманская
        ///     область\&quot;, \&quot;52 - Нижегородская область\&quot;,\&quot;53 - Новгородская область\&quot;, \&quot;54 - Новосибирская область\&quot;, \&quot;55 - Омская область\&quot;,\
        ///     &quot;56 - Оренбургская область\&quot;, \&quot;57 - Орловская область\&quot;, \&quot;58 - Пензенская область\&quot;,\&quot;59 - Пермский край\&quot;, \&quot;60 - Псковская
        ///     область\&quot;, \&quot;61 - Ростовская область\&quot;,\&quot;62 - Рязанская область\&quot;, \&quot;63 - Самарская область\&quot;, \&quot;64 - Саратовская область\&quot;,\
        ///     &quot;65 - Сахалинская область\&quot;, \&quot;66 - Свердловская область\&quot;, \&quot;67 - Смоленская область\&quot;,\&quot;68 - Тамбовская область\&quot;, \&quot;69 -
        ///     Тверская область\&quot;, \&quot;70 - Томская область\&quot;,\&quot;71 - Тульская область\&quot;, \&quot;72 - Тюменская область\&quot;, \&quot;73 - Ульяновская область\&quot;,\
        ///     &quot;74 - Челябинская область\&quot;, \&quot;75 - Забайкальский край\&quot;, \&quot;76 - Ярославская область\&quot;,\&quot;77 - Г.Москва\&quot;, \&quot;78 -
        ///     Г.Санкт-Петербург\&quot;, \&quot;79 - Еврейская автономная область\&quot;,\&quot;83 - Ненецкий автономный округ\&quot;, \&quot;86 - Ханты-Мансийский автономный округ - Югра\
        ///     &quot;,\&quot;87 - Чукотский автономный округ\&quot;, \&quot;89 - Ямало-Ненецкий автономный округ\&quot;,\&quot;90 - Запорожская область\&quot;, \&quot;91 - Республика Крым\
        ///     &quot;, \&quot;92 - город федерального значения Севастополь\&quot;,\&quot;93 - Донецкая Народная Республика\&quot;, \&quot;94 - Луганская Народная Республика\&quot;, \&quot;95
        ///     - Херсонская область\&quot;,\&quot;99 - Иные территории, включая город и космодром Байконур\&quot;
        /// </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RegionEnum
        {
            /// <summary>
            ///     Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")] _1 = 1,

            /// <summary>
            ///     Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")] _2 = 2,

            /// <summary>
            ///     Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")] _3 = 3,

            /// <summary>
            ///     Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")] _4 = 4,

            /// <summary>
            ///     Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")] _5 = 5,

            /// <summary>
            ///     Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")] _6 = 6,

            /// <summary>
            ///     Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")] _7 = 7,

            /// <summary>
            ///     Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")] _8 = 8,

            /// <summary>
            ///     Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")] _9 = 9,

            /// <summary>
            ///     Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")] _10 = 10,

            /// <summary>
            ///     Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")] _11 = 11,

            /// <summary>
            ///     Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")] _12 = 12,

            /// <summary>
            ///     Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")] _13 = 13,

            /// <summary>
            ///     Enum _14 for value: 14
            /// </summary>
            [EnumMember(Value = "14")] _14 = 14,

            /// <summary>
            ///     Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")] _15 = 15,

            /// <summary>
            ///     Enum _16 for value: 16
            /// </summary>
            [EnumMember(Value = "16")] _16 = 16,

            /// <summary>
            ///     Enum _17 for value: 17
            /// </summary>
            [EnumMember(Value = "17")] _17 = 17,

            /// <summary>
            ///     Enum _18 for value: 18
            /// </summary>
            [EnumMember(Value = "18")] _18 = 18,

            /// <summary>
            ///     Enum _19 for value: 19
            /// </summary>
            [EnumMember(Value = "19")] _19 = 19,

            /// <summary>
            ///     Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")] _20 = 20,

            /// <summary>
            ///     Enum _21 for value: 21
            /// </summary>
            [EnumMember(Value = "21")] _21 = 21,

            /// <summary>
            ///     Enum _22 for value: 22
            /// </summary>
            [EnumMember(Value = "22")] _22 = 22,

            /// <summary>
            ///     Enum _23 for value: 23
            /// </summary>
            [EnumMember(Value = "23")] _23 = 23,

            /// <summary>
            ///     Enum _24 for value: 24
            /// </summary>
            [EnumMember(Value = "24")] _24 = 24,

            /// <summary>
            ///     Enum _25 for value: 25
            /// </summary>
            [EnumMember(Value = "25")] _25 = 25,

            /// <summary>
            ///     Enum _26 for value: 26
            /// </summary>
            [EnumMember(Value = "26")] _26 = 26,

            /// <summary>
            ///     Enum _27 for value: 27
            /// </summary>
            [EnumMember(Value = "27")] _27 = 27,

            /// <summary>
            ///     Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")] _28 = 28,

            /// <summary>
            ///     Enum _29 for value: 29
            /// </summary>
            [EnumMember(Value = "29")] _29 = 29,

            /// <summary>
            ///     Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")] _30 = 30,

            /// <summary>
            ///     Enum _31 for value: 31
            /// </summary>
            [EnumMember(Value = "31")] _31 = 31,

            /// <summary>
            ///     Enum _32 for value: 32
            /// </summary>
            [EnumMember(Value = "32")] _32 = 32,

            /// <summary>
            ///     Enum _33 for value: 33
            /// </summary>
            [EnumMember(Value = "33")] _33 = 33,

            /// <summary>
            ///     Enum _34 for value: 34
            /// </summary>
            [EnumMember(Value = "34")] _34 = 34,

            /// <summary>
            ///     Enum _35 for value: 35
            /// </summary>
            [EnumMember(Value = "35")] _35 = 35,

            /// <summary>
            ///     Enum _36 for value: 36
            /// </summary>
            [EnumMember(Value = "36")] _36 = 36,

            /// <summary>
            ///     Enum _37 for value: 37
            /// </summary>
            [EnumMember(Value = "37")] _37 = 37,

            /// <summary>
            ///     Enum _38 for value: 38
            /// </summary>
            [EnumMember(Value = "38")] _38 = 38,

            /// <summary>
            ///     Enum _39 for value: 39
            /// </summary>
            [EnumMember(Value = "39")] _39 = 39,

            /// <summary>
            ///     Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")] _40 = 40,

            /// <summary>
            ///     Enum _41 for value: 41
            /// </summary>
            [EnumMember(Value = "41")] _41 = 41,

            /// <summary>
            ///     Enum _42 for value: 42
            /// </summary>
            [EnumMember(Value = "42")] _42 = 42,

            /// <summary>
            ///     Enum _43 for value: 43
            /// </summary>
            [EnumMember(Value = "43")] _43 = 43,

            /// <summary>
            ///     Enum _44 for value: 44
            /// </summary>
            [EnumMember(Value = "44")] _44 = 44,

            /// <summary>
            ///     Enum _45 for value: 45
            /// </summary>
            [EnumMember(Value = "45")] _45 = 45,

            /// <summary>
            ///     Enum _46 for value: 46
            /// </summary>
            [EnumMember(Value = "46")] _46 = 46,

            /// <summary>
            ///     Enum _47 for value: 47
            /// </summary>
            [EnumMember(Value = "47")] _47 = 47,

            /// <summary>
            ///     Enum _48 for value: 48
            /// </summary>
            [EnumMember(Value = "48")] _48 = 48,

            /// <summary>
            ///     Enum _49 for value: 49
            /// </summary>
            [EnumMember(Value = "49")] _49 = 49,

            /// <summary>
            ///     Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")] _50 = 50,

            /// <summary>
            ///     Enum _51 for value: 51
            /// </summary>
            [EnumMember(Value = "51")] _51 = 51,

            /// <summary>
            ///     Enum _52 for value: 52
            /// </summary>
            [EnumMember(Value = "52")] _52 = 52,

            /// <summary>
            ///     Enum _53 for value: 53
            /// </summary>
            [EnumMember(Value = "53")] _53 = 53,

            /// <summary>
            ///     Enum _54 for value: 54
            /// </summary>
            [EnumMember(Value = "54")] _54 = 54,

            /// <summary>
            ///     Enum _55 for value: 55
            /// </summary>
            [EnumMember(Value = "55")] _55 = 55,

            /// <summary>
            ///     Enum _56 for value: 56
            /// </summary>
            [EnumMember(Value = "56")] _56 = 56,

            /// <summary>
            ///     Enum _57 for value: 57
            /// </summary>
            [EnumMember(Value = "57")] _57 = 57,

            /// <summary>
            ///     Enum _58 for value: 58
            /// </summary>
            [EnumMember(Value = "58")] _58 = 58,

            /// <summary>
            ///     Enum _59 for value: 59
            /// </summary>
            [EnumMember(Value = "59")] _59 = 59,

            /// <summary>
            ///     Enum _60 for value: 60
            /// </summary>
            [EnumMember(Value = "60")] _60 = 60,

            /// <summary>
            ///     Enum _61 for value: 61
            /// </summary>
            [EnumMember(Value = "61")] _61 = 61,

            /// <summary>
            ///     Enum _62 for value: 62
            /// </summary>
            [EnumMember(Value = "62")] _62 = 62,

            /// <summary>
            ///     Enum _63 for value: 63
            /// </summary>
            [EnumMember(Value = "63")] _63 = 63,

            /// <summary>
            ///     Enum _64 for value: 64
            /// </summary>
            [EnumMember(Value = "64")] _64 = 64,

            /// <summary>
            ///     Enum _65 for value: 65
            /// </summary>
            [EnumMember(Value = "65")] _65 = 65,

            /// <summary>
            ///     Enum _66 for value: 66
            /// </summary>
            [EnumMember(Value = "66")] _66 = 66,

            /// <summary>
            ///     Enum _67 for value: 67
            /// </summary>
            [EnumMember(Value = "67")] _67 = 67,

            /// <summary>
            ///     Enum _68 for value: 68
            /// </summary>
            [EnumMember(Value = "68")] _68 = 68,

            /// <summary>
            ///     Enum _69 for value: 69
            /// </summary>
            [EnumMember(Value = "69")] _69 = 69,

            /// <summary>
            ///     Enum _70 for value: 70
            /// </summary>
            [EnumMember(Value = "70")] _70 = 70,

            /// <summary>
            ///     Enum _71 for value: 71
            /// </summary>
            [EnumMember(Value = "71")] _71 = 71,

            /// <summary>
            ///     Enum _72 for value: 72
            /// </summary>
            [EnumMember(Value = "72")] _72 = 72,

            /// <summary>
            ///     Enum _73 for value: 73
            /// </summary>
            [EnumMember(Value = "73")] _73 = 73,

            /// <summary>
            ///     Enum _74 for value: 74
            /// </summary>
            [EnumMember(Value = "74")] _74 = 74,

            /// <summary>
            ///     Enum _75 for value: 75
            /// </summary>
            [EnumMember(Value = "75")] _75 = 75,

            /// <summary>
            ///     Enum _76 for value: 76
            /// </summary>
            [EnumMember(Value = "76")] _76 = 76,

            /// <summary>
            ///     Enum _77 for value: 77
            /// </summary>
            [EnumMember(Value = "77")] _77 = 77,

            /// <summary>
            ///     Enum _78 for value: 78
            /// </summary>
            [EnumMember(Value = "78")] _78 = 78,

            /// <summary>
            ///     Enum _79 for value: 79
            /// </summary>
            [EnumMember(Value = "79")] _79 = 79,

            /// <summary>
            ///     Enum _83 for value: 83
            /// </summary>
            [EnumMember(Value = "83")] _83 = 80,

            /// <summary>
            ///     Enum _86 for value: 86
            /// </summary>
            [EnumMember(Value = "86")] _86 = 81,

            /// <summary>
            ///     Enum _87 for value: 87
            /// </summary>
            [EnumMember(Value = "87")] _87 = 82,

            /// <summary>
            ///     Enum _89 for value: 89
            /// </summary>
            [EnumMember(Value = "89")] _89 = 83,

            /// <summary>
            ///     Enum _90 for value: 90
            /// </summary>
            [EnumMember(Value = "90")] _90 = 84,

            /// <summary>
            ///     Enum _91 for value: 91
            /// </summary>
            [EnumMember(Value = "91")] _91 = 85,

            /// <summary>
            ///     Enum _92 for value: 92
            /// </summary>
            [EnumMember(Value = "92")] _92 = 86,

            /// <summary>
            ///     Enum _93 for value: 93
            /// </summary>
            [EnumMember(Value = "93")] _93 = 87,

            /// <summary>
            ///     Enum _94 for value: 94
            /// </summary>
            [EnumMember(Value = "94")] _94 = 88,

            /// <summary>
            ///     Enum _95 for value: 95
            /// </summary>
            [EnumMember(Value = "95")] _95 = 89,

            /// <summary>
            ///     Enum _99 for value: 99
            /// </summary>
            [EnumMember(Value = "99")] _99 = 90
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GuaranteeAddress()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="address">Адрес (required).</param>
        /// <param name="country">Страна (значение из двух букв по справочнику ISO).</param>
        /// <param name="zipcode">Почтовый индекс.</param>
        /// <param name="region">
        ///     \&quot;1 - Республика Адыгея (Адыгея)\&quot;, \&quot;2 - Республика Башкортостан\&quot;,\&quot;3 - Республика Бурятия\&quot;, \&quot;4 - Республика Алтай\
        ///     &quot;, \&quot;5 - Республика Дагестан\&quot;,\&quot;6 - Республика Ингушетия\&quot;, \&quot;7 - Кабардино-Балкарская Республика\&quot;, \&quot;8 - Республика Калмыкия\&quot;
        ///     ,\&quot;9 - Карачаево-Черкесская Республика\&quot;, \&quot;10 - Республика Карелия\&quot;, \&quot;11 - Республика Коми\&quot;,\&quot;12 - Республика Марий Эл\&quot;, \&quot;13
        ///     - Республика Мордовия\&quot;, \&quot;14 - Республика Саха (Якутия)\&quot;,\&quot;15 - Республика Северная Осетия - Алания\&quot;, \&quot;16 - Республика Татарстан (Татарстан)\
        ///     &quot;,\&quot;17 - Республика Тыва\&quot;, \&quot;18 - Удмуртская Республика\&quot;, \&quot;19 - Республика Хакасия\&quot;,\&quot;20 - Чеченская Республика\&quot;, \&quot;21 -
        ///     Чувашская Республика - Чувашия\&quot;, \&quot;22 - Алтайский край\&quot;,\&quot;23 - Краснодарский край\&quot;, \&quot;24 - Красноярский край\&quot;, \&quot;25 - Приморский
        ///     край\&quot;,\&quot;26 - Ставропольский край\&quot;, \&quot;27 - Хабаровский край\&quot;, \&quot;28 - Амурская область\&quot;,\&quot;29 - Архангельская область\&quot;, \&quot;
        ///     30 - Астраханская область\&quot;, \&quot;31 - Белгородская область\&quot;,\&quot;32 - Брянская область\&quot;, \&quot;33 - Владимирская область\&quot;, \&quot;34 -
        ///     Волгоградская область\&quot;,\&quot;35 - Вологодская область\&quot;, \&quot;36 - Воронежская область\&quot;, \&quot;37 - Ивановская область\&quot;,\&quot;38 - Иркутская
        ///     область\&quot;, \&quot;39 - Калининградская область\&quot;, \&quot;40 - Калужская область\&quot;,\&quot;41 - Камчатский край\&quot;, \&quot;42 - Кемеровская область - Кузбасс\
        ///     &quot;, \&quot;43 - Кировская область\&quot;,\&quot;44 - Костромская область\&quot;, \&quot;45 - Курганская область\&quot;, \&quot;46 - Курская область\&quot;,\&quot;47 -
        ///     Ленинградская область\&quot;, \&quot;48 - Липецкая область\&quot;, \&quot;49 - Магаданская область\&quot;,\&quot;50 - Московская область\&quot;, \&quot;51 - Мурманская
        ///     область\&quot;, \&quot;52 - Нижегородская область\&quot;,\&quot;53 - Новгородская область\&quot;, \&quot;54 - Новосибирская область\&quot;, \&quot;55 - Омская область\&quot;,\
        ///     &quot;56 - Оренбургская область\&quot;, \&quot;57 - Орловская область\&quot;, \&quot;58 - Пензенская область\&quot;,\&quot;59 - Пермский край\&quot;, \&quot;60 - Псковская
        ///     область\&quot;, \&quot;61 - Ростовская область\&quot;,\&quot;62 - Рязанская область\&quot;, \&quot;63 - Самарская область\&quot;, \&quot;64 - Саратовская область\&quot;,\
        ///     &quot;65 - Сахалинская область\&quot;, \&quot;66 - Свердловская область\&quot;, \&quot;67 - Смоленская область\&quot;,\&quot;68 - Тамбовская область\&quot;, \&quot;69 -
        ///     Тверская область\&quot;, \&quot;70 - Томская область\&quot;,\&quot;71 - Тульская область\&quot;, \&quot;72 - Тюменская область\&quot;, \&quot;73 - Ульяновская область\&quot;,\
        ///     &quot;74 - Челябинская область\&quot;, \&quot;75 - Забайкальский край\&quot;, \&quot;76 - Ярославская область\&quot;,\&quot;77 - Г.Москва\&quot;, \&quot;78 -
        ///     Г.Санкт-Петербург\&quot;, \&quot;79 - Еврейская автономная область\&quot;,\&quot;83 - Ненецкий автономный округ\&quot;, \&quot;86 - Ханты-Мансийский автономный округ - Югра\
        ///     &quot;,\&quot;87 - Чукотский автономный округ\&quot;, \&quot;89 - Ямало-Ненецкий автономный округ\&quot;,\&quot;90 - Запорожская область\&quot;, \&quot;91 - Республика Крым\
        ///     &quot;, \&quot;92 - город федерального значения Севастополь\&quot;,\&quot;93 - Донецкая Народная Республика\&quot;, \&quot;94 - Луганская Народная Республика\&quot;, \&quot;95
        ///     - Херсонская область\&quot;,\&quot;99 - Иные территории, включая город и космодром Байконур\&quot;.
        /// </param>
        /// <param name="provinceType">Тип области.</param>
        /// <param name="province">Область.</param>
        /// <param name="districtType">Тип района.</param>
        /// <param name="district">Район.</param>
        /// <param name="cityType">Тип города.</param>
        /// <param name="city">Город.</param>
        /// <param name="locationType">Тип населенного пункта.</param>
        /// <param name="location">Населенный пункт.</param>
        /// <param name="streetType">Тип улицы.</param>
        /// <param name="street">Улица.</param>
        /// <param name="house">Дом.</param>
        /// <param name="housing">Корпус.</param>
        /// <param name="building">Строение.</param>
        /// <param name="apartmentNumber">Квартира/офис.</param>
        /// <param name="kladr">КЛАДР.</param>
        /// <param name="okato">ОКАТО.</param>
        /// <param name="addressType">Тип адреса (Юридический/Фактический) (required).</param>
        public GuaranteeAddress(string address = default, CountryEnum? country = default, string zipcode = default, RegionEnum? region = default, string provinceType = default,
            string province = default, string districtType = default, string district = default, string cityType = default, string city = default, string locationType = default,
            string location = default, string streetType = default, string street = default, string house = default, string housing = default, string building = default,
            string apartmentNumber = default, string kladr = default, string okato = default, AddressTypeEnum addressType = default)
        {
            // to ensure "address" is required (not null)
            if (address == null) throw new ArgumentNullException("address is a required property for GuaranteeAddress and cannot be null");
            Address = address;
            AddressType = addressType;
            Country = country;
            Zipcode = zipcode;
            Region = region;
            ProvinceType = provinceType;
            Province = province;
            DistrictType = districtType;
            District = district;
            CityType = cityType;
            City = city;
            LocationType = locationType;
            Location = location;
            StreetType = streetType;
            Street = street;
            House = house;
            Housing = housing;
            Building = building;
            ApartmentNumber = apartmentNumber;
            Kladr = kladr;
            Okato = okato;
        }


        /// <summary>
        ///     Страна (значение из двух букв по справочнику ISO)
        /// </summary>
        /// <value>Страна (значение из двух букв по справочнику ISO)</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryEnum? Country { get; set; }


        /// <summary>
        ///     \&quot;1 - Республика Адыгея (Адыгея)\&quot;, \&quot;2 - Республика Башкортостан\&quot;,\&quot;3 - Республика Бурятия\&quot;, \&quot;4 - Республика Алтай\&quot;, \&quot;5 -
        ///     Республика Дагестан\&quot;,\&quot;6 - Республика Ингушетия\&quot;, \&quot;7 - Кабардино-Балкарская Республика\&quot;, \&quot;8 - Республика Калмыкия\&quot;,\&quot;9 -
        ///     Карачаево-Черкесская Республика\&quot;, \&quot;10 - Республика Карелия\&quot;, \&quot;11 - Республика Коми\&quot;,\&quot;12 - Республика Марий Эл\&quot;, \&quot;13 -
        ///     Республика Мордовия\&quot;, \&quot;14 - Республика Саха (Якутия)\&quot;,\&quot;15 - Республика Северная Осетия - Алания\&quot;, \&quot;16 - Республика Татарстан (Татарстан)\
        ///     &quot;,\&quot;17 - Республика Тыва\&quot;, \&quot;18 - Удмуртская Республика\&quot;, \&quot;19 - Республика Хакасия\&quot;,\&quot;20 - Чеченская Республика\&quot;, \&quot;21 -
        ///     Чувашская Республика - Чувашия\&quot;, \&quot;22 - Алтайский край\&quot;,\&quot;23 - Краснодарский край\&quot;, \&quot;24 - Красноярский край\&quot;, \&quot;25 - Приморский
        ///     край\&quot;,\&quot;26 - Ставропольский край\&quot;, \&quot;27 - Хабаровский край\&quot;, \&quot;28 - Амурская область\&quot;,\&quot;29 - Архангельская область\&quot;, \&quot;
        ///     30 - Астраханская область\&quot;, \&quot;31 - Белгородская область\&quot;,\&quot;32 - Брянская область\&quot;, \&quot;33 - Владимирская область\&quot;, \&quot;34 -
        ///     Волгоградская область\&quot;,\&quot;35 - Вологодская область\&quot;, \&quot;36 - Воронежская область\&quot;, \&quot;37 - Ивановская область\&quot;,\&quot;38 - Иркутская
        ///     область\&quot;, \&quot;39 - Калининградская область\&quot;, \&quot;40 - Калужская область\&quot;,\&quot;41 - Камчатский край\&quot;, \&quot;42 - Кемеровская область - Кузбасс\
        ///     &quot;, \&quot;43 - Кировская область\&quot;,\&quot;44 - Костромская область\&quot;, \&quot;45 - Курганская область\&quot;, \&quot;46 - Курская область\&quot;,\&quot;47 -
        ///     Ленинградская область\&quot;, \&quot;48 - Липецкая область\&quot;, \&quot;49 - Магаданская область\&quot;,\&quot;50 - Московская область\&quot;, \&quot;51 - Мурманская
        ///     область\&quot;, \&quot;52 - Нижегородская область\&quot;,\&quot;53 - Новгородская область\&quot;, \&quot;54 - Новосибирская область\&quot;, \&quot;55 - Омская область\&quot;,\
        ///     &quot;56 - Оренбургская область\&quot;, \&quot;57 - Орловская область\&quot;, \&quot;58 - Пензенская область\&quot;,\&quot;59 - Пермский край\&quot;, \&quot;60 - Псковская
        ///     область\&quot;, \&quot;61 - Ростовская область\&quot;,\&quot;62 - Рязанская область\&quot;, \&quot;63 - Самарская область\&quot;, \&quot;64 - Саратовская область\&quot;,\
        ///     &quot;65 - Сахалинская область\&quot;, \&quot;66 - Свердловская область\&quot;, \&quot;67 - Смоленская область\&quot;,\&quot;68 - Тамбовская область\&quot;, \&quot;69 -
        ///     Тверская область\&quot;, \&quot;70 - Томская область\&quot;,\&quot;71 - Тульская область\&quot;, \&quot;72 - Тюменская область\&quot;, \&quot;73 - Ульяновская область\&quot;,\
        ///     &quot;74 - Челябинская область\&quot;, \&quot;75 - Забайкальский край\&quot;, \&quot;76 - Ярославская область\&quot;,\&quot;77 - Г.Москва\&quot;, \&quot;78 -
        ///     Г.Санкт-Петербург\&quot;, \&quot;79 - Еврейская автономная область\&quot;,\&quot;83 - Ненецкий автономный округ\&quot;, \&quot;86 - Ханты-Мансийский автономный округ - Югра\
        ///     &quot;,\&quot;87 - Чукотский автономный округ\&quot;, \&quot;89 - Ямало-Ненецкий автономный округ\&quot;,\&quot;90 - Запорожская область\&quot;, \&quot;91 - Республика Крым\
        ///     &quot;, \&quot;92 - город федерального значения Севастополь\&quot;,\&quot;93 - Донецкая Народная Республика\&quot;, \&quot;94 - Луганская Народная Республика\&quot;, \&quot;95
        ///     - Херсонская область\&quot;,\&quot;99 - Иные территории, включая город и космодром Байконур\&quot;
        /// </summary>
        /// <value>
        ///     \&quot;1 - Республика Адыгея (Адыгея)\&quot;, \&quot;2 - Республика Башкортостан\&quot;,\&quot;3 - Республика Бурятия\&quot;, \&quot;4 - Республика Алтай\&quot;, \&quot;5 -
        ///     Республика Дагестан\&quot;,\&quot;6 - Республика Ингушетия\&quot;, \&quot;7 - Кабардино-Балкарская Республика\&quot;, \&quot;8 - Республика Калмыкия\&quot;,\&quot;9 -
        ///     Карачаево-Черкесская Республика\&quot;, \&quot;10 - Республика Карелия\&quot;, \&quot;11 - Республика Коми\&quot;,\&quot;12 - Республика Марий Эл\&quot;, \&quot;13 -
        ///     Республика Мордовия\&quot;, \&quot;14 - Республика Саха (Якутия)\&quot;,\&quot;15 - Республика Северная Осетия - Алания\&quot;, \&quot;16 - Республика Татарстан (Татарстан)\
        ///     &quot;,\&quot;17 - Республика Тыва\&quot;, \&quot;18 - Удмуртская Республика\&quot;, \&quot;19 - Республика Хакасия\&quot;,\&quot;20 - Чеченская Республика\&quot;, \&quot;21 -
        ///     Чувашская Республика - Чувашия\&quot;, \&quot;22 - Алтайский край\&quot;,\&quot;23 - Краснодарский край\&quot;, \&quot;24 - Красноярский край\&quot;, \&quot;25 - Приморский
        ///     край\&quot;,\&quot;26 - Ставропольский край\&quot;, \&quot;27 - Хабаровский край\&quot;, \&quot;28 - Амурская область\&quot;,\&quot;29 - Архангельская область\&quot;, \&quot;
        ///     30 - Астраханская область\&quot;, \&quot;31 - Белгородская область\&quot;,\&quot;32 - Брянская область\&quot;, \&quot;33 - Владимирская область\&quot;, \&quot;34 -
        ///     Волгоградская область\&quot;,\&quot;35 - Вологодская область\&quot;, \&quot;36 - Воронежская область\&quot;, \&quot;37 - Ивановская область\&quot;,\&quot;38 - Иркутская
        ///     область\&quot;, \&quot;39 - Калининградская область\&quot;, \&quot;40 - Калужская область\&quot;,\&quot;41 - Камчатский край\&quot;, \&quot;42 - Кемеровская область - Кузбасс\
        ///     &quot;, \&quot;43 - Кировская область\&quot;,\&quot;44 - Костромская область\&quot;, \&quot;45 - Курганская область\&quot;, \&quot;46 - Курская область\&quot;,\&quot;47 -
        ///     Ленинградская область\&quot;, \&quot;48 - Липецкая область\&quot;, \&quot;49 - Магаданская область\&quot;,\&quot;50 - Московская область\&quot;, \&quot;51 - Мурманская
        ///     область\&quot;, \&quot;52 - Нижегородская область\&quot;,\&quot;53 - Новгородская область\&quot;, \&quot;54 - Новосибирская область\&quot;, \&quot;55 - Омская область\&quot;,\
        ///     &quot;56 - Оренбургская область\&quot;, \&quot;57 - Орловская область\&quot;, \&quot;58 - Пензенская область\&quot;,\&quot;59 - Пермский край\&quot;, \&quot;60 - Псковская
        ///     область\&quot;, \&quot;61 - Ростовская область\&quot;,\&quot;62 - Рязанская область\&quot;, \&quot;63 - Самарская область\&quot;, \&quot;64 - Саратовская область\&quot;,\
        ///     &quot;65 - Сахалинская область\&quot;, \&quot;66 - Свердловская область\&quot;, \&quot;67 - Смоленская область\&quot;,\&quot;68 - Тамбовская область\&quot;, \&quot;69 -
        ///     Тверская область\&quot;, \&quot;70 - Томская область\&quot;,\&quot;71 - Тульская область\&quot;, \&quot;72 - Тюменская область\&quot;, \&quot;73 - Ульяновская область\&quot;,\
        ///     &quot;74 - Челябинская область\&quot;, \&quot;75 - Забайкальский край\&quot;, \&quot;76 - Ярославская область\&quot;,\&quot;77 - Г.Москва\&quot;, \&quot;78 -
        ///     Г.Санкт-Петербург\&quot;, \&quot;79 - Еврейская автономная область\&quot;,\&quot;83 - Ненецкий автономный округ\&quot;, \&quot;86 - Ханты-Мансийский автономный округ - Югра\
        ///     &quot;,\&quot;87 - Чукотский автономный округ\&quot;, \&quot;89 - Ямало-Ненецкий автономный округ\&quot;,\&quot;90 - Запорожская область\&quot;, \&quot;91 - Республика Крым\
        ///     &quot;, \&quot;92 - город федерального значения Севастополь\&quot;,\&quot;93 - Донецкая Народная Республика\&quot;, \&quot;94 - Луганская Народная Республика\&quot;, \&quot;95
        ///     - Херсонская область\&quot;,\&quot;99 - Иные территории, включая город и космодром Байконур\&quot;
        /// </value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public RegionEnum? Region { get; set; }


        /// <summary>
        ///     Тип адреса (Юридический/Фактический)
        /// </summary>
        /// <value>Тип адреса (Юридический/Фактический)</value>
        [DataMember(Name = "addressType", IsRequired = true, EmitDefaultValue = true)]
        public AddressTypeEnum AddressType { get; set; }

        /// <summary>
        ///     Адрес
        /// </summary>
        /// <value>Адрес</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        ///     Почтовый индекс
        /// </summary>
        /// <value>Почтовый индекс</value>
        [DataMember(Name = "zipcode", EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        ///     Тип области
        /// </summary>
        /// <value>Тип области</value>
        [DataMember(Name = "provinceType", EmitDefaultValue = false)]
        public string ProvinceType { get; set; }

        /// <summary>
        ///     Область
        /// </summary>
        /// <value>Область</value>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        ///     Тип района
        /// </summary>
        /// <value>Тип района</value>
        [DataMember(Name = "districtType", EmitDefaultValue = false)]
        public string DistrictType { get; set; }

        /// <summary>
        ///     Район
        /// </summary>
        /// <value>Район</value>
        [DataMember(Name = "district", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        ///     Тип города
        /// </summary>
        /// <value>Тип города</value>
        [DataMember(Name = "cityType", EmitDefaultValue = false)]
        public string CityType { get; set; }

        /// <summary>
        ///     Город
        /// </summary>
        /// <value>Город</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        ///     Тип населенного пункта
        /// </summary>
        /// <value>Тип населенного пункта</value>
        [DataMember(Name = "locationType", EmitDefaultValue = false)]
        public string LocationType { get; set; }

        /// <summary>
        ///     Населенный пункт
        /// </summary>
        /// <value>Населенный пункт</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        ///     Тип улицы
        /// </summary>
        /// <value>Тип улицы</value>
        [DataMember(Name = "streetType", EmitDefaultValue = false)]
        public string StreetType { get; set; }

        /// <summary>
        ///     Улица
        /// </summary>
        /// <value>Улица</value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        ///     Дом
        /// </summary>
        /// <value>Дом</value>
        [DataMember(Name = "house", EmitDefaultValue = false)]
        public string House { get; set; }

        /// <summary>
        ///     Корпус
        /// </summary>
        /// <value>Корпус</value>
        [DataMember(Name = "housing", EmitDefaultValue = false)]
        public string Housing { get; set; }

        /// <summary>
        ///     Строение
        /// </summary>
        /// <value>Строение</value>
        [DataMember(Name = "building", EmitDefaultValue = false)]
        public string Building { get; set; }

        /// <summary>
        ///     Квартира/офис
        /// </summary>
        /// <value>Квартира/офис</value>
        [DataMember(Name = "apartmentNumber", EmitDefaultValue = false)]
        public string ApartmentNumber { get; set; }

        /// <summary>
        ///     КЛАДР
        /// </summary>
        /// <value>КЛАДР</value>
        [DataMember(Name = "kladr", EmitDefaultValue = false)]
        public string Kladr { get; set; }

        /// <summary>
        ///     ОКАТО
        /// </summary>
        /// <value>ОКАТО</value>
        [DataMember(Name = "okato", EmitDefaultValue = false)]
        public string Okato { get; set; }

        /// <summary>
        ///     Returns true if GuaranteeAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of GuaranteeAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuaranteeAddress input)
        {
            if (input == null) return false;
            return
                (
                    Address == input.Address ||
                    (Address != null &&
                     Address.Equals(input.Address))
                ) &&
                (
                    Country == input.Country ||
                    Country.Equals(input.Country)
                ) &&
                (
                    Zipcode == input.Zipcode ||
                    (Zipcode != null &&
                     Zipcode.Equals(input.Zipcode))
                ) &&
                (
                    Region == input.Region ||
                    Region.Equals(input.Region)
                ) &&
                (
                    ProvinceType == input.ProvinceType ||
                    (ProvinceType != null &&
                     ProvinceType.Equals(input.ProvinceType))
                ) &&
                (
                    Province == input.Province ||
                    (Province != null &&
                     Province.Equals(input.Province))
                ) &&
                (
                    DistrictType == input.DistrictType ||
                    (DistrictType != null &&
                     DistrictType.Equals(input.DistrictType))
                ) &&
                (
                    District == input.District ||
                    (District != null &&
                     District.Equals(input.District))
                ) &&
                (
                    CityType == input.CityType ||
                    (CityType != null &&
                     CityType.Equals(input.CityType))
                ) &&
                (
                    City == input.City ||
                    (City != null &&
                     City.Equals(input.City))
                ) &&
                (
                    LocationType == input.LocationType ||
                    (LocationType != null &&
                     LocationType.Equals(input.LocationType))
                ) &&
                (
                    Location == input.Location ||
                    (Location != null &&
                     Location.Equals(input.Location))
                ) &&
                (
                    StreetType == input.StreetType ||
                    (StreetType != null &&
                     StreetType.Equals(input.StreetType))
                ) &&
                (
                    Street == input.Street ||
                    (Street != null &&
                     Street.Equals(input.Street))
                ) &&
                (
                    House == input.House ||
                    (House != null &&
                     House.Equals(input.House))
                ) &&
                (
                    Housing == input.Housing ||
                    (Housing != null &&
                     Housing.Equals(input.Housing))
                ) &&
                (
                    Building == input.Building ||
                    (Building != null &&
                     Building.Equals(input.Building))
                ) &&
                (
                    ApartmentNumber == input.ApartmentNumber ||
                    (ApartmentNumber != null &&
                     ApartmentNumber.Equals(input.ApartmentNumber))
                ) &&
                (
                    Kladr == input.Kladr ||
                    (Kladr != null &&
                     Kladr.Equals(input.Kladr))
                ) &&
                (
                    Okato == input.Okato ||
                    (Okato != null &&
                     Okato.Equals(input.Okato))
                ) &&
                (
                    AddressType == input.AddressType ||
                    AddressType.Equals(input.AddressType)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Address (string) maxLength
            if (Address != null && Address.Length > 1000) yield return new ValidationResult("Invalid value for Address, length must be less than 1000.", new[] { "Address" });

            // Address (string) minLength
            if (Address != null && Address.Length < 1) yield return new ValidationResult("Invalid value for Address, length must be greater than 1.", new[] { "Address" });

            // Zipcode (string) maxLength
            if (Zipcode != null && Zipcode.Length > 15) yield return new ValidationResult("Invalid value for Zipcode, length must be less than 15.", new[] { "Zipcode" });

            // Zipcode (string) minLength
            if (Zipcode != null && Zipcode.Length < 1) yield return new ValidationResult("Invalid value for Zipcode, length must be greater than 1.", new[] { "Zipcode" });

            // ProvinceType (string) maxLength
            if (ProvinceType != null && ProvinceType.Length > 255)
                yield return new ValidationResult("Invalid value for ProvinceType, length must be less than 255.", new[] { "ProvinceType" });

            // ProvinceType (string) minLength
            if (ProvinceType != null && ProvinceType.Length < 1)
                yield return new ValidationResult("Invalid value for ProvinceType, length must be greater than 1.", new[] { "ProvinceType" });

            // Province (string) maxLength
            if (Province != null && Province.Length > 255) yield return new ValidationResult("Invalid value for Province, length must be less than 255.", new[] { "Province" });

            // Province (string) minLength
            if (Province != null && Province.Length < 1) yield return new ValidationResult("Invalid value for Province, length must be greater than 1.", new[] { "Province" });

            // DistrictType (string) maxLength
            if (DistrictType != null && DistrictType.Length > 255)
                yield return new ValidationResult("Invalid value for DistrictType, length must be less than 255.", new[] { "DistrictType" });

            // DistrictType (string) minLength
            if (DistrictType != null && DistrictType.Length < 1)
                yield return new ValidationResult("Invalid value for DistrictType, length must be greater than 1.", new[] { "DistrictType" });

            // District (string) maxLength
            if (District != null && District.Length > 255) yield return new ValidationResult("Invalid value for District, length must be less than 255.", new[] { "District" });

            // District (string) minLength
            if (District != null && District.Length < 1) yield return new ValidationResult("Invalid value for District, length must be greater than 1.", new[] { "District" });

            // CityType (string) maxLength
            if (CityType != null && CityType.Length > 50) yield return new ValidationResult("Invalid value for CityType, length must be less than 50.", new[] { "CityType" });

            // CityType (string) minLength
            if (CityType != null && CityType.Length < 1) yield return new ValidationResult("Invalid value for CityType, length must be greater than 1.", new[] { "CityType" });

            // City (string) maxLength
            if (City != null && City.Length > 255) yield return new ValidationResult("Invalid value for City, length must be less than 255.", new[] { "City" });

            // City (string) minLength
            if (City != null && City.Length < 1) yield return new ValidationResult("Invalid value for City, length must be greater than 1.", new[] { "City" });

            // LocationType (string) maxLength
            if (LocationType != null && LocationType.Length > 50)
                yield return new ValidationResult("Invalid value for LocationType, length must be less than 50.", new[] { "LocationType" });

            // LocationType (string) minLength
            if (LocationType != null && LocationType.Length < 1)
                yield return new ValidationResult("Invalid value for LocationType, length must be greater than 1.", new[] { "LocationType" });

            // Location (string) maxLength
            if (Location != null && Location.Length > 255) yield return new ValidationResult("Invalid value for Location, length must be less than 255.", new[] { "Location" });

            // Location (string) minLength
            if (Location != null && Location.Length < 1) yield return new ValidationResult("Invalid value for Location, length must be greater than 1.", new[] { "Location" });

            // StreetType (string) maxLength
            if (StreetType != null && StreetType.Length > 50)
                yield return new ValidationResult("Invalid value for StreetType, length must be less than 50.", new[] { "StreetType" });

            // StreetType (string) minLength
            if (StreetType != null && StreetType.Length < 1)
                yield return new ValidationResult("Invalid value for StreetType, length must be greater than 1.", new[] { "StreetType" });

            // Street (string) maxLength
            if (Street != null && Street.Length > 255) yield return new ValidationResult("Invalid value for Street, length must be less than 255.", new[] { "Street" });

            // Street (string) minLength
            if (Street != null && Street.Length < 1) yield return new ValidationResult("Invalid value for Street, length must be greater than 1.", new[] { "Street" });

            // House (string) maxLength
            if (House != null && House.Length > 200) yield return new ValidationResult("Invalid value for House, length must be less than 200.", new[] { "House" });

            // House (string) minLength
            if (House != null && House.Length < 1) yield return new ValidationResult("Invalid value for House, length must be greater than 1.", new[] { "House" });

            // Housing (string) maxLength
            if (Housing != null && Housing.Length > 50) yield return new ValidationResult("Invalid value for Housing, length must be less than 50.", new[] { "Housing" });

            // Housing (string) minLength
            if (Housing != null && Housing.Length < 1) yield return new ValidationResult("Invalid value for Housing, length must be greater than 1.", new[] { "Housing" });

            // Building (string) maxLength
            if (Building != null && Building.Length > 50) yield return new ValidationResult("Invalid value for Building, length must be less than 50.", new[] { "Building" });

            // Building (string) minLength
            if (Building != null && Building.Length < 1) yield return new ValidationResult("Invalid value for Building, length must be greater than 1.", new[] { "Building" });

            // ApartmentNumber (string) maxLength
            if (ApartmentNumber != null && ApartmentNumber.Length > 200)
                yield return new ValidationResult("Invalid value for ApartmentNumber, length must be less than 200.", new[] { "ApartmentNumber" });

            // ApartmentNumber (string) minLength
            if (ApartmentNumber != null && ApartmentNumber.Length < 1)
                yield return new ValidationResult("Invalid value for ApartmentNumber, length must be greater than 1.", new[] { "ApartmentNumber" });

            // Kladr (string) maxLength
            if (Kladr != null && Kladr.Length > 50) yield return new ValidationResult("Invalid value for Kladr, length must be less than 50.", new[] { "Kladr" });

            // Kladr (string) minLength
            if (Kladr != null && Kladr.Length < 1) yield return new ValidationResult("Invalid value for Kladr, length must be greater than 1.", new[] { "Kladr" });

            // Okato (string) maxLength
            if (Okato != null && Okato.Length > 50) yield return new ValidationResult("Invalid value for Okato, length must be less than 50.", new[] { "Okato" });

            // Okato (string) minLength
            if (Okato != null && Okato.Length < 1) yield return new ValidationResult("Invalid value for Okato, length must be greater than 1.", new[] { "Okato" });
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuaranteeAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ProvinceType: ").Append(ProvinceType).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  DistrictType: ").Append(DistrictType).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  CityType: ").Append(CityType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  Housing: ").Append(Housing).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  ApartmentNumber: ").Append(ApartmentNumber).Append("\n");
            sb.Append("  Kladr: ").Append(Kladr).Append("\n");
            sb.Append("  Okato: ").Append(Okato).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GuaranteeAddress);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Address != null) hashCode = hashCode * 59 + Address.GetHashCode();
                hashCode = hashCode * 59 + Country.GetHashCode();
                if (Zipcode != null) hashCode = hashCode * 59 + Zipcode.GetHashCode();
                hashCode = hashCode * 59 + Region.GetHashCode();
                if (ProvinceType != null) hashCode = hashCode * 59 + ProvinceType.GetHashCode();
                if (Province != null) hashCode = hashCode * 59 + Province.GetHashCode();
                if (DistrictType != null) hashCode = hashCode * 59 + DistrictType.GetHashCode();
                if (District != null) hashCode = hashCode * 59 + District.GetHashCode();
                if (CityType != null) hashCode = hashCode * 59 + CityType.GetHashCode();
                if (City != null) hashCode = hashCode * 59 + City.GetHashCode();
                if (LocationType != null) hashCode = hashCode * 59 + LocationType.GetHashCode();
                if (Location != null) hashCode = hashCode * 59 + Location.GetHashCode();
                if (StreetType != null) hashCode = hashCode * 59 + StreetType.GetHashCode();
                if (Street != null) hashCode = hashCode * 59 + Street.GetHashCode();
                if (House != null) hashCode = hashCode * 59 + House.GetHashCode();
                if (Housing != null) hashCode = hashCode * 59 + Housing.GetHashCode();
                if (Building != null) hashCode = hashCode * 59 + Building.GetHashCode();
                if (ApartmentNumber != null) hashCode = hashCode * 59 + ApartmentNumber.GetHashCode();
                if (Kladr != null) hashCode = hashCode * 59 + Kladr.GetHashCode();
                if (Okato != null) hashCode = hashCode * 59 + Okato.GetHashCode();
                hashCode = hashCode * 59 + AddressType.GetHashCode();
                return hashCode;
            }
        }
    }
}