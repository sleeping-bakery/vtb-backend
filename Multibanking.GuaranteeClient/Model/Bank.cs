/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.GuaranteeClient.Client.OpenAPIDateConverter;

namespace Multibanking.GuaranteeClient.Model
{
    /// <summary>
    /// Банк
    /// </summary>
    [DataContract(Name = "Bank")]
    public partial class Bank : IEquatable<Bank>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bank" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Bank() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Bank" /> class.
        /// </summary>
        /// <param name="bik">БИК. Формат: 9 цифр (required).</param>
        /// <param name="corrNumber">Корреспондентский счёт. Формат: 20 цифр (required).</param>
        /// <param name="name">Название Банка (required).</param>
        public Bank(string bik = default(string), string corrNumber = default(string), string name = default(string))
        {
            // to ensure "bik" is required (not null)
            if (bik == null)
            {
                throw new ArgumentNullException("bik is a required property for Bank and cannot be null");
            }
            this.Bik = bik;
            // to ensure "corrNumber" is required (not null)
            if (corrNumber == null)
            {
                throw new ArgumentNullException("corrNumber is a required property for Bank and cannot be null");
            }
            this.CorrNumber = corrNumber;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Bank and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// БИК. Формат: 9 цифр
        /// </summary>
        /// <value>БИК. Формат: 9 цифр</value>
        [DataMember(Name = "bik", IsRequired = true, EmitDefaultValue = true)]
        public string Bik { get; set; }

        /// <summary>
        /// Корреспондентский счёт. Формат: 20 цифр
        /// </summary>
        /// <value>Корреспондентский счёт. Формат: 20 цифр</value>
        [DataMember(Name = "corrNumber", IsRequired = true, EmitDefaultValue = true)]
        public string CorrNumber { get; set; }

        /// <summary>
        /// Название Банка
        /// </summary>
        /// <value>Название Банка</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bank {\n");
            sb.Append("  Bik: ").Append(Bik).Append("\n");
            sb.Append("  CorrNumber: ").Append(CorrNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bank);
        }

        /// <summary>
        /// Returns true if Bank instances are equal
        /// </summary>
        /// <param name="input">Instance of Bank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bank input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bik == input.Bik ||
                    (this.Bik != null &&
                    this.Bik.Equals(input.Bik))
                ) && 
                (
                    this.CorrNumber == input.CorrNumber ||
                    (this.CorrNumber != null &&
                    this.CorrNumber.Equals(input.CorrNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bik != null)
                {
                    hashCode = (hashCode * 59) + this.Bik.GetHashCode();
                }
                if (this.CorrNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CorrNumber.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Bik (string) maxLength
            if (this.Bik != null && this.Bik.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Bik, length must be less than 9.", new [] { "Bik" });
            }

            // Bik (string) minLength
            if (this.Bik != null && this.Bik.Length < 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Bik, length must be greater than 9.", new [] { "Bik" });
            }

            // CorrNumber (string) maxLength
            if (this.CorrNumber != null && this.CorrNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorrNumber, length must be less than 20.", new [] { "CorrNumber" });
            }

            // CorrNumber (string) minLength
            if (this.CorrNumber != null && this.CorrNumber.Length < 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorrNumber, length must be greater than 20.", new [] { "CorrNumber" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
