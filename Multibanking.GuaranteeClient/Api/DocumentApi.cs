/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию 
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Multibanking.GuaranteeClient.Client;
using Multibanking.GuaranteeClient.Model;

namespace Multibanking.GuaranteeClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Подтвердить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Подтвердить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ConfirmDownload(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0);

        /// <summary>
        /// Подтвердить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Подтвердить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConfirmDownloadWithHttpInfo(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0);
        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <remarks>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ExpectUpload(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0);

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <remarks>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExpectUploadWithHttpInfo(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0);
        /// <summary>
        /// Получение информации по загрузке документов заявки
        /// </summary>
        /// <remarks>
        /// Получение информации по загрузке документов заявки
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationDetailsResponseDto</returns>
        ApplicationDetailsResponseDto GetApplicationDetails(string orderId, string xIBMClientID, int operationIndex = 0);

        /// <summary>
        /// Получение информации по загрузке документов заявки
        /// </summary>
        /// <remarks>
        /// Получение информации по загрузке документов заявки
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationDetailsResponseDto</returns>
        ApiResponse<ApplicationDetailsResponseDto> GetApplicationDetailsWithHttpInfo(string orderId, string xIBMClientID, int operationIndex = 0);
        /// <summary>
        /// Запросить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Запросить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentDownloadDto</returns>
        DocumentDownloadDto RequestDownload(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0);

        /// <summary>
        /// Запросить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Запросить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentDownloadDto</returns>
        ApiResponse<DocumentDownloadDto> RequestDownloadWithHttpInfo(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Подтвердить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Подтвердить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConfirmDownloadAsync(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Подтвердить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Подтвердить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConfirmDownloadWithHttpInfoAsync(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <remarks>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExpectUploadAsync(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <remarks>
        /// Ожидать загрузку документа в банк (для систем партнеров)
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExpectUploadWithHttpInfoAsync(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получение информации по загрузке документов заявки
        /// </summary>
        /// <remarks>
        /// Получение информации по загрузке документов заявки
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationDetailsResponseDto</returns>
        System.Threading.Tasks.Task<ApplicationDetailsResponseDto> GetApplicationDetailsAsync(string orderId, string xIBMClientID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение информации по загрузке документов заявки
        /// </summary>
        /// <remarks>
        /// Получение информации по загрузке документов заявки
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationDetailsResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationDetailsResponseDto>> GetApplicationDetailsWithHttpInfoAsync(string orderId, string xIBMClientID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запросить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Запросить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDownloadDto</returns>
        System.Threading.Tasks.Task<DocumentDownloadDto> RequestDownloadAsync(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запросить загрузку документа из банка
        /// </summary>
        /// <remarks>
        /// Запросить загрузку документа из банка
        /// </remarks>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentDownloadDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDownloadDto>> RequestDownloadWithHttpInfoAsync(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuaranteeDocumentApi : IDocumentApiSync, IDocumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GuaranteeDocumentApi : IGuaranteeDocumentApi
    {
        private Multibanking.GuaranteeClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteeDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeDocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteeDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeDocumentApi(string basePath)
        {
            this.Configuration = Multibanking.GuaranteeClient.Client.Configuration.MergeConfigurations(
                Multibanking.GuaranteeClient.Client.GlobalConfiguration.Instance,
                new Multibanking.GuaranteeClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Multibanking.GuaranteeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.GuaranteeClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Multibanking.GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteeDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuaranteeDocumentApi(Multibanking.GuaranteeClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Multibanking.GuaranteeClient.Client.Configuration.MergeConfigurations(
                Multibanking.GuaranteeClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Multibanking.GuaranteeClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.GuaranteeClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Multibanking.GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteeDocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GuaranteeDocumentApi(Multibanking.GuaranteeClient.Client.ISynchronousClient client, Multibanking.GuaranteeClient.Client.IAsynchronousClient asyncClient, Multibanking.GuaranteeClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Multibanking.GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Multibanking.GuaranteeClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Multibanking.GuaranteeClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Multibanking.GuaranteeClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Multibanking.GuaranteeClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Подтвердить загрузку документа из банка Подтвердить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ConfirmDownload(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0)
        {
            ConfirmDownloadWithHttpInfo(xIBMClientID, downloadConfirmDto);
        }

        /// <summary>
        /// Подтвердить загрузку документа из банка Подтвердить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Multibanking.GuaranteeClient.Client.ApiResponse<Object> ConfirmDownloadWithHttpInfo(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->ConfirmDownload");
            }

            // verify the required parameter 'downloadConfirmDto' is set
            if (downloadConfirmDto == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'downloadConfirmDto' when calling GuaranteeDocumentApi->ConfirmDownload");
            }

            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = downloadConfirmDto;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.ConfirmDownload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/documents/downloads/confirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Подтвердить загрузку документа из банка Подтвердить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConfirmDownloadAsync(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ConfirmDownloadWithHttpInfoAsync(xIBMClientID, downloadConfirmDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Подтвердить загрузку документа из банка Подтвердить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadConfirmDto">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Multibanking.GuaranteeClient.Client.ApiResponse<Object>> ConfirmDownloadWithHttpInfoAsync(string xIBMClientID, DownloadConfirmDto downloadConfirmDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->ConfirmDownload");
            }

            // verify the required parameter 'downloadConfirmDto' is set
            if (downloadConfirmDto == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'downloadConfirmDto' when calling GuaranteeDocumentApi->ConfirmDownload");
            }


            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = downloadConfirmDto;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.ConfirmDownload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/documents/downloads/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров) Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ExpectUpload(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0)
        {
            ExpectUploadWithHttpInfo(requestId, xIBMClientID, uploadExpect);
        }

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров) Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Multibanking.GuaranteeClient.Client.ApiResponse<Object> ExpectUploadWithHttpInfo(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->ExpectUpload");
            }

            // verify the required parameter 'uploadExpect' is set
            if (uploadExpect == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'uploadExpect' when calling GuaranteeDocumentApi->ExpectUpload");
            }

            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = uploadExpect;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.ExpectUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/documents/uploads/{requestId}/expect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpectUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров) Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExpectUploadAsync(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ExpectUploadWithHttpInfoAsync(requestId, xIBMClientID, uploadExpect, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Ожидать загрузку документа в банк (для систем партнеров) Ожидать загрузку документа в банк (для систем партнеров)
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">Идентификатор запроса</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="uploadExpect">Запрос на подтверждение загрузки документа из банка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Multibanking.GuaranteeClient.Client.ApiResponse<Object>> ExpectUploadWithHttpInfoAsync(int requestId, string xIBMClientID, UploadExpect uploadExpect, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->ExpectUpload");
            }

            // verify the required parameter 'uploadExpect' is set
            if (uploadExpect == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'uploadExpect' when calling GuaranteeDocumentApi->ExpectUpload");
            }


            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(requestId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = uploadExpect;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.ExpectUpload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/documents/uploads/{requestId}/expect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExpectUpload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение информации по загрузке документов заявки Получение информации по загрузке документов заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationDetailsResponseDto</returns>
        public ApplicationDetailsResponseDto GetApplicationDetails(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            Multibanking.GuaranteeClient.Client.ApiResponse<ApplicationDetailsResponseDto> localVarResponse = GetApplicationDetailsWithHttpInfo(orderId, xIBMClientID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение информации по загрузке документов заявки Получение информации по загрузке документов заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationDetailsResponseDto</returns>
        public Multibanking.GuaranteeClient.Client.ApiResponse<ApplicationDetailsResponseDto> GetApplicationDetailsWithHttpInfo(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeDocumentApi->GetApplicationDetails");
            }

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->GetApplicationDetails");
            }

            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("orderId", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.GetApplicationDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApplicationDetailsResponseDto>("/documents/{orderId}/request-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение информации по загрузке документов заявки Получение информации по загрузке документов заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationDetailsResponseDto</returns>
        public async System.Threading.Tasks.Task<ApplicationDetailsResponseDto> GetApplicationDetailsAsync(string orderId, string xIBMClientID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.GuaranteeClient.Client.ApiResponse<ApplicationDetailsResponseDto> localVarResponse = await GetApplicationDetailsWithHttpInfoAsync(orderId, xIBMClientID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение информации по загрузке документов заявки Получение информации по загрузке документов заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationDetailsResponseDto)</returns>
        public async System.Threading.Tasks.Task<Multibanking.GuaranteeClient.Client.ApiResponse<ApplicationDetailsResponseDto>> GetApplicationDetailsWithHttpInfoAsync(string orderId, string xIBMClientID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeDocumentApi->GetApplicationDetails");
            }

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->GetApplicationDetails");
            }


            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("orderId", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.GetApplicationDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApplicationDetailsResponseDto>("/documents/{orderId}/request-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApplicationDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запросить загрузку документа из банка Запросить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DocumentDownloadDto</returns>
        public DocumentDownloadDto RequestDownload(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0)
        {
            Multibanking.GuaranteeClient.Client.ApiResponse<DocumentDownloadDto> localVarResponse = RequestDownloadWithHttpInfo(xIBMClientID, downloadRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запросить загрузку документа из банка Запросить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DocumentDownloadDto</returns>
        public Multibanking.GuaranteeClient.Client.ApiResponse<DocumentDownloadDto> RequestDownloadWithHttpInfo(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->RequestDownload");
            }

            // verify the required parameter 'downloadRequestDto' is set
            if (downloadRequestDto == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'downloadRequestDto' when calling GuaranteeDocumentApi->RequestDownload");
            }

            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = downloadRequestDto;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.RequestDownload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DocumentDownloadDto>("/documents/downloads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запросить загрузку документа из банка Запросить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDownloadDto</returns>
        public async System.Threading.Tasks.Task<DocumentDownloadDto> RequestDownloadAsync(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.GuaranteeClient.Client.ApiResponse<DocumentDownloadDto> localVarResponse = await RequestDownloadWithHttpInfoAsync(xIBMClientID, downloadRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запросить загрузку документа из банка Запросить загрузку документа из банка
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="downloadRequestDto">Запрос на передачу документа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DocumentDownloadDto)</returns>
        public async System.Threading.Tasks.Task<Multibanking.GuaranteeClient.Client.ApiResponse<DocumentDownloadDto>> RequestDownloadWithHttpInfoAsync(string xIBMClientID, DownloadRequestDto downloadRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeDocumentApi->RequestDownload");
            }

            // verify the required parameter 'downloadRequestDto' is set
            if (downloadRequestDto == null)
            {
                throw new Multibanking.GuaranteeClient.Client.ApiException(400, "Missing required parameter 'downloadRequestDto' when calling GuaranteeDocumentApi->RequestDownload");
            }


            Multibanking.GuaranteeClient.Client.RequestOptions localVarRequestOptions = new Multibanking.GuaranteeClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);
            }

            var localVarAccept = Multibanking.GuaranteeClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", Multibanking.GuaranteeClient.Client.ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = downloadRequestDto;

            localVarRequestOptions.Operation = "GuaranteeDocumentApi.RequestDownload";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DocumentDownloadDto>("/documents/downloads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestDownload", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
