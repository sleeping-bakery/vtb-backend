/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.GuaranteeClient.Client;
using Multibanking.GuaranteeClient.Model;

namespace Multibanking.GuaranteeClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GuaranteeCommentApi : IGuaranteeCommentApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeCommentApi" /> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeCommentApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeCommentApi" /> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeCommentApi(string basePath)
        {
            Configuration = GuaranteeClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeCommentApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuaranteeCommentApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = GuaranteeClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeCommentApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GuaranteeCommentApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Отправка комментария в рамках чата Отправка комментария в рамках чата
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="clientCommentDto">Данные о комментарии и документе в рамках чата с клиентом</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateComment(string orderId, string xIBMClientID, ClientCommentDto clientCommentDto, int operationIndex = 0)
        {
            CreateCommentWithHttpInfo(orderId, xIBMClientID, clientCommentDto);
        }

        /// <summary>
        ///     Отправка комментария в рамках чата Отправка комментария в рамках чата
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="clientCommentDto">Данные о комментарии и документе в рамках чата с клиентом</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> CreateCommentWithHttpInfo(string orderId, string xIBMClientID, ClientCommentDto clientCommentDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeCommentApi->CreateComment");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->CreateComment");

            // verify the required parameter 'clientCommentDto' is set
            if (clientCommentDto == null) throw new ApiException(400, "Missing required parameter 'clientCommentDto' when calling GuaranteeCommentApi->CreateComment");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = clientCommentDto;

            localVarRequestOptions.Operation = "GuaranteeCommentApi.CreateComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<object>("/comment/{orderId}", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateComment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Отправка комментария в рамках чата Отправка комментария в рамках чата
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="clientCommentDto">Данные о комментарии и документе в рамках чата с клиентом</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task CreateCommentAsync(string orderId, string xIBMClientID, ClientCommentDto clientCommentDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            await CreateCommentWithHttpInfoAsync(orderId, xIBMClientID, clientCommentDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Отправка комментария в рамках чата Отправка комментария в рамках чата
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="clientCommentDto">Данные о комментарии и документе в рамках чата с клиентом</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> CreateCommentWithHttpInfoAsync(string orderId, string xIBMClientID, ClientCommentDto clientCommentDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeCommentApi->CreateComment");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->CreateComment");

            // verify the required parameter 'clientCommentDto' is set
            if (clientCommentDto == null) throw new ApiException(400, "Missing required parameter 'clientCommentDto' when calling GuaranteeCommentApi->CreateComment");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = clientCommentDto;

            localVarRequestOptions.Operation = "GuaranteeCommentApi.CreateComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<object>("/comment/{orderId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateComment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получение информации по комментариям сотрудника к заявке Получение информации по комментариям сотрудника к заявке
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderIdCommentDto</returns>
        public OrderIdCommentDto GetComments(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            var localVarResponse = GetCommentsWithHttpInfo(orderId, xIBMClientID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Получение информации по комментариям сотрудника к заявке Получение информации по комментариям сотрудника к заявке
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderIdCommentDto</returns>
        public ApiResponse<OrderIdCommentDto> GetCommentsWithHttpInfo(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeCommentApi->GetComments");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->GetComments");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeCommentApi.GetComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Get<OrderIdCommentDto>("/comments/{orderId}", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("GetComments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получение информации по комментариям сотрудника к заявке Получение информации по комментариям сотрудника к заявке
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderIdCommentDto</returns>
        public async Task<OrderIdCommentDto> GetCommentsAsync(string orderId, string xIBMClientID, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetCommentsWithHttpInfoAsync(orderId, xIBMClientID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Получение информации по комментариям сотрудника к заявке Получение информации по комментариям сотрудника к заявке
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderIdCommentDto)</returns>
        public async Task<ApiResponse<OrderIdCommentDto>> GetCommentsWithHttpInfoAsync(string orderId, string xIBMClientID, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeCommentApi->GetComments");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->GetComments");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeCommentApi.GetComments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<OrderIdCommentDto>("/comments/{orderId}", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("GetComments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получение информации по прочитанным комментариям Получение информации по прочитанным комментариям
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="markReadCommentDto">Список идентификаторов комментариев</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void MarkRead(string xIBMClientID, MarkReadCommentDto markReadCommentDto, int operationIndex = 0)
        {
            MarkReadWithHttpInfo(xIBMClientID, markReadCommentDto);
        }

        /// <summary>
        ///     Получение информации по прочитанным комментариям Получение информации по прочитанным комментариям
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="markReadCommentDto">Список идентификаторов комментариев</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> MarkReadWithHttpInfo(string xIBMClientID, MarkReadCommentDto markReadCommentDto, int operationIndex = 0)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->MarkRead");

            // verify the required parameter 'markReadCommentDto' is set
            if (markReadCommentDto == null) throw new ApiException(400, "Missing required parameter 'markReadCommentDto' when calling GuaranteeCommentApi->MarkRead");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = markReadCommentDto;

            localVarRequestOptions.Operation = "GuaranteeCommentApi.MarkRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Put<object>("/comments/mark-read", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("MarkRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получение информации по прочитанным комментариям Получение информации по прочитанным комментариям
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="markReadCommentDto">Список идентификаторов комментариев</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task MarkReadAsync(string xIBMClientID, MarkReadCommentDto markReadCommentDto, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            await MarkReadWithHttpInfoAsync(xIBMClientID, markReadCommentDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Получение информации по прочитанным комментариям Получение информации по прочитанным комментариям
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="markReadCommentDto">Список идентификаторов комментариев</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> MarkReadWithHttpInfoAsync(string xIBMClientID, MarkReadCommentDto markReadCommentDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeCommentApi->MarkRead");

            // verify the required parameter 'markReadCommentDto' is set
            if (markReadCommentDto == null) throw new ApiException(400, "Missing required parameter 'markReadCommentDto' when calling GuaranteeCommentApi->MarkRead");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = markReadCommentDto;

            localVarRequestOptions.Operation = "GuaranteeCommentApi.MarkRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<object>("/comments/mark-read", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("MarkRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}