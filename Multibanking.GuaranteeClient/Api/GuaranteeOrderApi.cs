/*
 * Система рассмотрения заявок на экспресс-гарантии, полученных от партнеров банка
 *
 * Функционал выдачи экспресс гарантий позволяет реализовать след. сервисы:  - Создание клиентом заявки в личном кабинете на выдачу экспресс-гарантии - Отображение информации о закупке по минимальному набору введенных атрибутов - Загрузка и прикрепление документов к заявке - Формирование заявления на выдачу экспресс-гарантии для подписания клиентом - Подписание клиентом заявления с использованием УНЭП - Отображение в Интернет банке статусов заявки - Получение и передача заявок от партнеров - Создание сотрудником банка заявки на гарантию - Формирование проекта решения по заявке на гарантию
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.GuaranteeClient.Client;
using Multibanking.GuaranteeClient.Model;

namespace Multibanking.GuaranteeClient.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GuaranteeOrderApi : IGuaranteeOrderApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeOrderApi" /> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeOrderApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeOrderApi" /> class.
        /// </summary>
        /// <returns></returns>
        public GuaranteeOrderApi(string basePath)
        {
            Configuration = GuaranteeClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeOrderApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GuaranteeOrderApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = GuaranteeClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="GuaranteeOrderApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GuaranteeOrderApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = GuaranteeClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     Загрузка документов и перевод заявки на предыдущий статус Загрузка документов и перевод заявки на предыдущий статус
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="documentsAppendRequestDto">ДТО для прикрепления списка документов по заявке</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AppendDocuments(string orderId, string xIBMClientID, DocumentsAppendRequestDto documentsAppendRequestDto, int operationIndex = 0)
        {
            AppendDocumentsWithHttpInfo(orderId, xIBMClientID, documentsAppendRequestDto);
        }

        /// <summary>
        ///     Загрузка документов и перевод заявки на предыдущий статус Загрузка документов и перевод заявки на предыдущий статус
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="documentsAppendRequestDto">ДТО для прикрепления списка документов по заявке</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> AppendDocumentsWithHttpInfo(string orderId, string xIBMClientID, DocumentsAppendRequestDto documentsAppendRequestDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->AppendDocuments");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->AppendDocuments");

            // verify the required parameter 'documentsAppendRequestDto' is set
            if (documentsAppendRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'documentsAppendRequestDto' when calling GuaranteeOrderApi->AppendDocuments");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = documentsAppendRequestDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.AppendDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<object>("/orders/{orderId}/append-documents", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("AppendDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Загрузка документов и перевод заявки на предыдущий статус Загрузка документов и перевод заявки на предыдущий статус
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="documentsAppendRequestDto">ДТО для прикрепления списка документов по заявке</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task AppendDocumentsAsync(string orderId, string xIBMClientID, DocumentsAppendRequestDto documentsAppendRequestDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            await AppendDocumentsWithHttpInfoAsync(orderId, xIBMClientID, documentsAppendRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Загрузка документов и перевод заявки на предыдущий статус Загрузка документов и перевод заявки на предыдущий статус
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="documentsAppendRequestDto">ДТО для прикрепления списка документов по заявке</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> AppendDocumentsWithHttpInfoAsync(string orderId, string xIBMClientID, DocumentsAppendRequestDto documentsAppendRequestDto,
            int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->AppendDocuments");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->AppendDocuments");

            // verify the required parameter 'documentsAppendRequestDto' is set
            if (documentsAppendRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'documentsAppendRequestDto' when calling GuaranteeOrderApi->AppendDocuments");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = documentsAppendRequestDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.AppendDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<object>("/orders/{orderId}/append-documents", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("AppendDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Создать заявку Создать заявку
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="order">Заявка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderResponse</returns>
        public OrderResponse CreateOrder(string xIBMClientID, Order order, int operationIndex = 0)
        {
            var localVarResponse = CreateOrderWithHttpInfo(xIBMClientID, order);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Создать заявку Создать заявку
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="order">Заявка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderResponse</returns>
        public ApiResponse<OrderResponse> CreateOrderWithHttpInfo(string xIBMClientID, Order order, int operationIndex = 0)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->CreateOrder");

            // verify the required parameter 'order' is set
            if (order == null) throw new ApiException(400, "Missing required parameter 'order' when calling GuaranteeOrderApi->CreateOrder");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = order;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.CreateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<OrderResponse>("/orders", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Создать заявку Создать заявку
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="order">Заявка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderResponse</returns>
        public async Task<OrderResponse> CreateOrderAsync(string xIBMClientID, Order order, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await CreateOrderWithHttpInfoAsync(xIBMClientID, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Создать заявку Создать заявку
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="order">Заявка</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderResponse)</returns>
        public async Task<ApiResponse<OrderResponse>> CreateOrderWithHttpInfoAsync(string xIBMClientID, Order order, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->CreateOrder");

            // verify the required parameter 'order' is set
            if (order == null) throw new ApiException(400, "Missing required parameter 'order' when calling GuaranteeOrderApi->CreateOrder");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = order;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.CreateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<OrderResponse>("/orders", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Отказ клиента от заявки Отказ клиента от заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="declineOrderDto">DTO с данными на отказ клиента от заявки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeclineByClient(string orderId, string xIBMClientID, DeclineOrderDto declineOrderDto, int operationIndex = 0)
        {
            DeclineByClientWithHttpInfo(orderId, xIBMClientID, declineOrderDto);
        }

        /// <summary>
        ///     Отказ клиента от заявки Отказ клиента от заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="declineOrderDto">DTO с данными на отказ клиента от заявки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeclineByClientWithHttpInfo(string orderId, string xIBMClientID, DeclineOrderDto declineOrderDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->DeclineByClient");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->DeclineByClient");

            // verify the required parameter 'declineOrderDto' is set
            if (declineOrderDto == null) throw new ApiException(400, "Missing required parameter 'declineOrderDto' when calling GuaranteeOrderApi->DeclineByClient");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = declineOrderDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.DeclineByClient";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<object>("/orders/{orderId}/decline-by-client", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("DeclineByClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Отказ клиента от заявки Отказ клиента от заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="declineOrderDto">DTO с данными на отказ клиента от заявки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeclineByClientAsync(string orderId, string xIBMClientID, DeclineOrderDto declineOrderDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            await DeclineByClientWithHttpInfoAsync(orderId, xIBMClientID, declineOrderDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Отказ клиента от заявки Отказ клиента от заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="declineOrderDto">DTO с данными на отказ клиента от заявки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> DeclineByClientWithHttpInfoAsync(string orderId, string xIBMClientID, DeclineOrderDto declineOrderDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->DeclineByClient");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->DeclineByClient");

            // verify the required parameter 'declineOrderDto' is set
            if (declineOrderDto == null) throw new ApiException(400, "Missing required parameter 'declineOrderDto' when calling GuaranteeOrderApi->DeclineByClient");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = declineOrderDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.DeclineByClient";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<object>("/orders/{orderId}/decline-by-client", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("DeclineByClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получить статус заявки Получить статус заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderStatus</returns>
        public OrderStatus GetOrder(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            var localVarResponse = GetOrderWithHttpInfo(orderId, xIBMClientID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Получить статус заявки Получить статус заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        public ApiResponse<OrderStatus> GetOrderWithHttpInfo(string orderId, string xIBMClientID, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->GetOrder");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->GetOrder");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeOrderApi.GetOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Get<OrderStatus>("/orders/{orderId}", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Получить статус заявки Получить статус заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderStatus</returns>
        public async Task<OrderStatus> GetOrderAsync(string orderId, string xIBMClientID, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            var localVarResponse = await GetOrderWithHttpInfoAsync(orderId, xIBMClientID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Получить статус заявки Получить статус заявки
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        public async Task<ApiResponse<OrderStatus>> GetOrderWithHttpInfoAsync(string orderId, string xIBMClientID, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->GetOrder");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->GetOrder");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter

            localVarRequestOptions.Operation = "GuaranteeOrderApi.GetOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<OrderStatus>("/orders/{orderId}", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Запрос скидки к ранее одобренной заявке на банковскую гарантию Запрос скидки к ранее одобренной заявке на банковскую гарантию
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="discountRequestDto">ДТО для запроса скидки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DiscountResponse</returns>
        public DiscountResponse RequestDiscount(string orderId, string xIBMClientID, DiscountRequestDto discountRequestDto, int operationIndex = 0)
        {
            var localVarResponse = RequestDiscountWithHttpInfo(orderId, xIBMClientID, discountRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Запрос скидки к ранее одобренной заявке на банковскую гарантию Запрос скидки к ранее одобренной заявке на банковскую гарантию
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="discountRequestDto">ДТО для запроса скидки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DiscountResponse</returns>
        public ApiResponse<DiscountResponse> RequestDiscountWithHttpInfo(string orderId, string xIBMClientID, DiscountRequestDto discountRequestDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->RequestDiscount");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->RequestDiscount");

            // verify the required parameter 'discountRequestDto' is set
            if (discountRequestDto == null) throw new ApiException(400, "Missing required parameter 'discountRequestDto' when calling GuaranteeOrderApi->RequestDiscount");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = discountRequestDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.RequestDiscount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<DiscountResponse>("/orders/{orderId}/request-discount", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("RequestDiscount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Запрос скидки к ранее одобренной заявке на банковскую гарантию Запрос скидки к ранее одобренной заявке на банковскую гарантию
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="discountRequestDto">ДТО для запроса скидки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DiscountResponse</returns>
        public async Task<DiscountResponse> RequestDiscountAsync(string orderId, string xIBMClientID, DiscountRequestDto discountRequestDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            var localVarResponse = await RequestDiscountWithHttpInfoAsync(orderId, xIBMClientID, discountRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     Запрос скидки к ранее одобренной заявке на банковскую гарантию Запрос скидки к ранее одобренной заявке на банковскую гарантию
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="discountRequestDto">ДТО для запроса скидки</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DiscountResponse)</returns>
        public async Task<ApiResponse<DiscountResponse>> RequestDiscountWithHttpInfoAsync(string orderId, string xIBMClientID, DiscountRequestDto discountRequestDto,
            int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->RequestDiscount");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->RequestDiscount");

            // verify the required parameter 'discountRequestDto' is set
            if (discountRequestDto == null) throw new ApiException(400, "Missing required parameter 'discountRequestDto' when calling GuaranteeOrderApi->RequestDiscount");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = discountRequestDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.RequestDiscount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient
                .PostAsync<DiscountResponse>("/orders/{orderId}/request-discount", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("RequestDiscount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Отправка комментария Отправка комментария
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="commentDto">DTO с текстовым комментарием, с сылкой на документ от клиента с правками/замечаниями</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendComment(string orderId, string xIBMClientID, CommentDto commentDto, int operationIndex = 0)
        {
            SendCommentWithHttpInfo(orderId, xIBMClientID, commentDto);
        }

        /// <summary>
        ///     Отправка комментария Отправка комментария
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="commentDto">DTO с текстовым комментарием, с сылкой на документ от клиента с правками/замечаниями</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> SendCommentWithHttpInfo(string orderId, string xIBMClientID, CommentDto commentDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->SendComment");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->SendComment");

            // verify the required parameter 'commentDto' is set
            if (commentDto == null) throw new ApiException(400, "Missing required parameter 'commentDto' when calling GuaranteeOrderApi->SendComment");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = commentDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.SendComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Post<object>("/orders/{orderId}/send-comment", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("SendComment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Отправка комментария Отправка комментария
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="commentDto">DTO с текстовым комментарием, с сылкой на документ от клиента с правками/замечаниями</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task SendCommentAsync(string orderId, string xIBMClientID, CommentDto commentDto, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            await SendCommentWithHttpInfoAsync(orderId, xIBMClientID, commentDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Отправка комментария Отправка комментария
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="commentDto">DTO с текстовым комментарием, с сылкой на документ от клиента с правками/замечаниями</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> SendCommentWithHttpInfoAsync(string orderId, string xIBMClientID, CommentDto commentDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->SendComment");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->SendComment");

            // verify the required parameter 'commentDto' is set
            if (commentDto == null) throw new ApiException(400, "Missing required parameter 'commentDto' when calling GuaranteeOrderApi->SendComment");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = commentDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.SendComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<object>("/orders/{orderId}/send-comment", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("SendComment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Передача подписанной клиентом оферты Передача подписанной клиентом оферты
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="offerDto">Данные оферты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SignOffer(string orderId, string xIBMClientID, OfferDto offerDto, int operationIndex = 0)
        {
            SignOfferWithHttpInfo(orderId, xIBMClientID, offerDto);
        }

        /// <summary>
        ///     Передача подписанной клиентом оферты Передача подписанной клиентом оферты
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="offerDto">Данные оферты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> SignOfferWithHttpInfo(string orderId, string xIBMClientID, OfferDto offerDto, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->SignOffer");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->SignOffer");

            // verify the required parameter 'offerDto' is set
            if (offerDto == null) throw new ApiException(400, "Missing required parameter 'offerDto' when calling GuaranteeOrderApi->SignOffer");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = offerDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.SignOffer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = Client.Put<object>("/orders/{orderId}/sign-offer", localVarRequestOptions, Configuration);
            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("SignOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Передача подписанной клиентом оферты Передача подписанной клиентом оферты
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="offerDto">Данные оферты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task SignOfferAsync(string orderId, string xIBMClientID, OfferDto offerDto, int operationIndex = 0, CancellationToken cancellationToken = default)
        {
            await SignOfferWithHttpInfoAsync(orderId, xIBMClientID, offerDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///     Передача подписанной клиентом оферты Передача подписанной клиентом оферты
        /// </summary>
        /// <exception cref="Multibanking.GuaranteeClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Идентификатор заявки</param>
        /// <param name="xIBMClientID">Заголовок запроса, содержащий client_id партнера</param>
        /// <param name="offerDto">Данные оферты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<object>> SignOfferWithHttpInfoAsync(string orderId, string xIBMClientID, OfferDto offerDto, int operationIndex = 0,
            CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null) throw new ApiException(400, "Missing required parameter 'orderId' when calling GuaranteeOrderApi->SignOffer");

            // verify the required parameter 'xIBMClientID' is set
            if (xIBMClientID == null) throw new ApiException(400, "Missing required parameter 'xIBMClientID' when calling GuaranteeOrderApi->SignOffer");

            // verify the required parameter 'offerDto' is set
            if (offerDto == null) throw new ApiException(400, "Missing required parameter 'offerDto' when calling GuaranteeOrderApi->SignOffer");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-FileUploadType", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("orderId", ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-ID", ClientUtils.ParameterToString(xIBMClientID)); // header parameter
            localVarRequestOptions.Data = offerDto;

            localVarRequestOptions.Operation = "GuaranteeOrderApi.SignOffer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<object>("/orders/{orderId}/sign-offer", localVarRequestOptions, Configuration, cancellationToken)
                .ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("SignOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}