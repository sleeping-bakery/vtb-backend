/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UnidentifiedPaymentClient.Model;

/// <summary>
///     Вспомогательные данные, предоставленные СППУ, при запросе SCA
/// </summary>
[DataContract(Name = "SCASupportDataComplexType")]
public class SCASupportDataComplexType : IEquatable<SCASupportDataComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="SCASupportDataComplexType" /> class.
    /// </summary>
    /// <param name="requestedSCAExemptionType">Поле позволяет СППУ запрашивать конкретное исключение SCA для инициирования платежа..</param>
    /// <param name="appliedAuthenticationApproach">Поле показывает, подвергался ли Пользователь SCA, выполняемый СППУ..</param>
    /// <param name="referencePaymentOrderId">Детальное описание причины статуса платежа..</param>
    public SCASupportDataComplexType(SCAExemptionTypeStaticType? requestedSCAExemptionType = default,
        AppliedAuthenticationApproachStaticType? appliedAuthenticationApproach = default, string referencePaymentOrderId = default)
    {
        RequestedSCAExemptionType = requestedSCAExemptionType;
        AppliedAuthenticationApproach = appliedAuthenticationApproach;
        ReferencePaymentOrderId = referencePaymentOrderId;
    }

    /// <summary>
    ///     Поле позволяет СППУ запрашивать конкретное исключение SCA для инициирования платежа.
    /// </summary>
    /// <value>Поле позволяет СППУ запрашивать конкретное исключение SCA для инициирования платежа.</value>
    [DataMember(Name = "requestedSCAExemptionType", EmitDefaultValue = false)]
    public SCAExemptionTypeStaticType? RequestedSCAExemptionType { get; set; }

    /// <summary>
    ///     Поле показывает, подвергался ли Пользователь SCA, выполняемый СППУ.
    /// </summary>
    /// <value>Поле показывает, подвергался ли Пользователь SCA, выполняемый СППУ.</value>
    [DataMember(Name = "appliedAuthenticationApproach", EmitDefaultValue = false)]
    public AppliedAuthenticationApproachStaticType? AppliedAuthenticationApproach { get; set; }

    /// <summary>
    ///     Детальное описание причины статуса платежа.
    /// </summary>
    /// <value>Детальное описание причины статуса платежа.</value>
    [DataMember(Name = "referencePaymentOrderId", EmitDefaultValue = false)]
    public string ReferencePaymentOrderId { get; set; }

    /// <summary>
    ///     Returns true if SCASupportDataComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of SCASupportDataComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SCASupportDataComplexType input)
    {
        if (input == null) return false;
        return
            (
                RequestedSCAExemptionType == input.RequestedSCAExemptionType ||
                RequestedSCAExemptionType.Equals(input.RequestedSCAExemptionType)
            ) &&
            (
                AppliedAuthenticationApproach == input.AppliedAuthenticationApproach ||
                AppliedAuthenticationApproach.Equals(input.AppliedAuthenticationApproach)
            ) &&
            (
                ReferencePaymentOrderId == input.ReferencePaymentOrderId ||
                (ReferencePaymentOrderId != null &&
                 ReferencePaymentOrderId.Equals(input.ReferencePaymentOrderId))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // ReferencePaymentOrderId (string) maxLength
        if (ReferencePaymentOrderId != null && ReferencePaymentOrderId.Length > 128)
            yield return new ValidationResult("Invalid value for ReferencePaymentOrderId, length must be less than 128.", new[] { "ReferencePaymentOrderId" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SCASupportDataComplexType {\n");
        sb.Append("  RequestedSCAExemptionType: ").Append(RequestedSCAExemptionType).Append("\n");
        sb.Append("  AppliedAuthenticationApproach: ").Append(AppliedAuthenticationApproach).Append("\n");
        sb.Append("  ReferencePaymentOrderId: ").Append(ReferencePaymentOrderId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as SCASupportDataComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + RequestedSCAExemptionType.GetHashCode();
            hashCode = hashCode * 59 + AppliedAuthenticationApproach.GetHashCode();
            if (ReferencePaymentOrderId != null) hashCode = hashCode * 59 + ReferencePaymentOrderId.GetHashCode();
            return hashCode;
        }
    }
}