/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

namespace Multibanking.UnidentifiedPaymentClient.Model;

/// <summary>
///     Раздел Risk отправляется инициатором в ППУ, используется для указания дополнительных деталей для оценки рисков при проведении платежей.
/// </summary>
[DataContract(Name = "ConsentRequestComplexType_Risk")]
public class ConsentRequestComplexTypeRisk : IEquatable<ConsentRequestComplexTypeRisk>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ConsentRequestComplexTypeRisk" /> class.
    /// </summary>
    /// <param name="paymentContextCode">paymentContextCode.</param>
    /// <param name="merchantCategoryCode">merchantCategoryCode.</param>
    /// <param name="merchantCustomerIdentification">merchantCustomerIdentification.</param>
    /// <param name="deliveryAddress">deliveryAddress.</param>
    public ConsentRequestComplexTypeRisk(PaymentContextStaticType? paymentContextCode = default, string merchantCategoryCode = default,
        string merchantCustomerIdentification = default, PostalAddress deliveryAddress = default)
    {
        PaymentContextCode = paymentContextCode;
        MerchantCategoryCode = merchantCategoryCode;
        MerchantCustomerIdentification = merchantCustomerIdentification;
        DeliveryAddress = deliveryAddress;
    }

    /// <summary>
    ///     Gets or Sets PaymentContextCode
    /// </summary>
    [DataMember(Name = "paymentContextCode", EmitDefaultValue = false)]
    public PaymentContextStaticType? PaymentContextCode { get; set; }

    /// <summary>
    ///     Gets or Sets MerchantCategoryCode
    /// </summary>
    [DataMember(Name = "merchantCategoryCode", EmitDefaultValue = false)]
    public string MerchantCategoryCode { get; set; }

    /// <summary>
    ///     Gets or Sets MerchantCustomerIdentification
    /// </summary>
    [DataMember(Name = "merchantCustomerIdentification", EmitDefaultValue = false)]
    public string MerchantCustomerIdentification { get; set; }

    /// <summary>
    ///     Gets or Sets DeliveryAddress
    /// </summary>
    [DataMember(Name = "DeliveryAddress", EmitDefaultValue = false)]
    public PostalAddress DeliveryAddress { get; set; }

    /// <summary>
    ///     Returns true if ConsentRequestComplexTypeRisk instances are equal
    /// </summary>
    /// <param name="input">Instance of ConsentRequestComplexTypeRisk to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ConsentRequestComplexTypeRisk input)
    {
        if (input == null) return false;
        return
            (
                PaymentContextCode == input.PaymentContextCode ||
                PaymentContextCode.Equals(input.PaymentContextCode)
            ) &&
            (
                MerchantCategoryCode == input.MerchantCategoryCode ||
                (MerchantCategoryCode != null &&
                 MerchantCategoryCode.Equals(input.MerchantCategoryCode))
            ) &&
            (
                MerchantCustomerIdentification == input.MerchantCustomerIdentification ||
                (MerchantCustomerIdentification != null &&
                 MerchantCustomerIdentification.Equals(input.MerchantCustomerIdentification))
            ) &&
            (
                DeliveryAddress == input.DeliveryAddress ||
                (DeliveryAddress != null &&
                 DeliveryAddress.Equals(input.DeliveryAddress))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // MerchantCategoryCode (string) pattern
        var regexMerchantCategoryCode = new Regex(@"^\\d{3,4}$", RegexOptions.CultureInvariant);
        if (false == regexMerchantCategoryCode.Match(MerchantCategoryCode).Success)
            yield return new ValidationResult("Invalid value for MerchantCategoryCode, must match a pattern of " + regexMerchantCategoryCode, new[] { "MerchantCategoryCode" });

        // MerchantCustomerIdentification (string) maxLength
        if (MerchantCustomerIdentification != null && MerchantCustomerIdentification.Length > 70)
            yield return new ValidationResult("Invalid value for MerchantCustomerIdentification, length must be less than 70.", new[] { "MerchantCustomerIdentification" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ConsentRequestComplexTypeRisk {\n");
        sb.Append("  PaymentContextCode: ").Append(PaymentContextCode).Append("\n");
        sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
        sb.Append("  MerchantCustomerIdentification: ").Append(MerchantCustomerIdentification).Append("\n");
        sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ConsentRequestComplexTypeRisk);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + PaymentContextCode.GetHashCode();
            if (MerchantCategoryCode != null) hashCode = hashCode * 59 + MerchantCategoryCode.GetHashCode();
            if (MerchantCustomerIdentification != null) hashCode = hashCode * 59 + MerchantCustomerIdentification.GetHashCode();
            if (DeliveryAddress != null) hashCode = hashCode * 59 + DeliveryAddress.GetHashCode();
            return hashCode;
        }
    }
}