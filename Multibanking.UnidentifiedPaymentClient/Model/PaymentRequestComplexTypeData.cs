/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UnidentifiedPaymentClient.Model;

/// <summary>
///     PaymentRequestComplexTypeData
/// </summary>
[DataContract(Name = "PaymentRequestComplexType_Data")]
public class PaymentRequestComplexTypeData : IEquatable<PaymentRequestComplexTypeData>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentRequestComplexTypeData" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected PaymentRequestComplexTypeData()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentRequestComplexTypeData" /> class.
    /// </summary>
    /// <param name="consentId">Идентификатор ресурса согласия на проведение платежа, присвоенный на стороне ППУ. (required).</param>
    /// <param name="initiation">initiation (required).</param>
    public PaymentRequestComplexTypeData(string consentId = default, DataConsentRequestComplexTypeInitiation initiation = default)
    {
        // to ensure "consentId" is required (not null)
        if (consentId == null) throw new ArgumentNullException("consentId is a required property for PaymentRequestComplexTypeData and cannot be null");
        ConsentId = consentId;
        // to ensure "initiation" is required (not null)
        if (initiation == null) throw new ArgumentNullException("initiation is a required property for PaymentRequestComplexTypeData and cannot be null");
        Initiation = initiation;
    }

    /// <summary>
    ///     Идентификатор ресурса согласия на проведение платежа, присвоенный на стороне ППУ.
    /// </summary>
    /// <value>Идентификатор ресурса согласия на проведение платежа, присвоенный на стороне ППУ.</value>
    [DataMember(Name = "consentId", IsRequired = true, EmitDefaultValue = true)]
    public string ConsentId { get; set; }

    /// <summary>
    ///     Gets or Sets Initiation
    /// </summary>
    [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
    public DataConsentRequestComplexTypeInitiation Initiation { get; set; }

    /// <summary>
    ///     Returns true if PaymentRequestComplexTypeData instances are equal
    /// </summary>
    /// <param name="input">Instance of PaymentRequestComplexTypeData to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PaymentRequestComplexTypeData input)
    {
        if (input == null) return false;
        return
            (
                ConsentId == input.ConsentId ||
                (ConsentId != null &&
                 ConsentId.Equals(input.ConsentId))
            ) &&
            (
                Initiation == input.Initiation ||
                (Initiation != null &&
                 Initiation.Equals(input.Initiation))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // ConsentId (string) maxLength
        if (ConsentId != null && ConsentId.Length > 128) yield return new ValidationResult("Invalid value for ConsentId, length must be less than 128.", new[] { "ConsentId" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PaymentRequestComplexTypeData {\n");
        sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
        sb.Append("  Initiation: ").Append(Initiation).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PaymentRequestComplexTypeData);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (ConsentId != null) hashCode = hashCode * 59 + ConsentId.GetHashCode();
            if (Initiation != null) hashCode = hashCode * 59 + Initiation.GetHashCode();
            return hashCode;
        }
    }
}