/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// Запрос типа авторизации от СППУ.
    /// </summary>
    [DataContract(Name = "AuthorisationComplexType")]
    public partial class AuthorisationComplexType : IEquatable<AuthorisationComplexType>, IValidatableObject
    {

        /// <summary>
        /// Сумма комиссии
        /// </summary>
        /// <value>Сумма комиссии</value>
        [DataMember(Name = "authorisationType", IsRequired = true, EmitDefaultValue = true)]
        public AuthorisationStaticType AuthorisationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisationComplexType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorisationComplexType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorisationComplexType" /> class.
        /// </summary>
        /// <param name="authorisationType">Сумма комиссии (required).</param>
        /// <param name="completionDateTime">Дата и время, когда запрашиваемый поток авторизации завершается..</param>
        public AuthorisationComplexType(AuthorisationStaticType authorisationType = default(AuthorisationStaticType), DateTime completionDateTime = default(DateTime))
        {
            this.AuthorisationType = authorisationType;
            this.CompletionDateTime = completionDateTime;
        }

        /// <summary>
        /// Дата и время, когда запрашиваемый поток авторизации завершается.
        /// </summary>
        /// <value>Дата и время, когда запрашиваемый поток авторизации завершается.</value>
        [DataMember(Name = "completionDateTime", EmitDefaultValue = false)]
        public DateTime CompletionDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorisationComplexType {\n");
            sb.Append("  AuthorisationType: ").Append(AuthorisationType).Append("\n");
            sb.Append("  CompletionDateTime: ").Append(CompletionDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorisationComplexType);
        }

        /// <summary>
        /// Returns true if AuthorisationComplexType instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorisationComplexType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorisationComplexType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorisationType == input.AuthorisationType ||
                    this.AuthorisationType.Equals(input.AuthorisationType)
                ) && 
                (
                    this.CompletionDateTime == input.CompletionDateTime ||
                    (this.CompletionDateTime != null &&
                    this.CompletionDateTime.Equals(input.CompletionDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AuthorisationType.GetHashCode();
                if (this.CompletionDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CompletionDateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
