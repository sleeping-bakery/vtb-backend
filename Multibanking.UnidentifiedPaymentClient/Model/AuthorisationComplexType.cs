/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UnidentifiedPaymentClient.Model;

/// <summary>
///     Запрос типа авторизации от СППУ.
/// </summary>
[DataContract(Name = "AuthorisationComplexType")]
public class AuthorisationComplexType : IEquatable<AuthorisationComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="AuthorisationComplexType" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected AuthorisationComplexType()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AuthorisationComplexType" /> class.
    /// </summary>
    /// <param name="authorisationType">Сумма комиссии (required).</param>
    /// <param name="completionDateTime">Дата и время, когда запрашиваемый поток авторизации завершается..</param>
    public AuthorisationComplexType(AuthorisationStaticType authorisationType = default, DateTime completionDateTime = default)
    {
        AuthorisationType = authorisationType;
        CompletionDateTime = completionDateTime;
    }

    /// <summary>
    ///     Сумма комиссии
    /// </summary>
    /// <value>Сумма комиссии</value>
    [DataMember(Name = "authorisationType", IsRequired = true, EmitDefaultValue = true)]
    public AuthorisationStaticType AuthorisationType { get; set; }

    /// <summary>
    ///     Дата и время, когда запрашиваемый поток авторизации завершается.
    /// </summary>
    /// <value>Дата и время, когда запрашиваемый поток авторизации завершается.</value>
    [DataMember(Name = "completionDateTime", EmitDefaultValue = false)]
    public DateTime CompletionDateTime { get; set; }

    /// <summary>
    ///     Returns true if AuthorisationComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of AuthorisationComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(AuthorisationComplexType input)
    {
        if (input == null) return false;
        return
            (
                AuthorisationType == input.AuthorisationType ||
                AuthorisationType.Equals(input.AuthorisationType)
            ) &&
            (
                CompletionDateTime == input.CompletionDateTime ||
                (CompletionDateTime != null &&
                 CompletionDateTime.Equals(input.CompletionDateTime))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AuthorisationComplexType {\n");
        sb.Append("  AuthorisationType: ").Append(AuthorisationType).Append("\n");
        sb.Append("  CompletionDateTime: ").Append(CompletionDateTime).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as AuthorisationComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + AuthorisationType.GetHashCode();
            if (CompletionDateTime != null) hashCode = hashCode * 59 + CompletionDateTime.GetHashCode();
            return hashCode;
        }
    }
}