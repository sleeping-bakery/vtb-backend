/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// Полезная нагрузка отправляется инициирующей стороной в ППУ. Используется для запроса перевода средств со счета плательщика на счет получателя для одиночного внутреннего платежа.
    /// </summary>
    [DataContract(Name = "DataConsentRequestComplexType_Initiation")]
    public partial class DataConsentRequestComplexTypeInitiation : IEquatable<DataConsentRequestComplexTypeInitiation>, IValidatableObject
    {

        /// <summary>
        /// Этот элемент используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания.
        /// </summary>
        /// <value>Этот элемент используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания.</value>
        [DataMember(Name = "localInstrument", EmitDefaultValue = false)]
        public ExternalLocalInstrument1Code? LocalInstrument { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestComplexTypeInitiation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataConsentRequestComplexTypeInitiation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestComplexTypeInitiation" /> class.
        /// </summary>
        /// <param name="instructionIdentification">Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции. (required).</param>
        /// <param name="endToEndIdentification">Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с транзакцией. (required).</param>
        /// <param name="localInstrument">Этот элемент используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания..</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="creditorParty">creditorParty.</param>
        /// <param name="creditorAgent">creditorAgent.</param>
        /// <param name="creditorAccount">creditorAccount (required).</param>
        /// <param name="remittanceInformation">remittanceInformation.</param>
        public DataConsentRequestComplexTypeInitiation(string instructionIdentification = default(string), string endToEndIdentification = default(string), ExternalLocalInstrument1Code? localInstrument = default(ExternalLocalInstrument1Code?), InitiationComplexTypeInstructedAmount instructedAmount = default(InitiationComplexTypeInstructedAmount), InitiationComplexTypeDebtorAccount debtorAccount = default(InitiationComplexTypeDebtorAccount), InitiationComplexTypeCreditorParty creditorParty = default(InitiationComplexTypeCreditorParty), InitiationComplexTypeCreditorAgent creditorAgent = default(InitiationComplexTypeCreditorAgent), InitiationComplexTypeCreditorAccount creditorAccount = default(InitiationComplexTypeCreditorAccount), InitiationComplexTypeRemittanceInformation remittanceInformation = default(InitiationComplexTypeRemittanceInformation))
        {
            // to ensure "instructionIdentification" is required (not null)
            if (instructionIdentification == null)
            {
                throw new ArgumentNullException("instructionIdentification is a required property for DataConsentRequestComplexTypeInitiation and cannot be null");
            }
            this.InstructionIdentification = instructionIdentification;
            // to ensure "endToEndIdentification" is required (not null)
            if (endToEndIdentification == null)
            {
                throw new ArgumentNullException("endToEndIdentification is a required property for DataConsentRequestComplexTypeInitiation and cannot be null");
            }
            this.EndToEndIdentification = endToEndIdentification;
            // to ensure "instructedAmount" is required (not null)
            if (instructedAmount == null)
            {
                throw new ArgumentNullException("instructedAmount is a required property for DataConsentRequestComplexTypeInitiation and cannot be null");
            }
            this.InstructedAmount = instructedAmount;
            // to ensure "creditorAccount" is required (not null)
            if (creditorAccount == null)
            {
                throw new ArgumentNullException("creditorAccount is a required property for DataConsentRequestComplexTypeInitiation and cannot be null");
            }
            this.CreditorAccount = creditorAccount;
            this.LocalInstrument = localInstrument;
            this.DebtorAccount = debtorAccount;
            this.CreditorParty = creditorParty;
            this.CreditorAgent = creditorAgent;
            this.RemittanceInformation = remittanceInformation;
        }

        /// <summary>
        /// Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции.
        /// </summary>
        /// <value>Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции.</value>
        [DataMember(Name = "instructionIdentification", IsRequired = true, EmitDefaultValue = true)]
        public string InstructionIdentification { get; set; }

        /// <summary>
        /// Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с транзакцией.
        /// </summary>
        /// <value>Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с транзакцией.</value>
        [DataMember(Name = "endToEndIdentification", IsRequired = true, EmitDefaultValue = true)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "InstructedAmount", IsRequired = true, EmitDefaultValue = true)]
        public InitiationComplexTypeInstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
        public InitiationComplexTypeDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorParty
        /// </summary>
        [DataMember(Name = "CreditorParty", EmitDefaultValue = false)]
        public InitiationComplexTypeCreditorParty CreditorParty { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgent
        /// </summary>
        [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
        public InitiationComplexTypeCreditorAgent CreditorAgent { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name = "CreditorAccount", IsRequired = true, EmitDefaultValue = true)]
        public InitiationComplexTypeCreditorAccount CreditorAccount { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name = "RemittanceInformation", EmitDefaultValue = false)]
        public InitiationComplexTypeRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentRequestComplexTypeInitiation {\n");
            sb.Append("  InstructionIdentification: ").Append(InstructionIdentification).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  LocalInstrument: ").Append(LocalInstrument).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  CreditorParty: ").Append(CreditorParty).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentRequestComplexTypeInitiation);
        }

        /// <summary>
        /// Returns true if DataConsentRequestComplexTypeInitiation instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentRequestComplexTypeInitiation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentRequestComplexTypeInitiation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstructionIdentification == input.InstructionIdentification ||
                    (this.InstructionIdentification != null &&
                    this.InstructionIdentification.Equals(input.InstructionIdentification))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.LocalInstrument == input.LocalInstrument ||
                    this.LocalInstrument.Equals(input.LocalInstrument)
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.CreditorParty == input.CreditorParty ||
                    (this.CreditorParty != null &&
                    this.CreditorParty.Equals(input.CreditorParty))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstructionIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionIdentification.GetHashCode();
                }
                if (this.EndToEndIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.EndToEndIdentification.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalInstrument.GetHashCode();
                if (this.InstructedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InstructedAmount.GetHashCode();
                }
                if (this.DebtorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAccount.GetHashCode();
                }
                if (this.CreditorParty != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorParty.GetHashCode();
                }
                if (this.CreditorAgent != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAgent.GetHashCode();
                }
                if (this.CreditorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAccount.GetHashCode();
                }
                if (this.RemittanceInformation != null)
                {
                    hashCode = (hashCode * 59) + this.RemittanceInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // InstructionIdentification (string) maxLength
            if (this.InstructionIdentification != null && this.InstructionIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be less than 35.", new [] { "InstructionIdentification" });
            }

            // EndToEndIdentification (string) maxLength
            if (this.EndToEndIdentification != null && this.EndToEndIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new [] { "EndToEndIdentification" });
            }

            yield break;
        }
    }

}
