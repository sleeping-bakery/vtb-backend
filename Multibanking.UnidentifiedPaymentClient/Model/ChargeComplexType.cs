/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// Набор элементов, используемый для предоставления деталей о плате за инициацию платежа. Сколько будет стоит для пользователя проведение платежа.
    /// </summary>
    [DataContract(Name = "ChargeComplexType")]
    public partial class ChargeComplexType : IEquatable<ChargeComplexType>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChargeBearer
        /// </summary>
        [DataMember(Name = "chargeBearer", IsRequired = true, EmitDefaultValue = true)]
        public ChargeBearerType1Code ChargeBearer { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ExternalChargeType1Code Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeComplexType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeComplexType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeComplexType" /> class.
        /// </summary>
        /// <param name="chargeBearer">chargeBearer (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="amount">amount (required).</param>
        public ChargeComplexType(ChargeBearerType1Code chargeBearer = default(ChargeBearerType1Code), ExternalChargeType1Code type = default(ExternalChargeType1Code), ActiveOrHistoricCurrencyAndAmount amount = default(ActiveOrHistoricCurrencyAndAmount))
        {
            this.ChargeBearer = chargeBearer;
            this.Type = type;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for ChargeComplexType and cannot be null");
            }
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
        public ActiveOrHistoricCurrencyAndAmount Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeComplexType {\n");
            sb.Append("  ChargeBearer: ").Append(ChargeBearer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeComplexType);
        }

        /// <summary>
        /// Returns true if ChargeComplexType instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeComplexType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeComplexType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChargeBearer == input.ChargeBearer ||
                    this.ChargeBearer.Equals(input.ChargeBearer)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ChargeBearer.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
