/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// Детали статуса оплаты.
    /// </summary>
    [DataContract(Name = "PaymentDetailsComplexType_StatusDetail")]
    public partial class PaymentDetailsComplexTypeStatusDetail : IEquatable<PaymentDetailsComplexTypeStatusDetail>, IValidatableObject
    {

        /// <summary>
        /// Инструмент для сообщества пользователей. Используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания.
        /// </summary>
        /// <value>Инструмент для сообщества пользователей. Используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания.</value>
        [DataMember(Name = "localInstrument", EmitDefaultValue = false)]
        public ExternalPaymentTransactionStatus1Code? LocalInstrument { get; set; }

        /// <summary>
        /// Код причины статуса платежа.
        /// </summary>
        /// <value>Код причины статуса платежа.</value>
        [DataMember(Name = "statusReason", EmitDefaultValue = false)]
        public TransactionIndividualStatusReasonStaticType? StatusReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetailsComplexTypeStatusDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentDetailsComplexTypeStatusDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetailsComplexTypeStatusDetail" /> class.
        /// </summary>
        /// <param name="localInstrument">Инструмент для сообщества пользователей. Используется для указания локального инструмента, опции локального клиринга и / или дальнейшей квалификации услуги или уровня обслуживания..</param>
        /// <param name="status">Статус платежа, назначенный администратором транзакции. (required).</param>
        /// <param name="statusReason">Код причины статуса платежа..</param>
        /// <param name="statusReasonDescription">Детальное описание причины статуса платежа..</param>
        public PaymentDetailsComplexTypeStatusDetail(ExternalPaymentTransactionStatus1Code? localInstrument = default(ExternalPaymentTransactionStatus1Code?), string status = default(string), TransactionIndividualStatusReasonStaticType? statusReason = default(TransactionIndividualStatusReasonStaticType?), string statusReasonDescription = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for PaymentDetailsComplexTypeStatusDetail and cannot be null");
            }
            this.Status = status;
            this.LocalInstrument = localInstrument;
            this.StatusReason = statusReason;
            this.StatusReasonDescription = statusReasonDescription;
        }

        /// <summary>
        /// Статус платежа, назначенный администратором транзакции.
        /// </summary>
        /// <value>Статус платежа, назначенный администратором транзакции.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Детальное описание причины статуса платежа.
        /// </summary>
        /// <value>Детальное описание причины статуса платежа.</value>
        [DataMember(Name = "statusReasonDescription", EmitDefaultValue = false)]
        public string StatusReasonDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetailsComplexTypeStatusDetail {\n");
            sb.Append("  LocalInstrument: ").Append(LocalInstrument).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusReason: ").Append(StatusReason).Append("\n");
            sb.Append("  StatusReasonDescription: ").Append(StatusReasonDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDetailsComplexTypeStatusDetail);
        }

        /// <summary>
        /// Returns true if PaymentDetailsComplexTypeStatusDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDetailsComplexTypeStatusDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDetailsComplexTypeStatusDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocalInstrument == input.LocalInstrument ||
                    this.LocalInstrument.Equals(input.LocalInstrument)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusReason == input.StatusReason ||
                    this.StatusReason.Equals(input.StatusReason)
                ) && 
                (
                    this.StatusReasonDescription == input.StatusReasonDescription ||
                    (this.StatusReasonDescription != null &&
                    this.StatusReasonDescription.Equals(input.StatusReasonDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LocalInstrument.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusReason.GetHashCode();
                if (this.StatusReasonDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusReasonDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Status (string) maxLength
            if (this.Status != null && this.Status.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be less than 128.", new [] { "Status" });
            }

            // StatusReasonDescription (string) maxLength
            if (this.StatusReasonDescription != null && this.StatusReasonDescription.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatusReasonDescription, length must be less than 256.", new [] { "StatusReasonDescription" });
            }

            yield break;
        }
    }

}
