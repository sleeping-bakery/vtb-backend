/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// Контейнер с ошибкой
    /// </summary>
    [DataContract(Name = "OBRUError")]
    public partial class OBRUError : IEquatable<OBRUError>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
        public OBRUErrorResponseErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBRUError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OBRUError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OBRUError" /> class.
        /// </summary>
        /// <param name="errorCode">errorCode (required).</param>
        /// <param name="message">Описание ошибки. Например, &#39;Обязательное поле не указано&#39;. (required).</param>
        /// <param name="path">Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле..</param>
        /// <param name="url">URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию..</param>
        public OBRUError(OBRUErrorResponseErrorCode errorCode = default(OBRUErrorResponseErrorCode), string message = default(string), string path = default(string), string url = default(string))
        {
            this.ErrorCode = errorCode;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for OBRUError and cannot be null");
            }
            this.Message = message;
            this.Path = path;
            this.Url = url;
        }

        /// <summary>
        /// Описание ошибки. Например, &#39;Обязательное поле не указано&#39;.
        /// </summary>
        /// <value>Описание ошибки. Например, &#39;Обязательное поле не указано&#39;.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле.
        /// </summary>
        /// <value>Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию.
        /// </summary>
        /// <value>URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OBRUError {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OBRUError);
        }

        /// <summary>
        /// Returns true if OBRUError instances are equal
        /// </summary>
        /// <param name="input">Instance of OBRUError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBRUError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 500.", new [] { "Message" });
            }

            // Path (string) maxLength
            if (this.Path != null && this.Path.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Path, length must be less than 500.", new [] { "Path" });
            }

            yield break;
        }
    }

}
