/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UnidentifiedPaymentClient.Model;

/// <summary>
///     DataConsentRequestComplexType
/// </summary>
[DataContract(Name = "DataConsentRequestComplexType")]
public class DataConsentRequestComplexType : IEquatable<DataConsentRequestComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DataConsentRequestComplexType" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DataConsentRequestComplexType()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="DataConsentRequestComplexType" /> class.
    /// </summary>
    /// <param name="initiation">initiation (required).</param>
    /// <param name="authorisation">authorisation.</param>
    /// <param name="sCASupportData">sCASupportData.</param>
    public DataConsentRequestComplexType(DataConsentRequestComplexTypeInitiation initiation = default, DataConsentRequestComplexTypeAuthorisation authorisation = default,
        DataConsentRequestComplexTypeSCASupportData sCASupportData = default)
    {
        // to ensure "initiation" is required (not null)
        if (initiation == null) throw new ArgumentNullException("initiation is a required property for DataConsentRequestComplexType and cannot be null");
        Initiation = initiation;
        Authorisation = authorisation;
        SCASupportData = sCASupportData;
    }

    /// <summary>
    ///     Gets or Sets Initiation
    /// </summary>
    [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
    public DataConsentRequestComplexTypeInitiation Initiation { get; set; }

    /// <summary>
    ///     Gets or Sets Authorisation
    /// </summary>
    [DataMember(Name = "Authorisation", EmitDefaultValue = false)]
    public DataConsentRequestComplexTypeAuthorisation Authorisation { get; set; }

    /// <summary>
    ///     Gets or Sets SCASupportData
    /// </summary>
    [DataMember(Name = "SCASupportData", EmitDefaultValue = false)]
    public DataConsentRequestComplexTypeSCASupportData SCASupportData { get; set; }

    /// <summary>
    ///     Returns true if DataConsentRequestComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of DataConsentRequestComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DataConsentRequestComplexType input)
    {
        if (input == null) return false;
        return
            (
                Initiation == input.Initiation ||
                (Initiation != null &&
                 Initiation.Equals(input.Initiation))
            ) &&
            (
                Authorisation == input.Authorisation ||
                (Authorisation != null &&
                 Authorisation.Equals(input.Authorisation))
            ) &&
            (
                SCASupportData == input.SCASupportData ||
                (SCASupportData != null &&
                 SCASupportData.Equals(input.SCASupportData))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DataConsentRequestComplexType {\n");
        sb.Append("  Initiation: ").Append(Initiation).Append("\n");
        sb.Append("  Authorisation: ").Append(Authorisation).Append("\n");
        sb.Append("  SCASupportData: ").Append(SCASupportData).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as DataConsentRequestComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Initiation != null) hashCode = hashCode * 59 + Initiation.GetHashCode();
            if (Authorisation != null) hashCode = hashCode * 59 + Authorisation.GetHashCode();
            if (SCASupportData != null) hashCode = hashCode * 59 + SCASupportData.GetHashCode();
            return hashCode;
        }
    }
}