/*
 * Инициирование перевода денежных средств клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по переводам.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UnidentifiedPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UnidentifiedPaymentClient.Model
{
    /// <summary>
    /// DataConsentRequestComplexType
    /// </summary>
    [DataContract(Name = "DataConsentRequestComplexType")]
    public partial class DataConsentRequestComplexType : IEquatable<DataConsentRequestComplexType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestComplexType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataConsentRequestComplexType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataConsentRequestComplexType" /> class.
        /// </summary>
        /// <param name="initiation">initiation (required).</param>
        /// <param name="authorisation">authorisation.</param>
        /// <param name="sCASupportData">sCASupportData.</param>
        public DataConsentRequestComplexType(DataConsentRequestComplexTypeInitiation initiation = default(DataConsentRequestComplexTypeInitiation), DataConsentRequestComplexTypeAuthorisation authorisation = default(DataConsentRequestComplexTypeAuthorisation), DataConsentRequestComplexTypeSCASupportData sCASupportData = default(DataConsentRequestComplexTypeSCASupportData))
        {
            // to ensure "initiation" is required (not null)
            if (initiation == null)
            {
                throw new ArgumentNullException("initiation is a required property for DataConsentRequestComplexType and cannot be null");
            }
            this.Initiation = initiation;
            this.Authorisation = authorisation;
            this.SCASupportData = sCASupportData;
        }

        /// <summary>
        /// Gets or Sets Initiation
        /// </summary>
        [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
        public DataConsentRequestComplexTypeInitiation Initiation { get; set; }

        /// <summary>
        /// Gets or Sets Authorisation
        /// </summary>
        [DataMember(Name = "Authorisation", EmitDefaultValue = false)]
        public DataConsentRequestComplexTypeAuthorisation Authorisation { get; set; }

        /// <summary>
        /// Gets or Sets SCASupportData
        /// </summary>
        [DataMember(Name = "SCASupportData", EmitDefaultValue = false)]
        public DataConsentRequestComplexTypeSCASupportData SCASupportData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataConsentRequestComplexType {\n");
            sb.Append("  Initiation: ").Append(Initiation).Append("\n");
            sb.Append("  Authorisation: ").Append(Authorisation).Append("\n");
            sb.Append("  SCASupportData: ").Append(SCASupportData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataConsentRequestComplexType);
        }

        /// <summary>
        /// Returns true if DataConsentRequestComplexType instances are equal
        /// </summary>
        /// <param name="input">Instance of DataConsentRequestComplexType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataConsentRequestComplexType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Initiation == input.Initiation ||
                    (this.Initiation != null &&
                    this.Initiation.Equals(input.Initiation))
                ) && 
                (
                    this.Authorisation == input.Authorisation ||
                    (this.Authorisation != null &&
                    this.Authorisation.Equals(input.Authorisation))
                ) && 
                (
                    this.SCASupportData == input.SCASupportData ||
                    (this.SCASupportData != null &&
                    this.SCASupportData.Equals(input.SCASupportData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Initiation != null)
                {
                    hashCode = (hashCode * 59) + this.Initiation.GetHashCode();
                }
                if (this.Authorisation != null)
                {
                    hashCode = (hashCode * 59) + this.Authorisation.GetHashCode();
                }
                if (this.SCASupportData != null)
                {
                    hashCode = (hashCode * 59) + this.SCASupportData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
