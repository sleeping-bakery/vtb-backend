/*
 * Сервис управления картой ФЛ, эмиссионные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.CardEmissionClient.Model;

/// <summary>
///     Данные для открытия карты
/// </summary>
[DataContract(Name = "CardOpenRequest")]
public class CardOpenRequest : IEquatable<CardOpenRequest>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOpenRequest" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected CardOpenRequest()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOpenRequest" /> class.
    /// </summary>
    /// <param name="partnerId">Идентификатор партнера (required).</param>
    public CardOpenRequest(string partnerId = default)
    {
        // to ensure "partnerId" is required (not null)
        if (partnerId == null) throw new ArgumentNullException("partnerId is a required property for CardOpenRequest and cannot be null");
        PartnerId = partnerId;
    }

    /// <summary>
    ///     Идентификатор партнера
    /// </summary>
    /// <value>Идентификатор партнера</value>
    [DataMember(Name = "partnerId", IsRequired = true, EmitDefaultValue = true)]
    public string PartnerId { get; set; }

    /// <summary>
    ///     Returns true if CardOpenRequest instances are equal
    /// </summary>
    /// <param name="input">Instance of CardOpenRequest to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(CardOpenRequest input)
    {
        if (input == null) return false;
        return
            PartnerId == input.PartnerId ||
            (PartnerId != null &&
             PartnerId.Equals(input.PartnerId));
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // PartnerId (string) maxLength
        if (PartnerId != null && PartnerId.Length > 50) yield return new ValidationResult("Invalid value for PartnerId, length must be less than 50.", new[] { "PartnerId" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CardOpenRequest {\n");
        sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as CardOpenRequest);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (PartnerId != null) hashCode = hashCode * 59 + PartnerId.GetHashCode();
            return hashCode;
        }
    }
}