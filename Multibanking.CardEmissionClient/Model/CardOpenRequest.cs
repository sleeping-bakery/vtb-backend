/*
 * Сервис управления картой ФЛ, эмиссионные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.CardEmissionClient.Client.OpenAPIDateConverter;

namespace Multibanking.CardEmissionClient.Model
{
    /// <summary>
    /// Данные для открытия карты
    /// </summary>
    [DataContract(Name = "CardOpenRequest")]
    public partial class CardOpenRequest : IEquatable<CardOpenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOpenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardOpenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardOpenRequest" /> class.
        /// </summary>
        /// <param name="partnerId">Идентификатор партнера (required).</param>
        public CardOpenRequest(string partnerId = default(string))
        {
            // to ensure "partnerId" is required (not null)
            if (partnerId == null)
            {
                throw new ArgumentNullException("partnerId is a required property for CardOpenRequest and cannot be null");
            }
            this.PartnerId = partnerId;
        }

        /// <summary>
        /// Идентификатор партнера
        /// </summary>
        /// <value>Идентификатор партнера</value>
        [DataMember(Name = "partnerId", IsRequired = true, EmitDefaultValue = true)]
        public string PartnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardOpenRequest {\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardOpenRequest);
        }

        /// <summary>
        /// Returns true if CardOpenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CardOpenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardOpenRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PartnerId (string) maxLength
            if (this.PartnerId != null && this.PartnerId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerId, length must be less than 50.", new [] { "PartnerId" });
            }

            yield break;
        }
    }

}
