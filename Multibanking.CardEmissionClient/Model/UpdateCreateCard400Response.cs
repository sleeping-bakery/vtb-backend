/*
 * Сервис управления картой ФЛ, эмиссионные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.CardEmissionClient.Model;

/// <summary>
///     UpdateCreateCard400Response
/// </summary>
[JsonConverter(typeof(UpdateCreateCard400ResponseJsonConverter))]
[DataContract(Name = "updateCreateCard_400_response")]
public class UpdateCreateCard400Response : AbstractOpenAPISchema, IEquatable<UpdateCreateCard400Response>, IValidatableObject
{
    private object _actualInstance;

    /// <summary>
    ///     Initializes a new instance of the <see cref="UpdateCreateCard400Response" /> class
    ///     with the <see cref="ServiceError" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ServiceError.</param>
    public UpdateCreateCard400Response(ServiceError actualInstance)
    {
        IsNullable = false;
        SchemaType = "oneOf";
        ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="UpdateCreateCard400Response" /> class
    ///     with the <see cref="TykErrorResponse" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of TykErrorResponse.</param>
    public UpdateCreateCard400Response(TykErrorResponse actualInstance)
    {
        IsNullable = false;
        SchemaType = "oneOf";
        ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    ///     Gets or Sets ActualInstance
    /// </summary>
    public override object ActualInstance
    {
        get => _actualInstance;
        set
        {
            if (value.GetType() == typeof(ServiceError))
                _actualInstance = value;
            else if (value.GetType() == typeof(TykErrorResponse))
                _actualInstance = value;
            else
                throw new ArgumentException("Invalid instance found. Must be the following types: ServiceError, TykErrorResponse");
        }
    }

    /// <summary>
    ///     Returns true if UpdateCreateCard400Response instances are equal
    /// </summary>
    /// <param name="input">Instance of UpdateCreateCard400Response to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(UpdateCreateCard400Response input)
    {
        if (input == null)
            return false;

        return ActualInstance.Equals(input.ActualInstance);
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Get the actual instance of `ServiceError`. If the actual instance is not `ServiceError`,
    ///     the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ServiceError</returns>
    public ServiceError GetServiceError()
    {
        return (ServiceError)ActualInstance;
    }

    /// <summary>
    ///     Get the actual instance of `TykErrorResponse`. If the actual instance is not `TykErrorResponse`,
    ///     the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of TykErrorResponse</returns>
    public TykErrorResponse GetTykErrorResponse()
    {
        return (TykErrorResponse)ActualInstance;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class UpdateCreateCard400Response {\n");
        sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
        return JsonConvert.SerializeObject(ActualInstance, SerializerSettings);
    }

    /// <summary>
    ///     Converts the JSON string into an instance of UpdateCreateCard400Response
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of UpdateCreateCard400Response</returns>
    public static UpdateCreateCard400Response FromJson(string jsonString)
    {
        UpdateCreateCard400Response newUpdateCreateCard400Response = null;

        if (string.IsNullOrEmpty(jsonString)) return newUpdateCreateCard400Response;
        var match = 0;
        var matchedTypes = new List<string>();

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ServiceError).GetProperty("AdditionalProperties") == null)
                newUpdateCreateCard400Response = new UpdateCreateCard400Response(JsonConvert.DeserializeObject<ServiceError>(jsonString, SerializerSettings));
            else
                newUpdateCreateCard400Response = new UpdateCreateCard400Response(JsonConvert.DeserializeObject<ServiceError>(jsonString, AdditionalPropertiesSerializerSettings));
            matchedTypes.Add("ServiceError");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            Debug.WriteLine("Failed to deserialize `{0}` into ServiceError: {1}", jsonString, exception);
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(TykErrorResponse).GetProperty("AdditionalProperties") == null)
                newUpdateCreateCard400Response = new UpdateCreateCard400Response(JsonConvert.DeserializeObject<TykErrorResponse>(jsonString, SerializerSettings));
            else
                newUpdateCreateCard400Response =
                    new UpdateCreateCard400Response(JsonConvert.DeserializeObject<TykErrorResponse>(jsonString, AdditionalPropertiesSerializerSettings));
            matchedTypes.Add("TykErrorResponse");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            Debug.WriteLine("Failed to deserialize `{0}` into TykErrorResponse: {1}", jsonString, exception);
        }

        if (match == 0)
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        if (match > 1)
            throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);

        // deserialization is considered successful at this point if no exception has been thrown.
        return newUpdateCreateCard400Response;
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as UpdateCreateCard400Response);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (ActualInstance != null)
                hashCode = hashCode * 59 + ActualInstance.GetHashCode();
            return hashCode;
        }
    }
}