/*
 * Сервис управления картой ФЛ, эмиссионные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.CardEmissionClient.Client;
using Multibanking.CardEmissionClient.Model;

namespace Multibanking.CardEmissionClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class CardEmissionApi : ICardEmissionApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardEmissionApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CardEmissionApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardEmissionApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CardEmissionApi(string basePath)
    {
        Configuration = CardEmissionClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = CardEmissionClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardEmissionApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public CardEmissionApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = CardEmissionClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = CardEmissionClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardEmissionApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public CardEmissionApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = CardEmissionClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Открытие карты Метод открытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardEmissionClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardOpenRequest">Параметры открываемой карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CardInfoResponse</returns>
    public CardInfoResponse UpdateCreateCard(string xMdmId, string xClientChannel, string X_PARTNER_ID, CardOpenRequest cardOpenRequest, int operationIndex = 0)
    {
        var localVarResponse = UpdateCreateCardWithHttpInfo(xMdmId, xClientChannel, X_PARTNER_ID, cardOpenRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Открытие карты Метод открытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardEmissionClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardOpenRequest">Параметры открываемой карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CardInfoResponse</returns>
    public ApiResponse<CardInfoResponse> UpdateCreateCardWithHttpInfo(string xMdmId, string xClientChannel, string X_PARTNER_ID, CardOpenRequest cardOpenRequest,
        int operationIndex = 0)
    {
        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'cardOpenRequest' is set
        if (cardOpenRequest == null) throw new ApiException(400, "Missing required parameter 'cardOpenRequest' when calling CardEmissionApi->UpdateCreateCard");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = cardOpenRequest;

        localVarRequestOptions.Operation = "CardEmissionApi.UpdateCreateCard";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = Client.Post<CardInfoResponse>("/prepaid", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCreateCard", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Открытие карты Метод открытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardEmissionClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardOpenRequest">Параметры открываемой карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CardInfoResponse</returns>
    public async Task<CardInfoResponse> UpdateCreateCardAsync(string xMdmId, string xClientChannel, string X_PARTNER_ID, CardOpenRequest cardOpenRequest, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await UpdateCreateCardWithHttpInfoAsync(xMdmId, xClientChannel, X_PARTNER_ID, cardOpenRequest, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Открытие карты Метод открытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardEmissionClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardOpenRequest">Параметры открываемой карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
    public async Task<ApiResponse<CardInfoResponse>> UpdateCreateCardWithHttpInfoAsync(string xMdmId, string xClientChannel, string X_PARTNER_ID, CardOpenRequest cardOpenRequest,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardEmissionApi->UpdateCreateCard");

        // verify the required parameter 'cardOpenRequest' is set
        if (cardOpenRequest == null) throw new ApiException(400, "Missing required parameter 'cardOpenRequest' when calling CardEmissionApi->UpdateCreateCard");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = cardOpenRequest;

        localVarRequestOptions.Operation = "CardEmissionApi.UpdateCreateCard";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<CardInfoResponse>("/prepaid", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCreateCard", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}