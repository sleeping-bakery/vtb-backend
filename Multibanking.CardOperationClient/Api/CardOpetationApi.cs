/*
 * Сервис управления картой ФЛ, операционные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Multibanking.CardOperationClient.Client;
using Multibanking.CardOperationClient.Model;

namespace Multibanking.CardOperationClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Установка/смена статуса карты
        /// </summary>
        /// <remarks>
        /// Метод установки статуса карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CardInfoResponse</returns>
        CardInfoResponse UpdateCardOption(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Установка/смена статуса карты
        /// </summary>
        /// <remarks>
        /// Метод установки статуса карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CardInfoResponse</returns>
        ApiResponse<CardInfoResponse> UpdateCardOptionWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Установка/смена пин-кода для карты
        /// </summary>
        /// <remarks>
        /// Метод смены PIN-кода карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CardInfoResponse</returns>
        CardInfoResponse UpdateCardPin(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0);

        /// <summary>
        /// Установка/смена пин-кода для карты
        /// </summary>
        /// <remarks>
        /// Метод смены PIN-кода карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CardInfoResponse</returns>
        ApiResponse<CardInfoResponse> UpdateCardPinWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0);
        /// <summary>
        /// Закрытие карты при нулевом балансе
        /// </summary>
        /// <remarks>
        /// Метод закрытия карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCloseCard(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0);

        /// <summary>
        /// Закрытие карты при нулевом балансе
        /// </summary>
        /// <remarks>
        /// Метод закрытия карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCloseCardWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Установка/смена статуса карты
        /// </summary>
        /// <remarks>
        /// Метод установки статуса карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardInfoResponse</returns>
        System.Threading.Tasks.Task<CardInfoResponse> UpdateCardOptionAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Установка/смена статуса карты
        /// </summary>
        /// <remarks>
        /// Метод установки статуса карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardInfoResponse>> UpdateCardOptionWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Установка/смена пин-кода для карты
        /// </summary>
        /// <remarks>
        /// Метод смены PIN-кода карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardInfoResponse</returns>
        System.Threading.Tasks.Task<CardInfoResponse> UpdateCardPinAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Установка/смена пин-кода для карты
        /// </summary>
        /// <remarks>
        /// Метод смены PIN-кода карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardInfoResponse>> UpdateCardPinWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Закрытие карты при нулевом балансе
        /// </summary>
        /// <remarks>
        /// Метод закрытия карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCloseCardAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Закрытие карты при нулевом балансе
        /// </summary>
        /// <remarks>
        /// Метод закрытия карты
        /// </remarks>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCloseCardWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardOperationApi : IAPIApiSync, IAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardOperationApi : ICardOperationApi
    {
        private Multibanking.CardOperationClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardOperationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardOperationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardOperationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardOperationApi(string basePath)
        {
            this.Configuration = Multibanking.CardOperationClient.Client.Configuration.MergeConfigurations(
                Multibanking.CardOperationClient.Client.GlobalConfiguration.Instance,
                new Multibanking.CardOperationClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Multibanking.CardOperationClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.CardOperationClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Multibanking.CardOperationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardOperationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardOperationApi(Multibanking.CardOperationClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Multibanking.CardOperationClient.Client.Configuration.MergeConfigurations(
                Multibanking.CardOperationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Multibanking.CardOperationClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.CardOperationClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Multibanking.CardOperationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardOperationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CardOperationApi(Multibanking.CardOperationClient.Client.ISynchronousClient client, Multibanking.CardOperationClient.Client.IAsynchronousClient asyncClient, Multibanking.CardOperationClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Multibanking.CardOperationClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Multibanking.CardOperationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Multibanking.CardOperationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Multibanking.CardOperationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Multibanking.CardOperationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Установка/смена статуса карты Метод установки статуса карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CardInfoResponse</returns>
        public CardInfoResponse UpdateCardOption(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0)
        {
            Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> localVarResponse = UpdateCardOptionWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID, cardStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Установка/смена статуса карты Метод установки статуса карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CardInfoResponse</returns>
        public Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> UpdateCardOptionWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'cardStatusRequest' is set
            if (cardStatusRequest == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'cardStatusRequest' when calling CardOperationApi->UpdateCardOption");
            }

            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.Data = cardStatusRequest;

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCardOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CardInfoResponse>("/status/{publicId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCardOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Установка/смена статуса карты Метод установки статуса карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardInfoResponse</returns>
        public async System.Threading.Tasks.Task<CardInfoResponse> UpdateCardOptionAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> localVarResponse = await UpdateCardOptionWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, cardStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Установка/смена статуса карты Метод установки статуса карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse>> UpdateCardOptionWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardOption");
            }

            // verify the required parameter 'cardStatusRequest' is set
            if (cardStatusRequest == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'cardStatusRequest' when calling CardOperationApi->UpdateCardOption");
            }


            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.Data = cardStatusRequest;

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCardOption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CardInfoResponse>("/status/{publicId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCardOption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Установка/смена пин-кода для карты Метод смены PIN-кода карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CardInfoResponse</returns>
        public CardInfoResponse UpdateCardPin(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0)
        {
            Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> localVarResponse = UpdateCardPinWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID, pinCardRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Установка/смена пин-кода для карты Метод смены PIN-кода карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CardInfoResponse</returns>
        public Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> UpdateCardPinWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0)
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'pinCardRequest' is set
            if (pinCardRequest == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'pinCardRequest' when calling CardOperationApi->UpdateCardPin");
            }

            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.Data = pinCardRequest;

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCardPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CardInfoResponse>("/pin/{publicId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCardPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Установка/смена пин-кода для карты Метод смены PIN-кода карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CardInfoResponse</returns>
        public async System.Threading.Tasks.Task<CardInfoResponse> UpdateCardPinAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse> localVarResponse = await UpdateCardPinWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, pinCardRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Установка/смена пин-кода для карты Метод смены PIN-кода карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Multibanking.CardOperationClient.Client.ApiResponse<CardInfoResponse>> UpdateCardPinWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardPin");
            }

            // verify the required parameter 'pinCardRequest' is set
            if (pinCardRequest == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'pinCardRequest' when calling CardOperationApi->UpdateCardPin");
            }


            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.Data = pinCardRequest;

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCardPin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CardInfoResponse>("/pin/{publicId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCardPin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Закрытие карты при нулевом балансе Метод закрытия карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCloseCard(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0)
        {
            UpdateCloseCardWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID);
        }

        /// <summary>
        /// Закрытие карты при нулевом балансе Метод закрытия карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Multibanking.CardOperationClient.Client.ApiResponse<Object> UpdateCloseCardWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0)
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCloseCard");
            }

            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCloseCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/close/{publicId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloseCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Закрытие карты при нулевом балансе Метод закрытия карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCloseCardAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCloseCardWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Закрытие карты при нулевом балансе Метод закрытия карты
        /// </summary>
        /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicId">Публичный идентификатор продукта</param>
        /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
        /// <param name="xClientChannel">Признак использования API партнером</param>
        /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Multibanking.CardOperationClient.Client.ApiResponse<Object>> UpdateCloseCardWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publicId' is set
            if (publicId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'xMdmId' is set
            if (xMdmId == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'xClientChannel' is set
            if (xClientChannel == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCloseCard");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.CardOperationClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCloseCard");
            }


            Multibanking.CardOperationClient.Client.RequestOptions localVarRequestOptions = new Multibanking.CardOperationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.CardOperationClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("publicId", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xMdmId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-client-channel", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(xClientChannel)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.CardOperationClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter

            localVarRequestOptions.Operation = "CardOperationApi.UpdateCloseCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (EpaAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/close/{publicId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloseCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
