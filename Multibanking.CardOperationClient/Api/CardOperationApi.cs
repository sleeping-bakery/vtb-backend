/*
 * Сервис управления картой ФЛ, операционные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.CardOperationClient.Client;
using Multibanking.CardOperationClient.Model;

namespace Multibanking.CardOperationClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class CardOperationApi : ICardOperationApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOperationApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CardOperationApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOperationApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CardOperationApi(string basePath)
    {
        Configuration = CardOperationClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = CardOperationClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOperationApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public CardOperationApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = CardOperationClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = CardOperationClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CardOperationApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public CardOperationApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = CardOperationClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Установка/смена статуса карты Метод установки статуса карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CardInfoResponse</returns>
    public CardInfoResponse UpdateCardOption(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest,
        int operationIndex = 0)
    {
        var localVarResponse = UpdateCardOptionWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID, cardStatusRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Установка/смена статуса карты Метод установки статуса карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CardInfoResponse</returns>
    public ApiResponse<CardInfoResponse> UpdateCardOptionWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID,
        CardStatusRequest cardStatusRequest, int operationIndex = 0)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'cardStatusRequest' is set
        if (cardStatusRequest == null) throw new ApiException(400, "Missing required parameter 'cardStatusRequest' when calling CardOperationApi->UpdateCardOption");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = cardStatusRequest;

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCardOption";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = Client.Put<CardInfoResponse>("/status/{publicId}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCardOption", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Установка/смена статуса карты Метод установки статуса карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CardInfoResponse</returns>
    public async Task<CardInfoResponse> UpdateCardOptionAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, CardStatusRequest cardStatusRequest,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await UpdateCardOptionWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, cardStatusRequest, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Установка/смена статуса карты Метод установки статуса карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="cardStatusRequest">Данные для блокировки/разблокировки карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
    public async Task<ApiResponse<CardInfoResponse>> UpdateCardOptionWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID,
        CardStatusRequest cardStatusRequest, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardOption");

        // verify the required parameter 'cardStatusRequest' is set
        if (cardStatusRequest == null) throw new ApiException(400, "Missing required parameter 'cardStatusRequest' when calling CardOperationApi->UpdateCardOption");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = cardStatusRequest;

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCardOption";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<CardInfoResponse>("/status/{publicId}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCardOption", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Установка/смена пин-кода для карты Метод смены PIN-кода карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CardInfoResponse</returns>
    public CardInfoResponse UpdateCardPin(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest, int operationIndex = 0)
    {
        var localVarResponse = UpdateCardPinWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID, pinCardRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Установка/смена пин-кода для карты Метод смены PIN-кода карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CardInfoResponse</returns>
    public ApiResponse<CardInfoResponse> UpdateCardPinWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest,
        int operationIndex = 0)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'pinCardRequest' is set
        if (pinCardRequest == null) throw new ApiException(400, "Missing required parameter 'pinCardRequest' when calling CardOperationApi->UpdateCardPin");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = pinCardRequest;

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCardPin";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = Client.Post<CardInfoResponse>("/pin/{publicId}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCardPin", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Установка/смена пин-кода для карты Метод смены PIN-кода карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CardInfoResponse</returns>
    public async Task<CardInfoResponse> UpdateCardPinAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, PinCardRequest pinCardRequest,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await UpdateCardPinWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, pinCardRequest, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Установка/смена пин-кода для карты Метод смены PIN-кода карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="pinCardRequest">Данные для смены пин-кода карты</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CardInfoResponse)</returns>
    public async Task<ApiResponse<CardInfoResponse>> UpdateCardPinWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID,
        PinCardRequest pinCardRequest, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCardPin");

        // verify the required parameter 'pinCardRequest' is set
        if (pinCardRequest == null) throw new ApiException(400, "Missing required parameter 'pinCardRequest' when calling CardOperationApi->UpdateCardPin");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.Data = pinCardRequest;

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCardPin";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<CardInfoResponse>("/pin/{publicId}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCardPin", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Закрытие карты при нулевом балансе Метод закрытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void UpdateCloseCard(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0)
    {
        UpdateCloseCardWithHttpInfo(publicId, xMdmId, xClientChannel, X_PARTNER_ID);
    }

    /// <summary>
    ///     Закрытие карты при нулевом балансе Метод закрытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> UpdateCloseCardWithHttpInfo(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCloseCard");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCloseCard";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = Client.Post<object>("/close/{publicId}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCloseCard", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Закрытие карты при нулевом балансе Метод закрытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task UpdateCloseCardAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await UpdateCloseCardWithHttpInfoAsync(publicId, xMdmId, xClientChannel, X_PARTNER_ID, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    ///     Закрытие карты при нулевом балансе Метод закрытия карты
    /// </summary>
    /// <exception cref="Multibanking.CardOperationClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="publicId">Публичный идентификатор продукта</param>
    /// <param name="xMdmId">Уникальный идентификатор клиента в MDM</param>
    /// <param name="xClientChannel">Признак использования API партнером</param>
    /// <param name="X_PARTNER_ID">Мнемокод партнера</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> UpdateCloseCardWithHttpInfoAsync(string publicId, string xMdmId, string xClientChannel, string X_PARTNER_ID, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'publicId' is set
        if (publicId == null) throw new ApiException(400, "Missing required parameter 'publicId' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'xMdmId' is set
        if (xMdmId == null) throw new ApiException(400, "Missing required parameter 'xMdmId' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'xClientChannel' is set
        if (xClientChannel == null) throw new ApiException(400, "Missing required parameter 'xClientChannel' when calling CardOperationApi->UpdateCloseCard");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling CardOperationApi->UpdateCloseCard");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("publicId", ClientUtils.ParameterToString(publicId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-Mdm-Id", ClientUtils.ParameterToString(xMdmId)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("x-client-channel", ClientUtils.ParameterToString(xClientChannel)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter

        localVarRequestOptions.Operation = "CardOperationApi.UpdateCloseCard";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (EpaAuth) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/close/{publicId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("UpdateCloseCard", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}