/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Статус платежа
/// </summary>
[DataContract(Name = "PaymentStatusDtoRs")]
public class PaymentStatusDtoRs : IEquatable<PaymentStatusDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Код статуса платежа
    /// </summary>
    /// <value>Код статуса платежа</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CodeEnum
    {
        /// <summary>
        ///     Enum PROCESSING for value: PROCESSING
        /// </summary>
        [EnumMember(Value = "PROCESSING")] PROCESSING = 1,

        /// <summary>
        ///     Enum EXECUTED for value: EXECUTED
        /// </summary>
        [EnumMember(Value = "EXECUTED")] EXECUTED = 2,

        /// <summary>
        ///     Enum REVIEW for value: REVIEW
        /// </summary>
        [EnumMember(Value = "REVIEW")] REVIEW = 3,

        /// <summary>
        ///     Enum REFUSED for value: REFUSED
        /// </summary>
        [EnumMember(Value = "REFUSED")] REFUSED = 4,

        /// <summary>
        ///     Enum NEEDCONFIRM for value: NEED_CONFIRM
        /// </summary>
        [EnumMember(Value = "NEED_CONFIRM")] NEEDCONFIRM = 5,

        /// <summary>
        ///     Enum ERROR for value: ERROR
        /// </summary>
        [EnumMember(Value = "ERROR")] ERROR = 6
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentStatusDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected PaymentStatusDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentStatusDtoRs" /> class.
    /// </summary>
    /// <param name="code">Код статуса платежа (required).</param>
    /// <param name="description">Описание статуса платежа (required).</param>
    public PaymentStatusDtoRs(CodeEnum code = default, string description = default)
    {
        Code = code;
        // to ensure "description" is required (not null)
        if (description == null) throw new ArgumentNullException("description is a required property for PaymentStatusDtoRs and cannot be null");
        Description = description;
    }


    /// <summary>
    ///     Код статуса платежа
    /// </summary>
    /// <value>Код статуса платежа</value>
    [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
    public CodeEnum Code { get; set; }

    /// <summary>
    ///     Описание статуса платежа
    /// </summary>
    /// <value>Описание статуса платежа</value>
    [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
    public string Description { get; set; }

    /// <summary>
    ///     Returns true if PaymentStatusDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of PaymentStatusDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PaymentStatusDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Code == input.Code ||
                Code.Equals(input.Code)
            ) &&
            (
                Description == input.Description ||
                (Description != null &&
                 Description.Equals(input.Description))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Description (string) maxLength
        if (Description != null && Description.Length > 255)
            yield return new ValidationResult("Invalid value for Description, length must be less than 255.", new[] { "Description" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PaymentStatusDtoRs {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PaymentStatusDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + Code.GetHashCode();
            if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
            return hashCode;
        }
    }
}