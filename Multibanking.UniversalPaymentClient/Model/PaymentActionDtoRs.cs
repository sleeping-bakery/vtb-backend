/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Информация о доступных действиях с платежом
/// </summary>
[DataContract(Name = "PaymentActionDtoRs")]
public class PaymentActionDtoRs : IEquatable<PaymentActionDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentActionDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected PaymentActionDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentActionDtoRs" /> class.
    /// </summary>
    /// <param name="repeat">Возможен повтор (required).</param>
    /// <param name="check">Возможно получение квитанции (required).</param>
    /// <param name="remind">Возможно создание напоминания (required).</param>
    /// <param name="template">Возможно создание шаблона (required).</param>
    /// <param name="autoPaymentByDate">Возможно создание автоплатежа на дату (required).</param>
    /// <param name="autoPaymentByBalance">Возможно создание автоплатежа по сумме на балансе (required).</param>
    public PaymentActionDtoRs(bool repeat = default, bool check = default, bool remind = default, bool template = default, bool autoPaymentByDate = default,
        bool autoPaymentByBalance = default)
    {
        Repeat = repeat;
        Check = check;
        Remind = remind;
        Template = template;
        AutoPaymentByDate = autoPaymentByDate;
        AutoPaymentByBalance = autoPaymentByBalance;
    }

    /// <summary>
    ///     Возможен повтор
    /// </summary>
    /// <value>Возможен повтор</value>
    [DataMember(Name = "repeat", IsRequired = true, EmitDefaultValue = true)]
    public bool Repeat { get; set; }

    /// <summary>
    ///     Возможно получение квитанции
    /// </summary>
    /// <value>Возможно получение квитанции</value>
    [DataMember(Name = "check", IsRequired = true, EmitDefaultValue = true)]
    public bool Check { get; set; }

    /// <summary>
    ///     Возможно создание напоминания
    /// </summary>
    /// <value>Возможно создание напоминания</value>
    [DataMember(Name = "remind", IsRequired = true, EmitDefaultValue = true)]
    public bool Remind { get; set; }

    /// <summary>
    ///     Возможно создание шаблона
    /// </summary>
    /// <value>Возможно создание шаблона</value>
    [DataMember(Name = "template", IsRequired = true, EmitDefaultValue = true)]
    public bool Template { get; set; }

    /// <summary>
    ///     Возможно создание автоплатежа на дату
    /// </summary>
    /// <value>Возможно создание автоплатежа на дату</value>
    [DataMember(Name = "autoPaymentByDate", IsRequired = true, EmitDefaultValue = true)]
    public bool AutoPaymentByDate { get; set; }

    /// <summary>
    ///     Возможно создание автоплатежа по сумме на балансе
    /// </summary>
    /// <value>Возможно создание автоплатежа по сумме на балансе</value>
    [DataMember(Name = "autoPaymentByBalance", IsRequired = true, EmitDefaultValue = true)]
    public bool AutoPaymentByBalance { get; set; }

    /// <summary>
    ///     Returns true if PaymentActionDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of PaymentActionDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PaymentActionDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Repeat == input.Repeat ||
                Repeat.Equals(input.Repeat)
            ) &&
            (
                Check == input.Check ||
                Check.Equals(input.Check)
            ) &&
            (
                Remind == input.Remind ||
                Remind.Equals(input.Remind)
            ) &&
            (
                Template == input.Template ||
                Template.Equals(input.Template)
            ) &&
            (
                AutoPaymentByDate == input.AutoPaymentByDate ||
                AutoPaymentByDate.Equals(input.AutoPaymentByDate)
            ) &&
            (
                AutoPaymentByBalance == input.AutoPaymentByBalance ||
                AutoPaymentByBalance.Equals(input.AutoPaymentByBalance)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PaymentActionDtoRs {\n");
        sb.Append("  Repeat: ").Append(Repeat).Append("\n");
        sb.Append("  Check: ").Append(Check).Append("\n");
        sb.Append("  Remind: ").Append(Remind).Append("\n");
        sb.Append("  Template: ").Append(Template).Append("\n");
        sb.Append("  AutoPaymentByDate: ").Append(AutoPaymentByDate).Append("\n");
        sb.Append("  AutoPaymentByBalance: ").Append(AutoPaymentByBalance).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PaymentActionDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + Repeat.GetHashCode();
            hashCode = hashCode * 59 + Check.GetHashCode();
            hashCode = hashCode * 59 + Remind.GetHashCode();
            hashCode = hashCode * 59 + Template.GetHashCode();
            hashCode = hashCode * 59 + AutoPaymentByDate.GetHashCode();
            hashCode = hashCode * 59 + AutoPaymentByBalance.GetHashCode();
            return hashCode;
        }
    }
}