/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UniversalPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UniversalPaymentClient.Model
{
    /// <summary>
    /// Информация о доступных действиях с платежом
    /// </summary>
    [DataContract(Name = "PaymentActionDtoRs")]
    public partial class PaymentActionDtoRs : IEquatable<PaymentActionDtoRs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentActionDtoRs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentActionDtoRs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentActionDtoRs" /> class.
        /// </summary>
        /// <param name="repeat">Возможен повтор (required).</param>
        /// <param name="check">Возможно получение квитанции (required).</param>
        /// <param name="remind">Возможно создание напоминания (required).</param>
        /// <param name="template">Возможно создание шаблона (required).</param>
        /// <param name="autoPaymentByDate">Возможно создание автоплатежа на дату (required).</param>
        /// <param name="autoPaymentByBalance">Возможно создание автоплатежа по сумме на балансе (required).</param>
        public PaymentActionDtoRs(bool repeat = default(bool), bool check = default(bool), bool remind = default(bool), bool template = default(bool), bool autoPaymentByDate = default(bool), bool autoPaymentByBalance = default(bool))
        {
            this.Repeat = repeat;
            this.Check = check;
            this.Remind = remind;
            this.Template = template;
            this.AutoPaymentByDate = autoPaymentByDate;
            this.AutoPaymentByBalance = autoPaymentByBalance;
        }

        /// <summary>
        /// Возможен повтор
        /// </summary>
        /// <value>Возможен повтор</value>
        [DataMember(Name = "repeat", IsRequired = true, EmitDefaultValue = true)]
        public bool Repeat { get; set; }

        /// <summary>
        /// Возможно получение квитанции
        /// </summary>
        /// <value>Возможно получение квитанции</value>
        [DataMember(Name = "check", IsRequired = true, EmitDefaultValue = true)]
        public bool Check { get; set; }

        /// <summary>
        /// Возможно создание напоминания
        /// </summary>
        /// <value>Возможно создание напоминания</value>
        [DataMember(Name = "remind", IsRequired = true, EmitDefaultValue = true)]
        public bool Remind { get; set; }

        /// <summary>
        /// Возможно создание шаблона
        /// </summary>
        /// <value>Возможно создание шаблона</value>
        [DataMember(Name = "template", IsRequired = true, EmitDefaultValue = true)]
        public bool Template { get; set; }

        /// <summary>
        /// Возможно создание автоплатежа на дату
        /// </summary>
        /// <value>Возможно создание автоплатежа на дату</value>
        [DataMember(Name = "autoPaymentByDate", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoPaymentByDate { get; set; }

        /// <summary>
        /// Возможно создание автоплатежа по сумме на балансе
        /// </summary>
        /// <value>Возможно создание автоплатежа по сумме на балансе</value>
        [DataMember(Name = "autoPaymentByBalance", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoPaymentByBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentActionDtoRs {\n");
            sb.Append("  Repeat: ").Append(Repeat).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  Remind: ").Append(Remind).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  AutoPaymentByDate: ").Append(AutoPaymentByDate).Append("\n");
            sb.Append("  AutoPaymentByBalance: ").Append(AutoPaymentByBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentActionDtoRs);
        }

        /// <summary>
        /// Returns true if PaymentActionDtoRs instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentActionDtoRs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentActionDtoRs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Repeat == input.Repeat ||
                    this.Repeat.Equals(input.Repeat)
                ) && 
                (
                    this.Check == input.Check ||
                    this.Check.Equals(input.Check)
                ) && 
                (
                    this.Remind == input.Remind ||
                    this.Remind.Equals(input.Remind)
                ) && 
                (
                    this.Template == input.Template ||
                    this.Template.Equals(input.Template)
                ) && 
                (
                    this.AutoPaymentByDate == input.AutoPaymentByDate ||
                    this.AutoPaymentByDate.Equals(input.AutoPaymentByDate)
                ) && 
                (
                    this.AutoPaymentByBalance == input.AutoPaymentByBalance ||
                    this.AutoPaymentByBalance.Equals(input.AutoPaymentByBalance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Repeat.GetHashCode();
                hashCode = (hashCode * 59) + this.Check.GetHashCode();
                hashCode = (hashCode * 59) + this.Remind.GetHashCode();
                hashCode = (hashCode * 59) + this.Template.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoPaymentByDate.GetHashCode();
                hashCode = (hashCode * 59) + this.AutoPaymentByBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
