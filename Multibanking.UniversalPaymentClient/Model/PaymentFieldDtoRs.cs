/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Поле платежа для ответа
/// </summary>
[DataContract(Name = "PaymentFieldDtoRs")]
public class PaymentFieldDtoRs : IEquatable<PaymentFieldDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Тип поля
    /// </summary>
    /// <value>Тип поля</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TypeEnum
    {
        /// <summary>
        ///     Enum STRING for value: STRING
        /// </summary>
        [EnumMember(Value = "STRING")] STRING = 1,

        /// <summary>
        ///     Enum NUMERIC for value: NUMERIC
        /// </summary>
        [EnumMember(Value = "NUMERIC")] NUMERIC = 2,

        /// <summary>
        ///     Enum NUMBER for value: NUMBER
        /// </summary>
        [EnumMember(Value = "NUMBER")] NUMBER = 3,

        /// <summary>
        ///     Enum DECIMAL for value: DECIMAL
        /// </summary>
        [EnumMember(Value = "DECIMAL")] DECIMAL = 4,

        /// <summary>
        ///     Enum BOOLEAN for value: BOOLEAN
        /// </summary>
        [EnumMember(Value = "BOOLEAN")] BOOLEAN = 5,

        /// <summary>
        ///     Enum MONEY for value: MONEY
        /// </summary>
        [EnumMember(Value = "MONEY")] MONEY = 6,

        /// <summary>
        ///     Enum DATE for value: DATE
        /// </summary>
        [EnumMember(Value = "DATE")] DATE = 7,

        /// <summary>
        ///     Enum MONTHYEAR for value: MONTH_YEAR
        /// </summary>
        [EnumMember(Value = "MONTH_YEAR")] MONTHYEAR = 8,

        /// <summary>
        ///     Enum MONTH for value: MONTH
        /// </summary>
        [EnumMember(Value = "MONTH")] MONTH = 9,

        /// <summary>
        ///     Enum YEAR for value: YEAR
        /// </summary>
        [EnumMember(Value = "YEAR")] YEAR = 10,

        /// <summary>
        ///     Enum MOBILEPHONE for value: MOBILE_PHONE
        /// </summary>
        [EnumMember(Value = "MOBILE_PHONE")] MOBILEPHONE = 11,

        /// <summary>
        ///     Enum DICTIONARY for value: DICTIONARY
        /// </summary>
        [EnumMember(Value = "DICTIONARY")] DICTIONARY = 12
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentFieldDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected PaymentFieldDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentFieldDtoRs" /> class.
    /// </summary>
    /// <param name="key">Ключ поля (required).</param>
    /// <param name="name">Название поля (required).</param>
    /// <param name="description">Описание поля.</param>
    /// <param name="type">Тип поля (required).</param>
    /// <param name="value">Значение поля (required).</param>
    public PaymentFieldDtoRs(string key = default, string name = default, string description = default, TypeEnum type = default, string value = default)
    {
        // to ensure "key" is required (not null)
        if (key == null) throw new ArgumentNullException("key is a required property for PaymentFieldDtoRs and cannot be null");
        Key = key;
        // to ensure "name" is required (not null)
        if (name == null) throw new ArgumentNullException("name is a required property for PaymentFieldDtoRs and cannot be null");
        Name = name;
        Type = type;
        // to ensure "value" is required (not null)
        if (value == null) throw new ArgumentNullException("value is a required property for PaymentFieldDtoRs and cannot be null");
        Value = value;
        Description = description;
    }


    /// <summary>
    ///     Тип поля
    /// </summary>
    /// <value>Тип поля</value>
    [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
    public TypeEnum Type { get; set; }

    /// <summary>
    ///     Ключ поля
    /// </summary>
    /// <value>Ключ поля</value>
    [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
    public string Key { get; set; }

    /// <summary>
    ///     Название поля
    /// </summary>
    /// <value>Название поля</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Описание поля
    /// </summary>
    /// <value>Описание поля</value>
    [DataMember(Name = "description", EmitDefaultValue = false)]
    public string Description { get; set; }

    /// <summary>
    ///     Значение поля
    /// </summary>
    /// <value>Значение поля</value>
    [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
    public string Value { get; set; }

    /// <summary>
    ///     Returns true if PaymentFieldDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of PaymentFieldDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PaymentFieldDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Key == input.Key ||
                (Key != null &&
                 Key.Equals(input.Key))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                Description == input.Description ||
                (Description != null &&
                 Description.Equals(input.Description))
            ) &&
            (
                Type == input.Type ||
                Type.Equals(input.Type)
            ) &&
            (
                Value == input.Value ||
                (Value != null &&
                 Value.Equals(input.Value))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Key (string) maxLength
        if (Key != null && Key.Length > 255) yield return new ValidationResult("Invalid value for Key, length must be less than 255.", new[] { "Key" });

        // Name (string) maxLength
        if (Name != null && Name.Length > 255) yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] { "Name" });

        // Description (string) maxLength
        if (Description != null && Description.Length > 255)
            yield return new ValidationResult("Invalid value for Description, length must be less than 255.", new[] { "Description" });

        // Value (string) maxLength
        if (Value != null && Value.Length > 255) yield return new ValidationResult("Invalid value for Value, length must be less than 255.", new[] { "Value" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PaymentFieldDtoRs {\n");
        sb.Append("  Key: ").Append(Key).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Value: ").Append(Value).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PaymentFieldDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Key != null) hashCode = hashCode * 59 + Key.GetHashCode();
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
            hashCode = hashCode * 59 + Type.GetHashCode();
            if (Value != null) hashCode = hashCode * 59 + Value.GetHashCode();
            return hashCode;
        }
    }
}