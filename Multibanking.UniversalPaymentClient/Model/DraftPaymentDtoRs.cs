/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Черновик платежа
/// </summary>
[DataContract(Name = "DraftPaymentDtoRs")]
public class DraftPaymentDtoRs : IEquatable<DraftPaymentDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DraftPaymentDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DraftPaymentDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="DraftPaymentDtoRs" /> class.
    /// </summary>
    /// <param name="id">Id платежа (required).</param>
    /// <param name="fields">Набор полей платежа (required).</param>
    /// <param name="clientProduct">clientProduct (required).</param>
    /// <param name="paySum">paySum (required).</param>
    /// <param name="commissionSum">commissionSum (required).</param>
    /// <param name="totalSum">totalSum (required).</param>
    public DraftPaymentDtoRs(string id = default, List<PaymentFieldDtoRs> fields = default, ClientProductDtoRs clientProduct = default, MoneyDto paySum = default,
        MoneyDto commissionSum = default, MoneyDto totalSum = default)
    {
        // to ensure "id" is required (not null)
        if (id == null) throw new ArgumentNullException("id is a required property for DraftPaymentDtoRs and cannot be null");
        Id = id;
        // to ensure "fields" is required (not null)
        if (fields == null) throw new ArgumentNullException("fields is a required property for DraftPaymentDtoRs and cannot be null");
        Fields = fields;
        // to ensure "clientProduct" is required (not null)
        if (clientProduct == null) throw new ArgumentNullException("clientProduct is a required property for DraftPaymentDtoRs and cannot be null");
        ClientProduct = clientProduct;
        // to ensure "paySum" is required (not null)
        if (paySum == null) throw new ArgumentNullException("paySum is a required property for DraftPaymentDtoRs and cannot be null");
        PaySum = paySum;
        // to ensure "commissionSum" is required (not null)
        if (commissionSum == null) throw new ArgumentNullException("commissionSum is a required property for DraftPaymentDtoRs and cannot be null");
        CommissionSum = commissionSum;
        // to ensure "totalSum" is required (not null)
        if (totalSum == null) throw new ArgumentNullException("totalSum is a required property for DraftPaymentDtoRs and cannot be null");
        TotalSum = totalSum;
    }

    /// <summary>
    ///     Id платежа
    /// </summary>
    /// <value>Id платежа</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    ///     Набор полей платежа
    /// </summary>
    /// <value>Набор полей платежа</value>
    [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
    public List<PaymentFieldDtoRs> Fields { get; set; }

    /// <summary>
    ///     Gets or Sets ClientProduct
    /// </summary>
    [DataMember(Name = "clientProduct", IsRequired = true, EmitDefaultValue = true)]
    public ClientProductDtoRs ClientProduct { get; set; }

    /// <summary>
    ///     Gets or Sets PaySum
    /// </summary>
    [DataMember(Name = "paySum", IsRequired = true, EmitDefaultValue = true)]
    public MoneyDto PaySum { get; set; }

    /// <summary>
    ///     Gets or Sets CommissionSum
    /// </summary>
    [DataMember(Name = "commissionSum", IsRequired = true, EmitDefaultValue = true)]
    public MoneyDto CommissionSum { get; set; }

    /// <summary>
    ///     Gets or Sets TotalSum
    /// </summary>
    [DataMember(Name = "totalSum", IsRequired = true, EmitDefaultValue = true)]
    public MoneyDto TotalSum { get; set; }

    /// <summary>
    ///     Returns true if DraftPaymentDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of DraftPaymentDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DraftPaymentDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                Fields == input.Fields ||
                (Fields != null &&
                 input.Fields != null &&
                 Fields.SequenceEqual(input.Fields))
            ) &&
            (
                ClientProduct == input.ClientProduct ||
                (ClientProduct != null &&
                 ClientProduct.Equals(input.ClientProduct))
            ) &&
            (
                PaySum == input.PaySum ||
                (PaySum != null &&
                 PaySum.Equals(input.PaySum))
            ) &&
            (
                CommissionSum == input.CommissionSum ||
                (CommissionSum != null &&
                 CommissionSum.Equals(input.CommissionSum))
            ) &&
            (
                TotalSum == input.TotalSum ||
                (TotalSum != null &&
                 TotalSum.Equals(input.TotalSum))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) maxLength
        if (Id != null && Id.Length > 36) yield return new ValidationResult("Invalid value for Id, length must be less than 36.", new[] { "Id" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DraftPaymentDtoRs {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Fields: ").Append(Fields).Append("\n");
        sb.Append("  ClientProduct: ").Append(ClientProduct).Append("\n");
        sb.Append("  PaySum: ").Append(PaySum).Append("\n");
        sb.Append("  CommissionSum: ").Append(CommissionSum).Append("\n");
        sb.Append("  TotalSum: ").Append(TotalSum).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as DraftPaymentDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (Fields != null) hashCode = hashCode * 59 + Fields.GetHashCode();
            if (ClientProduct != null) hashCode = hashCode * 59 + ClientProduct.GetHashCode();
            if (PaySum != null) hashCode = hashCode * 59 + PaySum.GetHashCode();
            if (CommissionSum != null) hashCode = hashCode * 59 + CommissionSum.GetHashCode();
            if (TotalSum != null) hashCode = hashCode * 59 + TotalSum.GetHashCode();
            return hashCode;
        }
    }
}