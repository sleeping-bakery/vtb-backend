/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Ответ подтверждения платежа
/// </summary>
[DataContract(Name = "ConfirmPaymentDtoRs")]
public class ConfirmPaymentDtoRs : IEquatable<ConfirmPaymentDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfirmPaymentDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ConfirmPaymentDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfirmPaymentDtoRs" /> class.
    /// </summary>
    /// <param name="payment">payment (required).</param>
    /// <param name="clientConfirm">clientConfirm.</param>
    public ConfirmPaymentDtoRs(PaymentDtoRs payment = default, ClientConfirmDtoRs clientConfirm = default)
    {
        // to ensure "payment" is required (not null)
        if (payment == null) throw new ArgumentNullException("payment is a required property for ConfirmPaymentDtoRs and cannot be null");
        Payment = payment;
        ClientConfirm = clientConfirm;
    }

    /// <summary>
    ///     Gets or Sets Payment
    /// </summary>
    [DataMember(Name = "payment", IsRequired = true, EmitDefaultValue = true)]
    public PaymentDtoRs Payment { get; set; }

    /// <summary>
    ///     Gets or Sets ClientConfirm
    /// </summary>
    [DataMember(Name = "clientConfirm", EmitDefaultValue = false)]
    public ClientConfirmDtoRs ClientConfirm { get; set; }

    /// <summary>
    ///     Returns true if ConfirmPaymentDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of ConfirmPaymentDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ConfirmPaymentDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Payment == input.Payment ||
                (Payment != null &&
                 Payment.Equals(input.Payment))
            ) &&
            (
                ClientConfirm == input.ClientConfirm ||
                (ClientConfirm != null &&
                 ClientConfirm.Equals(input.ClientConfirm))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ConfirmPaymentDtoRs {\n");
        sb.Append("  Payment: ").Append(Payment).Append("\n");
        sb.Append("  ClientConfirm: ").Append(ClientConfirm).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ConfirmPaymentDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Payment != null) hashCode = hashCode * 59 + Payment.GetHashCode();
            if (ClientConfirm != null) hashCode = hashCode * 59 + ClientConfirm.GetHashCode();
            return hashCode;
        }
    }
}