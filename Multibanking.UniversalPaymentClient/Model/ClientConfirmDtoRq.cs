/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UniversalPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UniversalPaymentClient.Model
{
    /// <summary>
    /// Информация по подтверждению
    /// </summary>
    [DataContract(Name = "ClientConfirmDtoRq")]
    public partial class ClientConfirmDtoRq : IEquatable<ClientConfirmDtoRq>, IValidatableObject
    {
        /// <summary>
        /// Цель запроса подтверждения
        /// </summary>
        /// <value>Цель запроса подтверждения</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConfirmPurposeEnum
        {
            /// <summary>
            /// Enum REQUESTCODE for value: REQUEST_CODE
            /// </summary>
            [EnumMember(Value = "REQUEST_CODE")]
            REQUESTCODE = 1,

            /// <summary>
            /// Enum CHECKCODE for value: CHECK_CODE
            /// </summary>
            [EnumMember(Value = "CHECK_CODE")]
            CHECKCODE = 2

        }


        /// <summary>
        /// Цель запроса подтверждения
        /// </summary>
        /// <value>Цель запроса подтверждения</value>
        [DataMember(Name = "confirmPurpose", IsRequired = true, EmitDefaultValue = true)]
        public ConfirmPurposeEnum ConfirmPurpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientConfirmDtoRq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientConfirmDtoRq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientConfirmDtoRq" /> class.
        /// </summary>
        /// <param name="confirmPurpose">Цель запроса подтверждения (required).</param>
        /// <param name="confirmCode">confirmCode.</param>
        public ClientConfirmDtoRq(ConfirmPurposeEnum confirmPurpose = default(ConfirmPurposeEnum), ClientConfirmCodeDtoRq confirmCode = default(ClientConfirmCodeDtoRq))
        {
            this.ConfirmPurpose = confirmPurpose;
            this.ConfirmCode = confirmCode;
        }

        /// <summary>
        /// Gets or Sets ConfirmCode
        /// </summary>
        [DataMember(Name = "confirmCode", EmitDefaultValue = false)]
        public ClientConfirmCodeDtoRq ConfirmCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientConfirmDtoRq {\n");
            sb.Append("  ConfirmPurpose: ").Append(ConfirmPurpose).Append("\n");
            sb.Append("  ConfirmCode: ").Append(ConfirmCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientConfirmDtoRq);
        }

        /// <summary>
        /// Returns true if ClientConfirmDtoRq instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientConfirmDtoRq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientConfirmDtoRq input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConfirmPurpose == input.ConfirmPurpose ||
                    this.ConfirmPurpose.Equals(input.ConfirmPurpose)
                ) && 
                (
                    this.ConfirmCode == input.ConfirmCode ||
                    (this.ConfirmCode != null &&
                    this.ConfirmCode.Equals(input.ConfirmCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ConfirmPurpose.GetHashCode();
                if (this.ConfirmCode != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
