/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UniversalPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UniversalPaymentClient.Model
{
    /// <summary>
    /// Информация о счете клиента
    /// </summary>
    [DataContract(Name = "AccountDtoRs")]
    public partial class AccountDtoRs : IEquatable<AccountDtoRs>, IValidatableObject
    {
        /// <summary>
        /// Общий тип продукта
        /// </summary>
        /// <value>Общий тип продукта</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNT for value: ACCOUNT
            /// </summary>
            [EnumMember(Value = "ACCOUNT")]
            ACCOUNT = 1,

            /// <summary>
            /// Enum CARD for value: CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARD = 2
        }


        /// <summary>
        /// Общий тип продукта
        /// </summary>
        /// <value>Общий тип продукта</value>
        [DataMember(Name = "productType", IsRequired = true, EmitDefaultValue = true)]
        public ProductTypeEnum ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDtoRs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDtoRs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDtoRs" /> class.
        /// </summary>
        /// <param name="publicId">Публичный идентификатор продукта (required).</param>
        /// <param name="productType">Общий тип продукта (required).</param>
        public AccountDtoRs(string publicId = default(string), ProductTypeEnum productType = default(ProductTypeEnum))
        {
            // to ensure "publicId" is required (not null)
            if (publicId == null)
            {
                throw new ArgumentNullException("publicId is a required property for AccountDtoRs and cannot be null");
            }
            this.PublicId = publicId;
            this.ProductType = productType;
        }

        /// <summary>
        /// Публичный идентификатор продукта
        /// </summary>
        /// <value>Публичный идентификатор продукта</value>
        [DataMember(Name = "publicId", IsRequired = true, EmitDefaultValue = true)]
        public string PublicId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountDtoRs {\n");
            sb.Append("  PublicId: ").Append(PublicId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDtoRs);
        }

        /// <summary>
        /// Returns true if AccountDtoRs instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDtoRs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDtoRs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PublicId == input.PublicId ||
                    (this.PublicId != null &&
                    this.PublicId.Equals(input.PublicId))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    this.ProductType.Equals(input.ProductType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicId != null)
                {
                    hashCode = (hashCode * 59) + this.PublicId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PublicId (string) maxLength
            if (this.PublicId != null && this.PublicId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicId, length must be less than 36.", new [] { "PublicId" });
            }

            yield break;
        }
    }

}
