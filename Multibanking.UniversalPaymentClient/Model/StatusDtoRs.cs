/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Статус ответа
/// </summary>
[DataContract(Name = "StatusDtoRs")]
public class StatusDtoRs : IEquatable<StatusDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="StatusDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected StatusDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="StatusDtoRs" /> class.
    /// </summary>
    /// <param name="code">Код статуса (required).</param>
    /// <param name="message">Сообщение.</param>
    public StatusDtoRs(string code = default, string message = default)
    {
        // to ensure "code" is required (not null)
        if (code == null) throw new ArgumentNullException("code is a required property for StatusDtoRs and cannot be null");
        Code = code;
        Message = message;
    }

    /// <summary>
    ///     Код статуса
    /// </summary>
    /// <value>Код статуса</value>
    [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
    public string Code { get; set; }

    /// <summary>
    ///     Сообщение
    /// </summary>
    /// <value>Сообщение</value>
    [DataMember(Name = "message", EmitDefaultValue = false)]
    public string Message { get; set; }

    /// <summary>
    ///     Returns true if StatusDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of StatusDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(StatusDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Code == input.Code ||
                (Code != null &&
                 Code.Equals(input.Code))
            ) &&
            (
                Message == input.Message ||
                (Message != null &&
                 Message.Equals(input.Message))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Code (string) maxLength
        if (Code != null && Code.Length > 255) yield return new ValidationResult("Invalid value for Code, length must be less than 255.", new[] { "Code" });

        // Message (string) maxLength
        if (Message != null && Message.Length > 255) yield return new ValidationResult("Invalid value for Message, length must be less than 255.", new[] { "Message" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class StatusDtoRs {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as StatusDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
            if (Message != null) hashCode = hashCode * 59 + Message.GetHashCode();
            return hashCode;
        }
    }
}