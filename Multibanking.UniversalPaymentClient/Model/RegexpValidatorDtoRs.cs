/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Валидатор платежного поля ответ
/// </summary>
[DataContract(Name = "RegexpValidatorDtoRs")]
public class RegexpValidatorDtoRs : IEquatable<RegexpValidatorDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="RegexpValidatorDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected RegexpValidatorDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="RegexpValidatorDtoRs" /> class.
    /// </summary>
    /// <param name="key">Ключ валидатора по которому фронт может строить доп логику (required).</param>
    /// <param name="regexp">Регулярное выражение для валидации (required).</param>
    /// <param name="description">Описание валидатора (required).</param>
    /// <param name="errorMessage">Сообщение при ошибке (required).</param>
    public RegexpValidatorDtoRs(string key = default, string regexp = default, string description = default, string errorMessage = default)
    {
        // to ensure "key" is required (not null)
        if (key == null) throw new ArgumentNullException("key is a required property for RegexpValidatorDtoRs and cannot be null");
        Key = key;
        // to ensure "regexp" is required (not null)
        if (regexp == null) throw new ArgumentNullException("regexp is a required property for RegexpValidatorDtoRs and cannot be null");
        Regexp = regexp;
        // to ensure "description" is required (not null)
        if (description == null) throw new ArgumentNullException("description is a required property for RegexpValidatorDtoRs and cannot be null");
        Description = description;
        // to ensure "errorMessage" is required (not null)
        if (errorMessage == null) throw new ArgumentNullException("errorMessage is a required property for RegexpValidatorDtoRs and cannot be null");
        ErrorMessage = errorMessage;
    }

    /// <summary>
    ///     Ключ валидатора по которому фронт может строить доп логику
    /// </summary>
    /// <value>Ключ валидатора по которому фронт может строить доп логику</value>
    [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
    public string Key { get; set; }

    /// <summary>
    ///     Регулярное выражение для валидации
    /// </summary>
    /// <value>Регулярное выражение для валидации</value>
    [DataMember(Name = "regexp", IsRequired = true, EmitDefaultValue = true)]
    public string Regexp { get; set; }

    /// <summary>
    ///     Описание валидатора
    /// </summary>
    /// <value>Описание валидатора</value>
    [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
    public string Description { get; set; }

    /// <summary>
    ///     Сообщение при ошибке
    /// </summary>
    /// <value>Сообщение при ошибке</value>
    [DataMember(Name = "errorMessage", IsRequired = true, EmitDefaultValue = true)]
    public string ErrorMessage { get; set; }

    /// <summary>
    ///     Returns true if RegexpValidatorDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of RegexpValidatorDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(RegexpValidatorDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Key == input.Key ||
                (Key != null &&
                 Key.Equals(input.Key))
            ) &&
            (
                Regexp == input.Regexp ||
                (Regexp != null &&
                 Regexp.Equals(input.Regexp))
            ) &&
            (
                Description == input.Description ||
                (Description != null &&
                 Description.Equals(input.Description))
            ) &&
            (
                ErrorMessage == input.ErrorMessage ||
                (ErrorMessage != null &&
                 ErrorMessage.Equals(input.ErrorMessage))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Key (string) maxLength
        if (Key != null && Key.Length > 255) yield return new ValidationResult("Invalid value for Key, length must be less than 255.", new[] { "Key" });

        // Regexp (string) maxLength
        if (Regexp != null && Regexp.Length > 255) yield return new ValidationResult("Invalid value for Regexp, length must be less than 255.", new[] { "Regexp" });

        // Description (string) maxLength
        if (Description != null && Description.Length > 255)
            yield return new ValidationResult("Invalid value for Description, length must be less than 255.", new[] { "Description" });

        // ErrorMessage (string) maxLength
        if (ErrorMessage != null && ErrorMessage.Length > 255)
            yield return new ValidationResult("Invalid value for ErrorMessage, length must be less than 255.", new[] { "ErrorMessage" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class RegexpValidatorDtoRs {\n");
        sb.Append("  Key: ").Append(Key).Append("\n");
        sb.Append("  Regexp: ").Append(Regexp).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as RegexpValidatorDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Key != null) hashCode = hashCode * 59 + Key.GetHashCode();
            if (Regexp != null) hashCode = hashCode * 59 + Regexp.GetHashCode();
            if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
            if (ErrorMessage != null) hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
            return hashCode;
        }
    }
}