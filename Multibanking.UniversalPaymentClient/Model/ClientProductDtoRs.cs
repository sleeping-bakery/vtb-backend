/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Информация о продукте клиента
/// </summary>
[DataContract(Name = "ClientProductDtoRs")]
public class ClientProductDtoRs : IEquatable<ClientProductDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ClientProductDtoRs" /> class.
    /// </summary>
    /// <param name="account">account.</param>
    /// <param name="card">card.</param>
    public ClientProductDtoRs(AccountDtoRs account = default, CardDtoRs card = default)
    {
        Account = account;
        Card = card;
    }

    /// <summary>
    ///     Gets or Sets Account
    /// </summary>
    [DataMember(Name = "account", EmitDefaultValue = false)]
    public AccountDtoRs Account { get; set; }

    /// <summary>
    ///     Gets or Sets Card
    /// </summary>
    [DataMember(Name = "card", EmitDefaultValue = false)]
    public CardDtoRs Card { get; set; }

    /// <summary>
    ///     Returns true if ClientProductDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of ClientProductDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ClientProductDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Account == input.Account ||
                (Account != null &&
                 Account.Equals(input.Account))
            ) &&
            (
                Card == input.Card ||
                (Card != null &&
                 Card.Equals(input.Card))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ClientProductDtoRs {\n");
        sb.Append("  Account: ").Append(Account).Append("\n");
        sb.Append("  Card: ").Append(Card).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ClientProductDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Account != null) hashCode = hashCode * 59 + Account.GetHashCode();
            if (Card != null) hashCode = hashCode * 59 + Card.GetHashCode();
            return hashCode;
        }
    }
}