/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.UniversalPaymentClient.Model;

/// <summary>
///     Информация о услуге ПУ для начала оплаты
/// </summary>
[DataContract(Name = "ProviderServiceDtoRq")]
public class ProviderServiceDtoRq : IEquatable<ProviderServiceDtoRq>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ProviderServiceDtoRq" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ProviderServiceDtoRq()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ProviderServiceDtoRq" /> class.
    /// </summary>
    /// <param name="id">Id услуги поставщика услуг (required).</param>
    public ProviderServiceDtoRq(string id = default)
    {
        // to ensure "id" is required (not null)
        if (id == null) throw new ArgumentNullException("id is a required property for ProviderServiceDtoRq and cannot be null");
        Id = id;
    }

    /// <summary>
    ///     Id услуги поставщика услуг
    /// </summary>
    /// <value>Id услуги поставщика услуг</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    ///     Returns true if ProviderServiceDtoRq instances are equal
    /// </summary>
    /// <param name="input">Instance of ProviderServiceDtoRq to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ProviderServiceDtoRq input)
    {
        if (input == null) return false;
        return
            Id == input.Id ||
            (Id != null &&
             Id.Equals(input.Id));
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) maxLength
        if (Id != null && Id.Length > 255) yield return new ValidationResult("Invalid value for Id, length must be less than 255.", new[] { "Id" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ProviderServiceDtoRq {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ProviderServiceDtoRq);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            return hashCode;
        }
    }
}