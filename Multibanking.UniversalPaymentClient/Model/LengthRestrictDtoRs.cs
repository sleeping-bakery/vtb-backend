/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.UniversalPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.UniversalPaymentClient.Model
{
    /// <summary>
    /// Ограничение количества символов для значения поля
    /// </summary>
    [DataContract(Name = "LengthRestrictDtoRs")]
    public partial class LengthRestrictDtoRs : IEquatable<LengthRestrictDtoRs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LengthRestrictDtoRs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LengthRestrictDtoRs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LengthRestrictDtoRs" /> class.
        /// </summary>
        /// <param name="min">Минимальное число символов в значении, включительно (required).</param>
        /// <param name="max">Максимальное число символов в строке, включительно (required).</param>
        public LengthRestrictDtoRs(int min = default(int), int max = default(int))
        {
            this.Min = min;
            this.Max = max;
        }

        /// <summary>
        /// Минимальное число символов в значении, включительно
        /// </summary>
        /// <value>Минимальное число символов в значении, включительно</value>
        [DataMember(Name = "min", IsRequired = true, EmitDefaultValue = true)]
        public int Min { get; set; }

        /// <summary>
        /// Максимальное число символов в строке, включительно
        /// </summary>
        /// <value>Максимальное число символов в строке, включительно</value>
        [DataMember(Name = "max", IsRequired = true, EmitDefaultValue = true)]
        public int Max { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LengthRestrictDtoRs {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LengthRestrictDtoRs);
        }

        /// <summary>
        /// Returns true if LengthRestrictDtoRs instances are equal
        /// </summary>
        /// <param name="input">Instance of LengthRestrictDtoRs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LengthRestrictDtoRs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Min == input.Min ||
                    this.Min.Equals(input.Min)
                ) && 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Min.GetHashCode();
                hashCode = (hashCode * 59) + this.Max.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Min (int) maximum
            if (this.Min > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Min, must be a value less than or equal to 255.", new [] { "Min" });
            }

            // Min (int) minimum
            if (this.Min < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Min, must be a value greater than or equal to 0.", new [] { "Min" });
            }

            // Max (int) maximum
            if (this.Max > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Max, must be a value less than or equal to 255.", new [] { "Max" });
            }

            // Max (int) minimum
            if (this.Max < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Max, must be a value greater than or equal to 0.", new [] { "Max" });
            }

            yield break;
        }
    }

}
