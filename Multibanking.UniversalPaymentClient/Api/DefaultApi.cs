/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Multibanking.UniversalPaymentClient.Client;
using Multibanking.UniversalPaymentClient.Model;

namespace Multibanking.UniversalPaymentClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfirmPaymentDtoRs</returns>
        ConfirmPaymentDtoRs Confirm(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0);

        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfirmPaymentDtoRs</returns>
        ApiResponse<ConfirmPaymentDtoRs> ConfirmWithHttpInfo(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0);
        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientProductsDtoRs</returns>
        ClientProductsDtoRs GetClientProducts(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientProductsDtoRs</returns>
        ApiResponse<ClientProductsDtoRs> GetClientProductsWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Запрос детальной информации по универсальному платежу
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentDtoRs</returns>
        PaymentDtoRs GetPayment(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0);

        /// <summary>
        /// Запрос детальной информации по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentDtoRs</returns>
        ApiResponse<PaymentDtoRs> GetPaymentWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0);
        /// <summary>
        /// Запрос чека по универсальному платежу
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentCheckDtoRs</returns>
        PaymentCheckDtoRs GetPaymentCheck(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0);

        /// <summary>
        /// Запрос чека по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentCheckDtoRs</returns>
        ApiResponse<PaymentCheckDtoRs> GetPaymentCheckWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0);
        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestPaymentDtoRs</returns>
        RequestPaymentDtoRs Request(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0);

        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestPaymentDtoRs</returns>
        ApiResponse<RequestPaymentDtoRs> RequestWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0);
        /// <summary>
        /// Запрос на старт оплаты универсального платежа
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartPaymentDtoRs</returns>
        StartPaymentDtoRs Start(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0);

        /// <summary>
        /// Запрос на старт оплаты универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartPaymentDtoRs</returns>
        ApiResponse<StartPaymentDtoRs> StartWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmPaymentDtoRs</returns>
        System.Threading.Tasks.Task<ConfirmPaymentDtoRs> ConfirmAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmPaymentDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConfirmPaymentDtoRs>> ConfirmWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProductsDtoRs</returns>
        System.Threading.Tasks.Task<ClientProductsDtoRs> GetClientProductsAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProductsDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientProductsDtoRs>> GetClientProductsWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запрос детальной информации по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentDtoRs</returns>
        System.Threading.Tasks.Task<PaymentDtoRs> GetPaymentAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запрос детальной информации по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentDtoRs>> GetPaymentWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запрос чека по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentCheckDtoRs</returns>
        System.Threading.Tasks.Task<PaymentCheckDtoRs> GetPaymentCheckAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запрос чека по универсальному платежу
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentCheckDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentCheckDtoRs>> GetPaymentCheckWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestPaymentDtoRs</returns>
        System.Threading.Tasks.Task<RequestPaymentDtoRs> RequestAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запрос на оплату универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestPaymentDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestPaymentDtoRs>> RequestWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запрос на старт оплаты универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartPaymentDtoRs</returns>
        System.Threading.Tasks.Task<StartPaymentDtoRs> StartAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запрос на старт оплаты универсального платежа
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartPaymentDtoRs)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartPaymentDtoRs>> StartWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniversalPaymentApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniversalPaymentApi : IUniversalPaymentApi
    {
        private Multibanking.UniversalPaymentClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniversalPaymentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalPaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniversalPaymentApi(string basePath)
        {
            this.Configuration = Multibanking.UniversalPaymentClient.Client.Configuration.MergeConfigurations(
                Multibanking.UniversalPaymentClient.Client.GlobalConfiguration.Instance,
                new Multibanking.UniversalPaymentClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Multibanking.UniversalPaymentClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.UniversalPaymentClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Multibanking.UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalPaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniversalPaymentApi(Multibanking.UniversalPaymentClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Multibanking.UniversalPaymentClient.Client.Configuration.MergeConfigurations(
                Multibanking.UniversalPaymentClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Multibanking.UniversalPaymentClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Multibanking.UniversalPaymentClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Multibanking.UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniversalPaymentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UniversalPaymentApi(Multibanking.UniversalPaymentClient.Client.ISynchronousClient client, Multibanking.UniversalPaymentClient.Client.IAsynchronousClient asyncClient, Multibanking.UniversalPaymentClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Multibanking.UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Multibanking.UniversalPaymentClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Multibanking.UniversalPaymentClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Multibanking.UniversalPaymentClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Multibanking.UniversalPaymentClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfirmPaymentDtoRs</returns>
        public ConfirmPaymentDtoRs Confirm(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<ConfirmPaymentDtoRs> localVarResponse = ConfirmWithHttpInfo(X_UNC, X_MDM_ID, X_USER_SESSION_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, confirmPaymentDtoRq, X_TB_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfirmPaymentDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<ConfirmPaymentDtoRs> ConfirmWithHttpInfo(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_USER_SESSION_ID' is set
            if (X_USER_SESSION_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_USER_SESSION_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'confirmPaymentDtoRq' is set
            if (confirmPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'confirmPaymentDtoRq' when calling UniversalPaymentApi->Confirm");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            if (X_TB_ID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TB-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_TB_ID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-USER-SESSION-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_USER_SESSION_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = confirmPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Confirm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConfirmPaymentDtoRs>("/payments/confirm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Confirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfirmPaymentDtoRs</returns>
        public async System.Threading.Tasks.Task<ConfirmPaymentDtoRs> ConfirmAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<ConfirmPaymentDtoRs> localVarResponse = await ConfirmWithHttpInfoAsync(X_UNC, X_MDM_ID, X_USER_SESSION_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, confirmPaymentDtoRq, X_TB_ID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="confirmPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfirmPaymentDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<ConfirmPaymentDtoRs>> ConfirmWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_USER_SESSION_ID' is set
            if (X_USER_SESSION_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_USER_SESSION_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Confirm");
            }

            // verify the required parameter 'confirmPaymentDtoRq' is set
            if (confirmPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'confirmPaymentDtoRq' when calling UniversalPaymentApi->Confirm");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            if (X_TB_ID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TB-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_TB_ID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-USER-SESSION-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_USER_SESSION_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = confirmPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Confirm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConfirmPaymentDtoRs>("/payments/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Confirm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientProductsDtoRs</returns>
        public ClientProductsDtoRs GetClientProducts(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<ClientProductsDtoRs> localVarResponse = GetClientProductsWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, minBalance);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientProductsDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<ClientProductsDtoRs> GetClientProductsWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetClientProducts");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minBalance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToMultiMap("", "minBalance", minBalance));
            }
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetClientProducts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientProductsDtoRs>("/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientProductsDtoRs</returns>
        public async System.Threading.Tasks.Task<ClientProductsDtoRs> GetClientProductsAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<ClientProductsDtoRs> localVarResponse = await GetClientProductsWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, minBalance, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка продуктов, доступных для оплаты универсальных платежей 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientProductsDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<ClientProductsDtoRs>> GetClientProductsWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetClientProducts");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetClientProducts");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minBalance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToMultiMap("", "minBalance", minBalance));
            }
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetClientProducts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientProductsDtoRs>("/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос детальной информации по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentDtoRs</returns>
        public PaymentDtoRs GetPayment(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentDtoRs> localVarResponse = GetPaymentWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос детальной информации по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentDtoRs> GetPaymentWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPayment");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentDtoRs>("/payments/{paymentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос детальной информации по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentDtoRs</returns>
        public async System.Threading.Tasks.Task<PaymentDtoRs> GetPaymentAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentDtoRs> localVarResponse = await GetPaymentWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос детальной информации по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentDtoRs>> GetPaymentWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPayment");
            }

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPayment");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentDtoRs>("/payments/{paymentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос чека по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentCheckDtoRs</returns>
        public PaymentCheckDtoRs GetPaymentCheck(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentCheckDtoRs> localVarResponse = GetPaymentCheckWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос чека по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentCheckDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentCheckDtoRs> GetPaymentCheckWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetPaymentCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentCheckDtoRs>("/payments/{paymentId}/check", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос чека по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentCheckDtoRs</returns>
        public async System.Threading.Tasks.Task<PaymentCheckDtoRs> GetPaymentCheckAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentCheckDtoRs> localVarResponse = await GetPaymentCheckWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос чека по универсальному платежу 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="paymentId">Идентификатор платежа</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentCheckDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<PaymentCheckDtoRs>> GetPaymentCheckWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPaymentCheck");
            }

            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPaymentCheck");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("paymentId", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

            localVarRequestOptions.Operation = "UniversalPaymentApi.GetPaymentCheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentCheckDtoRs>("/payments/{paymentId}/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentCheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestPaymentDtoRs</returns>
        public RequestPaymentDtoRs Request(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<RequestPaymentDtoRs> localVarResponse = RequestWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, requestPaymentDtoRq, X_TB_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestPaymentDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<RequestPaymentDtoRs> RequestWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'requestPaymentDtoRq' is set
            if (requestPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'requestPaymentDtoRq' when calling UniversalPaymentApi->Request");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            if (X_TB_ID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TB-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_TB_ID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = requestPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Request";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestPaymentDtoRs>("/payments/request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Request", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestPaymentDtoRs</returns>
        public async System.Threading.Tasks.Task<RequestPaymentDtoRs> RequestAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<RequestPaymentDtoRs> localVarResponse = await RequestWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, requestPaymentDtoRq, X_TB_ID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на оплату универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="requestPaymentDtoRq"></param>
        /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestPaymentDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<RequestPaymentDtoRs>> RequestWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Request");
            }

            // verify the required parameter 'requestPaymentDtoRq' is set
            if (requestPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'requestPaymentDtoRq' when calling UniversalPaymentApi->Request");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            if (X_TB_ID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-TB-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_TB_ID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = requestPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Request";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestPaymentDtoRs>("/payments/request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Request", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос на старт оплаты универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartPaymentDtoRs</returns>
        public StartPaymentDtoRs Start(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0)
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<StartPaymentDtoRs> localVarResponse = StartWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, startPaymentDtoRq);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на старт оплаты универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartPaymentDtoRs</returns>
        public Multibanking.UniversalPaymentClient.Client.ApiResponse<StartPaymentDtoRs> StartWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0)
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'startPaymentDtoRq' is set
            if (startPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'startPaymentDtoRq' when calling UniversalPaymentApi->Start");
            }

            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = startPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Start";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StartPaymentDtoRs>("/payments/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Start", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос на старт оплаты универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartPaymentDtoRs</returns>
        public async System.Threading.Tasks.Task<StartPaymentDtoRs> StartAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Multibanking.UniversalPaymentClient.Client.ApiResponse<StartPaymentDtoRs> localVarResponse = await StartWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, startPaymentDtoRq, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос на старт оплаты универсального платежа 
        /// </summary>
        /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X_UNC">Идентификатор клиента УНК</param>
        /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
        /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
        /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
        /// <param name="X_ROLES">Роли клиента</param>
        /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
        /// <param name="startPaymentDtoRq"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartPaymentDtoRs)</returns>
        public async System.Threading.Tasks.Task<Multibanking.UniversalPaymentClient.Client.ApiResponse<StartPaymentDtoRs>> StartWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'X_UNC' is set
            if (X_UNC == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_MDM_ID' is set
            if (X_MDM_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_PARTNER_ID' is set
            if (X_PARTNER_ID == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_LOGIN_MODE' is set
            if (X_LOGIN_MODE == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_ROLES' is set
            if (X_ROLES == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'X_CHANNEL' is set
            if (X_CHANNEL == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Start");
            }

            // verify the required parameter 'startPaymentDtoRq' is set
            if (startPaymentDtoRq == null)
            {
                throw new Multibanking.UniversalPaymentClient.Client.ApiException(400, "Missing required parameter 'startPaymentDtoRq' when calling UniversalPaymentApi->Start");
            }


            Multibanking.UniversalPaymentClient.Client.RequestOptions localVarRequestOptions = new Multibanking.UniversalPaymentClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "*/*"
            };

            var localVarContentType = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Multibanking.UniversalPaymentClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-UNC", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_UNC)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-ROLES", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_ROLES)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", Multibanking.UniversalPaymentClient.Client.ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
            localVarRequestOptions.Data = startPaymentDtoRq;

            localVarRequestOptions.Operation = "UniversalPaymentApi.Start";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StartPaymentDtoRs>("/payments/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Start", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
