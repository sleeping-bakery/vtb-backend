/*
 * Cервис платежа с базовым сценарием оплаты
 *
 * сервис платежа с базовым сценарием оплаты
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.UniversalPaymentClient.Client;
using Multibanking.UniversalPaymentClient.Model;

namespace Multibanking.UniversalPaymentClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class UniversalPaymentApi : IUniversalPaymentApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="UniversalPaymentApi" /> class.
    /// </summary>
    /// <returns></returns>
    public UniversalPaymentApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="UniversalPaymentApi" /> class.
    /// </summary>
    /// <returns></returns>
    public UniversalPaymentApi(string basePath)
    {
        Configuration = UniversalPaymentClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="UniversalPaymentApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public UniversalPaymentApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = UniversalPaymentClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="UniversalPaymentApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public UniversalPaymentApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = UniversalPaymentClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="confirmPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ConfirmPaymentDtoRs</returns>
    public ConfirmPaymentDtoRs Confirm(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0)
    {
        var localVarResponse = ConfirmWithHttpInfo(X_UNC, X_MDM_ID, X_USER_SESSION_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, confirmPaymentDtoRq, X_TB_ID);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="confirmPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ConfirmPaymentDtoRs</returns>
    public ApiResponse<ConfirmPaymentDtoRs> ConfirmWithHttpInfo(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE,
        List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_USER_SESSION_ID' is set
        if (X_USER_SESSION_ID == null) throw new ApiException(400, "Missing required parameter 'X_USER_SESSION_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'confirmPaymentDtoRq' is set
        if (confirmPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'confirmPaymentDtoRq' when calling UniversalPaymentApi->Confirm");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        if (X_TB_ID != null) localVarRequestOptions.HeaderParameters.Add("X-TB-ID", ClientUtils.ParameterToString(X_TB_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-USER-SESSION-ID", ClientUtils.ParameterToString(X_USER_SESSION_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = confirmPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Confirm";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<ConfirmPaymentDtoRs>("/payments/confirm", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Confirm", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="confirmPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ConfirmPaymentDtoRs</returns>
    public async Task<ConfirmPaymentDtoRs> ConfirmAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await ConfirmWithHttpInfoAsync(X_UNC, X_MDM_ID, X_USER_SESSION_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, confirmPaymentDtoRq, X_TB_ID,
            operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_USER_SESSION_ID">Идентификатор сессии клиента</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="confirmPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ConfirmPaymentDtoRs)</returns>
    public async Task<ApiResponse<ConfirmPaymentDtoRs>> ConfirmWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_USER_SESSION_ID, string X_PARTNER_ID, string X_LOGIN_MODE,
        List<string> X_ROLES, string X_CHANNEL, ConfirmPaymentDtoRq confirmPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_USER_SESSION_ID' is set
        if (X_USER_SESSION_ID == null) throw new ApiException(400, "Missing required parameter 'X_USER_SESSION_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Confirm");

        // verify the required parameter 'confirmPaymentDtoRq' is set
        if (confirmPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'confirmPaymentDtoRq' when calling UniversalPaymentApi->Confirm");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        if (X_TB_ID != null) localVarRequestOptions.HeaderParameters.Add("X-TB-ID", ClientUtils.ParameterToString(X_TB_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-USER-SESSION-ID", ClientUtils.ParameterToString(X_USER_SESSION_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = confirmPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Confirm";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<ConfirmPaymentDtoRs>("/payments/confirm", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Confirm", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Получение списка продуктов, доступных для оплаты универсальных платежей
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ClientProductsDtoRs</returns>
    public ClientProductsDtoRs GetClientProducts(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        decimal? minBalance = default, int operationIndex = 0)
    {
        var localVarResponse = GetClientProductsWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, minBalance);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Получение списка продуктов, доступных для оплаты универсальных платежей
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ClientProductsDtoRs</returns>
    public ApiResponse<ClientProductsDtoRs> GetClientProductsWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, decimal? minBalance = default, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetClientProducts");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (minBalance != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "minBalance", minBalance));
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetClientProducts";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<ClientProductsDtoRs>("/products", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetClientProducts", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Получение списка продуктов, доступных для оплаты универсальных платежей
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ClientProductsDtoRs</returns>
    public async Task<ClientProductsDtoRs> GetClientProductsAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        decimal? minBalance = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await GetClientProductsWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, minBalance, operationIndex, cancellationToken)
                .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Получение списка продуктов, доступных для оплаты универсальных платежей
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="minBalance">Баланс который должен  быть в наличии у продуктов клиента (optional, default to 0M)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ClientProductsDtoRs)</returns>
    public async Task<ApiResponse<ClientProductsDtoRs>> GetClientProductsWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE,
        List<string> X_ROLES, string X_CHANNEL, decimal? minBalance = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetClientProducts");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetClientProducts");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (minBalance != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "minBalance", minBalance));
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetClientProducts";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<ClientProductsDtoRs>("/products", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetClientProducts", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос детальной информации по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>PaymentDtoRs</returns>
    public PaymentDtoRs GetPayment(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId,
        int operationIndex = 0)
    {
        var localVarResponse = GetPaymentWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос детальной информации по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of PaymentDtoRs</returns>
    public ApiResponse<PaymentDtoRs> GetPaymentWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        string paymentId, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) throw new ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPayment");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("paymentId", ClientUtils.ParameterToString(paymentId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetPayment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<PaymentDtoRs>("/payments/{paymentId}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetPayment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос детальной информации по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of PaymentDtoRs</returns>
    public async Task<PaymentDtoRs> GetPaymentAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        string paymentId, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetPaymentWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос детальной информации по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (PaymentDtoRs)</returns>
    public async Task<ApiResponse<PaymentDtoRs>> GetPaymentWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, string paymentId, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPayment");

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) throw new ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPayment");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("paymentId", ClientUtils.ParameterToString(paymentId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetPayment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<PaymentDtoRs>("/payments/{paymentId}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetPayment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос чека по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>PaymentCheckDtoRs</returns>
    public PaymentCheckDtoRs GetPaymentCheck(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL, string paymentId,
        int operationIndex = 0)
    {
        var localVarResponse = GetPaymentCheckWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос чека по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of PaymentCheckDtoRs</returns>
    public ApiResponse<PaymentCheckDtoRs> GetPaymentCheckWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, string paymentId, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) throw new ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPaymentCheck");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("paymentId", ClientUtils.ParameterToString(paymentId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetPaymentCheck";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<PaymentCheckDtoRs>("/payments/{paymentId}/check", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetPaymentCheck", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос чека по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of PaymentCheckDtoRs</returns>
    public async Task<PaymentCheckDtoRs> GetPaymentCheckAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        string paymentId, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetPaymentCheckWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, paymentId, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос чека по универсальному платежу
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="paymentId">Идентификатор платежа</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (PaymentCheckDtoRs)</returns>
    public async Task<ApiResponse<PaymentCheckDtoRs>> GetPaymentCheckWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE,
        List<string> X_ROLES, string X_CHANNEL, string paymentId, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->GetPaymentCheck");

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) throw new ApiException(400, "Missing required parameter 'paymentId' when calling UniversalPaymentApi->GetPaymentCheck");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("paymentId", ClientUtils.ParameterToString(paymentId)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter

        localVarRequestOptions.Operation = "UniversalPaymentApi.GetPaymentCheck";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<PaymentCheckDtoRs>("/payments/{paymentId}/check", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetPaymentCheck", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="requestPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>RequestPaymentDtoRs</returns>
    public RequestPaymentDtoRs Request(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0)
    {
        var localVarResponse = RequestWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, requestPaymentDtoRq, X_TB_ID);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="requestPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of RequestPaymentDtoRs</returns>
    public ApiResponse<RequestPaymentDtoRs> RequestWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'requestPaymentDtoRq' is set
        if (requestPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'requestPaymentDtoRq' when calling UniversalPaymentApi->Request");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        if (X_TB_ID != null) localVarRequestOptions.HeaderParameters.Add("X-TB-ID", ClientUtils.ParameterToString(X_TB_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = requestPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Request";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<RequestPaymentDtoRs>("/payments/request", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Request", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="requestPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RequestPaymentDtoRs</returns>
    public async Task<RequestPaymentDtoRs> RequestAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await RequestWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, requestPaymentDtoRq, X_TB_ID, operationIndex, cancellationToken)
                .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на оплату универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="requestPaymentDtoRq"></param>
    /// <param name="X_TB_ID">Идентификатор клиента TB id (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RequestPaymentDtoRs)</returns>
    public async Task<ApiResponse<RequestPaymentDtoRs>> RequestWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, RequestPaymentDtoRq requestPaymentDtoRq, string X_TB_ID = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Request");

        // verify the required parameter 'requestPaymentDtoRq' is set
        if (requestPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'requestPaymentDtoRq' when calling UniversalPaymentApi->Request");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        if (X_TB_ID != null) localVarRequestOptions.HeaderParameters.Add("X-TB-ID", ClientUtils.ParameterToString(X_TB_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = requestPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Request";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<RequestPaymentDtoRs>("/payments/request", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Request", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос на старт оплаты универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="startPaymentDtoRq"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StartPaymentDtoRs</returns>
    public StartPaymentDtoRs Start(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0)
    {
        var localVarResponse = StartWithHttpInfo(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, startPaymentDtoRq);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на старт оплаты универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="startPaymentDtoRq"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StartPaymentDtoRs</returns>
    public ApiResponse<StartPaymentDtoRs> StartWithHttpInfo(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'startPaymentDtoRq' is set
        if (startPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'startPaymentDtoRq' when calling UniversalPaymentApi->Start");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = startPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Start";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<StartPaymentDtoRs>("/payments/start", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Start", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Запрос на старт оплаты универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="startPaymentDtoRq"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StartPaymentDtoRs</returns>
    public async Task<StartPaymentDtoRs> StartAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES, string X_CHANNEL,
        StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await StartWithHttpInfoAsync(X_UNC, X_MDM_ID, X_PARTNER_ID, X_LOGIN_MODE, X_ROLES, X_CHANNEL, startPaymentDtoRq, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Запрос на старт оплаты универсального платежа
    /// </summary>
    /// <exception cref="Multibanking.UniversalPaymentClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="X_UNC">Идентификатор клиента УНК</param>
    /// <param name="X_MDM_ID">Идентификатор клиента mdm id</param>
    /// <param name="X_PARTNER_ID">Идентификатор партнера ВТБ</param>
    /// <param name="X_LOGIN_MODE">Режим входа в ВТБ</param>
    /// <param name="X_ROLES">Роли клиента</param>
    /// <param name="X_CHANNEL">Идентификатор канала клиента</param>
    /// <param name="startPaymentDtoRq"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StartPaymentDtoRs)</returns>
    public async Task<ApiResponse<StartPaymentDtoRs>> StartWithHttpInfoAsync(string X_UNC, string X_MDM_ID, string X_PARTNER_ID, string X_LOGIN_MODE, List<string> X_ROLES,
        string X_CHANNEL, StartPaymentDtoRq startPaymentDtoRq, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'X_UNC' is set
        if (X_UNC == null) throw new ApiException(400, "Missing required parameter 'X_UNC' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_MDM_ID' is set
        if (X_MDM_ID == null) throw new ApiException(400, "Missing required parameter 'X_MDM_ID' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_PARTNER_ID' is set
        if (X_PARTNER_ID == null) throw new ApiException(400, "Missing required parameter 'X_PARTNER_ID' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_LOGIN_MODE' is set
        if (X_LOGIN_MODE == null) throw new ApiException(400, "Missing required parameter 'X_LOGIN_MODE' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_ROLES' is set
        if (X_ROLES == null) throw new ApiException(400, "Missing required parameter 'X_ROLES' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'X_CHANNEL' is set
        if (X_CHANNEL == null) throw new ApiException(400, "Missing required parameter 'X_CHANNEL' when calling UniversalPaymentApi->Start");

        // verify the required parameter 'startPaymentDtoRq' is set
        if (startPaymentDtoRq == null) throw new ApiException(400, "Missing required parameter 'startPaymentDtoRq' when calling UniversalPaymentApi->Start");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json",
            "*/*"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.HeaderParameters.Add("X-UNC", ClientUtils.ParameterToString(X_UNC)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-MDM-ID", ClientUtils.ParameterToString(X_MDM_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-PARTNER-ID", ClientUtils.ParameterToString(X_PARTNER_ID)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-LOGIN-MODE", ClientUtils.ParameterToString(X_LOGIN_MODE)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-ROLES", ClientUtils.ParameterToString(X_ROLES)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("X-CHANNEL", ClientUtils.ParameterToString(X_CHANNEL)); // header parameter
        localVarRequestOptions.Data = startPaymentDtoRq;

        localVarRequestOptions.Operation = "UniversalPaymentApi.Start";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<StartPaymentDtoRs>("/payments/start", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("Start", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}