/*
 * Сервис управления картой ФЛ, информационные запросы
 *
 * Микросервис реализующий базовые операции с банковскими картами
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.CardInformationClient.Model;

/// <summary>
///     Параметры
/// </summary>
[DataContract(Name = "ParameterDto")]
public class ParameterDto : IEquatable<ParameterDto>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ParameterDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ParameterDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ParameterDto" /> class.
    /// </summary>
    /// <param name="name">Имя параметра (required).</param>
    /// <param name="value">Значение параметра (required).</param>
    public ParameterDto(string name = default, string value = default)
    {
        // to ensure "name" is required (not null)
        if (name == null) throw new ArgumentNullException("name is a required property for ParameterDto and cannot be null");
        Name = name;
        // to ensure "value" is required (not null)
        if (value == null) throw new ArgumentNullException("value is a required property for ParameterDto and cannot be null");
        Value = value;
    }

    /// <summary>
    ///     Имя параметра
    /// </summary>
    /// <value>Имя параметра</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Значение параметра
    /// </summary>
    /// <value>Значение параметра</value>
    [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
    public string Value { get; set; }

    /// <summary>
    ///     Returns true if ParameterDto instances are equal
    /// </summary>
    /// <param name="input">Instance of ParameterDto to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ParameterDto input)
    {
        if (input == null) return false;
        return
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                Value == input.Value ||
                (Value != null &&
                 Value.Equals(input.Value))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Name (string) maxLength
        if (Name != null && Name.Length > 500) yield return new ValidationResult("Invalid value for Name, length must be less than 500.", new[] { "Name" });

        // Value (string) maxLength
        if (Value != null && Value.Length > 5000) yield return new ValidationResult("Invalid value for Value, length must be less than 5000.", new[] { "Value" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ParameterDto {\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Value: ").Append(Value).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ParameterDto);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (Value != null) hashCode = hashCode * 59 + Value.GetHashCode();
            return hashCode;
        }
    }
}