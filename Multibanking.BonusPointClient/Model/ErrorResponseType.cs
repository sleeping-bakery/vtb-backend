/*
 * Оплата баллами бонусов
 *
 * Позволяет пользователям просматривать и использовать свои награды.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.BonusPointClient.Model;

/// <summary>
///     Ответ об ошибке API
/// </summary>
[DataContract(Name = "ErrorResponseType")]
public class ErrorResponseType : IEquatable<ErrorResponseType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ErrorResponseType" /> class.
    /// </summary>
    /// <param name="meta">Содержит нестандартную метаинформацию.</param>
    /// <param name="errors">Содержит одно или несколько сообщений об ошибках и является взаимоисключающим с элементом данных.  Это не будет возвращено в успешных сценариях. .</param>
    public ErrorResponseType(Dictionary<string, object> meta = default, List<ErrorType> errors = default)
    {
        Meta = meta;
        Errors = errors;
    }

    /// <summary>
    ///     Содержит нестандартную метаинформацию
    /// </summary>
    /// <value>Содержит нестандартную метаинформацию</value>
    [DataMember(Name = "meta", EmitDefaultValue = false)]
    public Dictionary<string, object> Meta { get; set; }

    /// <summary>
    ///     Содержит одно или несколько сообщений об ошибках и является взаимоисключающим с элементом данных.  Это не будет возвращено в успешных сценариях.
    /// </summary>
    /// <value>Содержит одно или несколько сообщений об ошибках и является взаимоисключающим с элементом данных.  Это не будет возвращено в успешных сценариях. </value>
    [DataMember(Name = "errors", EmitDefaultValue = false)]
    public List<ErrorType> Errors { get; set; }

    /// <summary>
    ///     Returns true if ErrorResponseType instances are equal
    /// </summary>
    /// <param name="input">Instance of ErrorResponseType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ErrorResponseType input)
    {
        if (input == null) return false;
        return
            (
                Meta == input.Meta ||
                (Meta != null &&
                 input.Meta != null &&
                 Meta.SequenceEqual(input.Meta))
            ) &&
            (
                Errors == input.Errors ||
                (Errors != null &&
                 input.Errors != null &&
                 Errors.SequenceEqual(input.Errors))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ErrorResponseType {\n");
        sb.Append("  Meta: ").Append(Meta).Append("\n");
        sb.Append("  Errors: ").Append(Errors).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ErrorResponseType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Meta != null) hashCode = hashCode * 59 + Meta.GetHashCode();
            if (Errors != null) hashCode = hashCode * 59 + Errors.GetHashCode();
            return hashCode;
        }
    }
}