/*
 * Оплата баллами бонусов
 *
 * Позволяет пользователям просматривать и использовать свои награды.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.BonusPointClient.Client.OpenAPIDateConverter;

namespace Multibanking.BonusPointClient.Model
{
    /// <summary>
    /// Выписка суммы кредита и связанных с ней атрибутов программы.
    /// </summary>
    [DataContract(Name = "RedemptionRequestV2")]
    public partial class RedemptionRequestV2 : IEquatable<RedemptionRequestV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionRequestV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RedemptionRequestV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionRequestV2" /> class.
        /// </summary>
        /// <param name="redemptionReferenceNumber">UUID для отслеживания каждого запроса на погашение от партнера. Создается партнером и передается в каждом запросе. (required).</param>
        /// <param name="redemptionAmount">Долларовая стоимость вознаграждений, подлежащих погашению. Минимальные и максимальные пределы зависят от настроек программы. (required).</param>
        /// <param name="valuePerPoint">Обозначает рублевую стоимость вознаграждений. (ex: 1 point &#x3D; 1 р.)..</param>
        /// <param name="programId">Идентификатор программы, полученный из ответа /balance API. (required).</param>
        /// <param name="catalogId">Идентификатор каталога, полученный из ответа /balance API. (required).</param>
        /// <param name="redemptionInfo">redemptionInfo.</param>
        public RedemptionRequestV2(string redemptionReferenceNumber = default(string), decimal redemptionAmount = default(decimal), decimal valuePerPoint = default(decimal), string programId = default(string), string catalogId = default(string), RedemptionInfo redemptionInfo = default(RedemptionInfo))
        {
            // to ensure "redemptionReferenceNumber" is required (not null)
            if (redemptionReferenceNumber == null)
            {
                throw new ArgumentNullException("redemptionReferenceNumber is a required property for RedemptionRequestV2 and cannot be null");
            }
            this.RedemptionReferenceNumber = redemptionReferenceNumber;
            this.RedemptionAmount = redemptionAmount;
            // to ensure "programId" is required (not null)
            if (programId == null)
            {
                throw new ArgumentNullException("programId is a required property for RedemptionRequestV2 and cannot be null");
            }
            this.ProgramId = programId;
            // to ensure "catalogId" is required (not null)
            if (catalogId == null)
            {
                throw new ArgumentNullException("catalogId is a required property for RedemptionRequestV2 and cannot be null");
            }
            this.CatalogId = catalogId;
            this.ValuePerPoint = valuePerPoint;
            this.RedemptionInfo = redemptionInfo;
        }

        /// <summary>
        /// UUID для отслеживания каждого запроса на погашение от партнера. Создается партнером и передается в каждом запросе.
        /// </summary>
        /// <value>UUID для отслеживания каждого запроса на погашение от партнера. Создается партнером и передается в каждом запросе.</value>
        [DataMember(Name = "redemptionReferenceNumber", IsRequired = true, EmitDefaultValue = true)]
        public string RedemptionReferenceNumber { get; set; }

        /// <summary>
        /// Долларовая стоимость вознаграждений, подлежащих погашению. Минимальные и максимальные пределы зависят от настроек программы.
        /// </summary>
        /// <value>Долларовая стоимость вознаграждений, подлежащих погашению. Минимальные и максимальные пределы зависят от настроек программы.</value>
        [DataMember(Name = "redemptionAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal RedemptionAmount { get; set; }

        /// <summary>
        /// Обозначает рублевую стоимость вознаграждений. (ex: 1 point &#x3D; 1 р.).
        /// </summary>
        /// <value>Обозначает рублевую стоимость вознаграждений. (ex: 1 point &#x3D; 1 р.).</value>
        [DataMember(Name = "valuePerPoint", EmitDefaultValue = false)]
        public decimal ValuePerPoint { get; set; }

        /// <summary>
        /// Идентификатор программы, полученный из ответа /balance API.
        /// </summary>
        /// <value>Идентификатор программы, полученный из ответа /balance API.</value>
        [DataMember(Name = "programId", IsRequired = true, EmitDefaultValue = true)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Идентификатор каталога, полученный из ответа /balance API.
        /// </summary>
        /// <value>Идентификатор каталога, полученный из ответа /balance API.</value>
        [DataMember(Name = "catalogId", IsRequired = true, EmitDefaultValue = true)]
        public string CatalogId { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionInfo
        /// </summary>
        [DataMember(Name = "redemptionInfo", EmitDefaultValue = true)]
        public RedemptionInfo RedemptionInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedemptionRequestV2 {\n");
            sb.Append("  RedemptionReferenceNumber: ").Append(RedemptionReferenceNumber).Append("\n");
            sb.Append("  RedemptionAmount: ").Append(RedemptionAmount).Append("\n");
            sb.Append("  ValuePerPoint: ").Append(ValuePerPoint).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  RedemptionInfo: ").Append(RedemptionInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedemptionRequestV2);
        }

        /// <summary>
        /// Returns true if RedemptionRequestV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of RedemptionRequestV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedemptionRequestV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RedemptionReferenceNumber == input.RedemptionReferenceNumber ||
                    (this.RedemptionReferenceNumber != null &&
                    this.RedemptionReferenceNumber.Equals(input.RedemptionReferenceNumber))
                ) && 
                (
                    this.RedemptionAmount == input.RedemptionAmount ||
                    this.RedemptionAmount.Equals(input.RedemptionAmount)
                ) && 
                (
                    this.ValuePerPoint == input.ValuePerPoint ||
                    this.ValuePerPoint.Equals(input.ValuePerPoint)
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.RedemptionInfo == input.RedemptionInfo ||
                    (this.RedemptionInfo != null &&
                    this.RedemptionInfo.Equals(input.RedemptionInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RedemptionReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RedemptionReferenceNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RedemptionAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ValuePerPoint.GetHashCode();
                if (this.ProgramId != null)
                {
                    hashCode = (hashCode * 59) + this.ProgramId.GetHashCode();
                }
                if (this.CatalogId != null)
                {
                    hashCode = (hashCode * 59) + this.CatalogId.GetHashCode();
                }
                if (this.RedemptionInfo != null)
                {
                    hashCode = (hashCode * 59) + this.RedemptionInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // RedemptionReferenceNumber (string) maxLength
            if (this.RedemptionReferenceNumber != null && this.RedemptionReferenceNumber.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionReferenceNumber, length must be less than 36.", new [] { "RedemptionReferenceNumber" });
            }

            // RedemptionReferenceNumber (string) minLength
            if (this.RedemptionReferenceNumber != null && this.RedemptionReferenceNumber.Length < 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionReferenceNumber, length must be greater than 36.", new [] { "RedemptionReferenceNumber" });
            }

            // RedemptionReferenceNumber (string) pattern
            Regex regexRedemptionReferenceNumber = new Regex(@"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", RegexOptions.CultureInvariant);
            if (false == regexRedemptionReferenceNumber.Match(this.RedemptionReferenceNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionReferenceNumber, must match a pattern of " + regexRedemptionReferenceNumber, new [] { "RedemptionReferenceNumber" });
            }

            // ProgramId (string) maxLength
            if (this.ProgramId != null && this.ProgramId.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 7.", new [] { "ProgramId" });
            }

            // ProgramId (string) minLength
            if (this.ProgramId != null && this.ProgramId.Length < 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be greater than 7.", new [] { "ProgramId" });
            }

            // ProgramId (string) pattern
            Regex regexProgramId = new Regex(@"^[0-9a-zA-Z]{7}$", RegexOptions.CultureInvariant);
            if (false == regexProgramId.Match(this.ProgramId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, must match a pattern of " + regexProgramId, new [] { "ProgramId" });
            }

            // CatalogId (string) maxLength
            if (this.CatalogId != null && this.CatalogId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogId, length must be less than 10.", new [] { "CatalogId" });
            }

            // CatalogId (string) minLength
            if (this.CatalogId != null && this.CatalogId.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogId, length must be greater than 10.", new [] { "CatalogId" });
            }

            // CatalogId (string) pattern
            Regex regexCatalogId = new Regex(@"^[0-9a-zA-Z]{10}$", RegexOptions.CultureInvariant);
            if (false == regexCatalogId.Match(this.CatalogId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CatalogId, must match a pattern of " + regexCatalogId, new [] { "CatalogId" });
            }

            yield break;
        }
    }

}
