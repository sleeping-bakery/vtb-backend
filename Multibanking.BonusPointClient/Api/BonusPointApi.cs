/*
 * Оплата баллами бонусов
 *
 * Позволяет пользователям просматривать и использовать свои награды.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Multibanking.BonusPointClient.Client;
using Multibanking.BonusPointClient.Model;

namespace Multibanking.BonusPointClient.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class BonusPointApi : IBonusPointApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="BonusPointApi" /> class.
    /// </summary>
    /// <returns></returns>
    public BonusPointApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="BonusPointApi" /> class.
    /// </summary>
    /// <returns></returns>
    public BonusPointApi(string basePath)
    {
        Configuration = BonusPointClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = BonusPointClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="BonusPointApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public BonusPointApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = BonusPointClient.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = BonusPointClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="BonusPointApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public BonusPointApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = BonusPointClient.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     Получить текущий баланс наград для указанного аккаунта и атрибутов программы, настроенных для конкретного партнера Получить текущий баланс наград для данного аккаунта.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>RewardBalanceDataV2</returns>
    public RewardBalanceDataV2 GetRewardsBalance(string authorization, string externalAccountID, string correlationID, string xCallerId = default, int operationIndex = 0)
    {
        var localVarResponse = GetRewardsBalanceWithHttpInfo(authorization, externalAccountID, correlationID, xCallerId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Получить текущий баланс наград для указанного аккаунта и атрибутов программы, настроенных для конкретного партнера Получить текущий баланс наград для данного аккаунта.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of RewardBalanceDataV2</returns>
    public ApiResponse<RewardBalanceDataV2> GetRewardsBalanceWithHttpInfo(string authorization, string externalAccountID, string correlationID, string xCallerId = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'authorization' is set
        if (authorization == null) throw new ApiException(400, "Missing required parameter 'authorization' when calling BonusPointApi->GetRewardsBalance");

        // verify the required parameter 'externalAccountID' is set
        if (externalAccountID == null) throw new ApiException(400, "Missing required parameter 'externalAccountID' when calling BonusPointApi->GetRewardsBalance");

        // verify the required parameter 'correlationID' is set
        if (correlationID == null) throw new ApiException(400, "Missing required parameter 'correlationID' when calling BonusPointApi->GetRewardsBalance");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("externalAccountID", ClientUtils.ParameterToString(externalAccountID)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("Authorization", ClientUtils.ParameterToString(authorization)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Correlation-ID", ClientUtils.ParameterToString(correlationID)); // header parameter
        if (xCallerId != null) localVarRequestOptions.HeaderParameters.Add("X-Caller-Id", ClientUtils.ParameterToString(xCallerId)); // header parameter

        localVarRequestOptions.Operation = "BonusPointApi.GetRewardsBalance";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<RewardBalanceDataV2>("/cards/accounts/external/{externalAccountID}/rewards/balance", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetRewardsBalance", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Получить текущий баланс наград для указанного аккаунта и атрибутов программы, настроенных для конкретного партнера Получить текущий баланс наград для данного аккаунта.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RewardBalanceDataV2</returns>
    public async Task<RewardBalanceDataV2> GetRewardsBalanceAsync(string authorization, string externalAccountID, string correlationID, string xCallerId = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetRewardsBalanceWithHttpInfoAsync(authorization, externalAccountID, correlationID, xCallerId, operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Получить текущий баланс наград для указанного аккаунта и атрибутов программы, настроенных для конкретного партнера Получить текущий баланс наград для данного аккаунта.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RewardBalanceDataV2)</returns>
    public async Task<ApiResponse<RewardBalanceDataV2>> GetRewardsBalanceWithHttpInfoAsync(string authorization, string externalAccountID, string correlationID,
        string xCallerId = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'authorization' is set
        if (authorization == null) throw new ApiException(400, "Missing required parameter 'authorization' when calling BonusPointApi->GetRewardsBalance");

        // verify the required parameter 'externalAccountID' is set
        if (externalAccountID == null) throw new ApiException(400, "Missing required parameter 'externalAccountID' when calling BonusPointApi->GetRewardsBalance");

        // verify the required parameter 'correlationID' is set
        if (correlationID == null) throw new ApiException(400, "Missing required parameter 'correlationID' when calling BonusPointApi->GetRewardsBalance");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("externalAccountID", ClientUtils.ParameterToString(externalAccountID)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("Authorization", ClientUtils.ParameterToString(authorization)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Correlation-ID", ClientUtils.ParameterToString(correlationID)); // header parameter
        if (xCallerId != null) localVarRequestOptions.HeaderParameters.Add("X-Caller-Id", ClientUtils.ParameterToString(xCallerId)); // header parameter

        localVarRequestOptions.Operation = "BonusPointApi.GetRewardsBalance";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<RewardBalanceDataV2>("/cards/accounts/external/{externalAccountID}/rewards/balance", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetRewardsBalance", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Выполните выписку по кредиту для данного аккаунта и соответствующих атрибутов программы. Списывает вознаграждение с данного счета и публикует выписку по кредиту. Возвращает
    ///     идентификатор погашения для отслеживания.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="contentType">Content-Type</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="redemptionRequestDataV2">Содержит информацию, необходимую для операции погашения.</param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>RedemptionResponseDataV2</returns>
    public RedemptionResponseDataV2 ProcessRedemption(string authorization, string contentType, string externalAccountID, string correlationID,
        RedemptionRequestDataV2 redemptionRequestDataV2, string xCallerId = default, int operationIndex = 0)
    {
        var localVarResponse = ProcessRedemptionWithHttpInfo(authorization, contentType, externalAccountID, correlationID, redemptionRequestDataV2, xCallerId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Выполните выписку по кредиту для данного аккаунта и соответствующих атрибутов программы. Списывает вознаграждение с данного счета и публикует выписку по кредиту. Возвращает
    ///     идентификатор погашения для отслеживания.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="contentType">Content-Type</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="redemptionRequestDataV2">Содержит информацию, необходимую для операции погашения.</param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of RedemptionResponseDataV2</returns>
    public ApiResponse<RedemptionResponseDataV2> ProcessRedemptionWithHttpInfo(string authorization, string contentType, string externalAccountID, string correlationID,
        RedemptionRequestDataV2 redemptionRequestDataV2, string xCallerId = default, int operationIndex = 0)
    {
        // verify the required parameter 'authorization' is set
        if (authorization == null) throw new ApiException(400, "Missing required parameter 'authorization' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'contentType' is set
        if (contentType == null) throw new ApiException(400, "Missing required parameter 'contentType' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'externalAccountID' is set
        if (externalAccountID == null) throw new ApiException(400, "Missing required parameter 'externalAccountID' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'correlationID' is set
        if (correlationID == null) throw new ApiException(400, "Missing required parameter 'correlationID' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'redemptionRequestDataV2' is set
        if (redemptionRequestDataV2 == null) throw new ApiException(400, "Missing required parameter 'redemptionRequestDataV2' when calling BonusPointApi->ProcessRedemption");

        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("externalAccountID", ClientUtils.ParameterToString(externalAccountID)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("Authorization", ClientUtils.ParameterToString(authorization)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Content-Type", ClientUtils.ParameterToString(contentType)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Correlation-ID", ClientUtils.ParameterToString(correlationID)); // header parameter
        if (xCallerId != null) localVarRequestOptions.HeaderParameters.Add("X-Caller-Id", ClientUtils.ParameterToString(xCallerId)); // header parameter
        localVarRequestOptions.Data = redemptionRequestDataV2;

        localVarRequestOptions.Operation = "BonusPointApi.ProcessRedemption";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<RedemptionResponseDataV2>("/cards/accounts/external/{externalAccountID}/rewards/redemption", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ProcessRedemption", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Выполните выписку по кредиту для данного аккаунта и соответствующих атрибутов программы. Списывает вознаграждение с данного счета и публикует выписку по кредиту. Возвращает
    ///     идентификатор погашения для отслеживания.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="contentType">Content-Type</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="redemptionRequestDataV2">Содержит информацию, необходимую для операции погашения.</param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RedemptionResponseDataV2</returns>
    public async Task<RedemptionResponseDataV2> ProcessRedemptionAsync(string authorization, string contentType, string externalAccountID, string correlationID,
        RedemptionRequestDataV2 redemptionRequestDataV2, string xCallerId = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ProcessRedemptionWithHttpInfoAsync(authorization, contentType, externalAccountID, correlationID, redemptionRequestDataV2, xCallerId, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Выполните выписку по кредиту для данного аккаунта и соответствующих атрибутов программы. Списывает вознаграждение с данного счета и публикует выписку по кредиту. Возвращает
    ///     идентификатор погашения для отслеживания.
    /// </summary>
    /// <exception cref="Multibanking.BonusPointClient.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authorization">TIAA-US External token</param>
    /// <param name="contentType">Content-Type</param>
    /// <param name="externalAccountID">Уникальный идентификатор (аналог UUID), созданный для каждой учетной записи клиента.</param>
    /// <param name="correlationID">
    ///     Уникальный идентификатор для каждого входящего запроса. Вызывающий API должен передать это в заголовке, который будет каскадно передан через стек
    ///     вызовов API. Это необходимо для обеспечения соответствия текущим стандартам REST.
    /// </param>
    /// <param name="redemptionRequestDataV2">Содержит информацию, необходимую для операции погашения.</param>
    /// <param name="xCallerId">Идентификатор внешнего объекта, инициирующего вызов. Устанавливается внешним шлюзом API и передается через стек API. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RedemptionResponseDataV2)</returns>
    public async Task<ApiResponse<RedemptionResponseDataV2>> ProcessRedemptionWithHttpInfoAsync(string authorization, string contentType, string externalAccountID,
        string correlationID, RedemptionRequestDataV2 redemptionRequestDataV2, string xCallerId = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'authorization' is set
        if (authorization == null) throw new ApiException(400, "Missing required parameter 'authorization' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'contentType' is set
        if (contentType == null) throw new ApiException(400, "Missing required parameter 'contentType' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'externalAccountID' is set
        if (externalAccountID == null) throw new ApiException(400, "Missing required parameter 'externalAccountID' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'correlationID' is set
        if (correlationID == null) throw new ApiException(400, "Missing required parameter 'correlationID' when calling BonusPointApi->ProcessRedemption");

        // verify the required parameter 'redemptionRequestDataV2' is set
        if (redemptionRequestDataV2 == null) throw new ApiException(400, "Missing required parameter 'redemptionRequestDataV2' when calling BonusPointApi->ProcessRedemption");


        var localVarRequestOptions = new RequestOptions();

        string[] _contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] _accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("externalAccountID", ClientUtils.ParameterToString(externalAccountID)); // path parameter
        localVarRequestOptions.HeaderParameters.Add("Authorization", ClientUtils.ParameterToString(authorization)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Content-Type", ClientUtils.ParameterToString(contentType)); // header parameter
        localVarRequestOptions.HeaderParameters.Add("Correlation-ID", ClientUtils.ParameterToString(correlationID)); // header parameter
        if (xCallerId != null) localVarRequestOptions.HeaderParameters.Add("X-Caller-Id", ClientUtils.ParameterToString(xCallerId)); // header parameter
        localVarRequestOptions.Data = redemptionRequestDataV2;

        localVarRequestOptions.Operation = "BonusPointApi.ProcessRedemption";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<RedemptionResponseDataV2>("/cards/accounts/external/{externalAccountID}/rewards/redemption", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ProcessRedemption", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}