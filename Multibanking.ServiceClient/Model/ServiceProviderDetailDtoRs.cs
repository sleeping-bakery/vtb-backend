/*
 * Поисковые сервисы каталога поставщиков услуг
 *
 * Поисковые сервисы каталога поставщиков услуг
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.ServiceClient.Model;

/// <summary>
///     Услуга поставщика услуг (детальная информация)
/// </summary>
[DataContract(Name = "ServiceProviderDetailDtoRs")]
public class ServiceProviderDetailDtoRs : IEquatable<ServiceProviderDetailDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Статус услуги
    /// </summary>
    /// <value>Статус услуги</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StatusEnum
    {
        /// <summary>
        ///     Enum ACTIVE for value: ACTIVE
        /// </summary>
        [EnumMember(Value = "ACTIVE")] ACTIVE = 1,

        /// <summary>
        ///     Enum INACTIVE for value: INACTIVE
        /// </summary>
        [EnumMember(Value = "INACTIVE")] INACTIVE = 2
    }

    /// <summary>
    ///     Подтипы услуги
    /// </summary>
    /// <value>Подтипы услуги</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SubTypesEnum
    {
        /// <summary>
        ///     Enum MOBILEBYPHONE for value: MOBILE_BY_PHONE
        /// </summary>
        [EnumMember(Value = "MOBILE_BY_PHONE")]
        MOBILEBYPHONE = 1
    }

    /// <summary>
    ///     Тип услуги
    /// </summary>
    /// <value>Тип услуги</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TypeEnum
    {
        /// <summary>
        ///     Enum CONTRACT for value: CONTRACT
        /// </summary>
        [EnumMember(Value = "CONTRACT")] CONTRACT = 1
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ServiceProviderDetailDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ServiceProviderDetailDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ServiceProviderDetailDtoRs" /> class.
    /// </summary>
    /// <param name="id">Идентификатор услуги (required).</param>
    /// <param name="operationCode">Код операции (услуги) (required).</param>
    /// <param name="facadeOperationCode">Код \&quot;фасадки\&quot;, в случае если операция - \&quot;реалка\&quot;.</param>
    /// <param name="productId">Идентификатор продукта.</param>
    /// <param name="type">Тип услуги (required).</param>
    /// <param name="subTypes">Подтипы услуги.</param>
    /// <param name="name">Наименование услуги (required).</param>
    /// <param name="shortName">Короткое наименование услуги.</param>
    /// <param name="description">Описание услуги.</param>
    /// <param name="status">Статус услуги (required).</param>
    /// <param name="receiver">receiver.</param>
    /// <param name="actions">Список возможных действий над услугой.</param>
    /// <param name="categoryIds">Список идентификаторов категорий, в которых доступна услуга.</param>
    /// <param name="regionIds">Список кодов регионов, в которых доступна услуга.</param>
    /// <param name="channels">Информация о каналах услуги.</param>
    /// <param name="partners">Список идентификаторов партнеров, для которых доступна услуга при обращении в канале OPEN_API.</param>
    /// <param name="pmntSettings">pmntSettings.</param>
    public ServiceProviderDetailDtoRs(string id = default, string operationCode = default, string facadeOperationCode = default, string productId = default,
        TypeEnum type = default, List<SubTypesEnum> subTypes = default, string name = default, string shortName = default, string description = default,
        StatusEnum status = default, PaymentReceiverDtoRs receiver = default, List<OperationActionDtoRs> actions = default, List<string> categoryIds = default,
        List<string> regionIds = default, List<ChannelDtoRs> channels = default, List<string> partners = default, PaymentSettingsDetailDtoRs pmntSettings = default)
    {
        // to ensure "id" is required (not null)
        if (id == null) throw new ArgumentNullException("id is a required property for ServiceProviderDetailDtoRs and cannot be null");
        Id = id;
        // to ensure "operationCode" is required (not null)
        if (operationCode == null) throw new ArgumentNullException("operationCode is a required property for ServiceProviderDetailDtoRs and cannot be null");
        OperationCode = operationCode;
        Type = type;
        // to ensure "name" is required (not null)
        if (name == null) throw new ArgumentNullException("name is a required property for ServiceProviderDetailDtoRs and cannot be null");
        Name = name;
        Status = status;
        FacadeOperationCode = facadeOperationCode;
        ProductId = productId;
        SubTypes = subTypes;
        ShortName = shortName;
        Description = description;
        Receiver = receiver;
        Actions = actions;
        CategoryIds = categoryIds;
        RegionIds = regionIds;
        Channels = channels;
        Partners = partners;
        PmntSettings = pmntSettings;
    }


    /// <summary>
    ///     Тип услуги
    /// </summary>
    /// <value>Тип услуги</value>
    [DataMember(Name = "serviceType", IsRequired = true, EmitDefaultValue = true)]
    public TypeEnum Type { get; set; }


    /// <summary>
    ///     Подтипы услуги
    /// </summary>
    /// <value>Подтипы услуги</value>
    [DataMember(Name = "subTypes", EmitDefaultValue = false)]
    public List<SubTypesEnum> SubTypes { get; set; }


    /// <summary>
    ///     Статус услуги
    /// </summary>
    /// <value>Статус услуги</value>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
    public StatusEnum Status { get; set; }

    /// <summary>
    ///     Идентификатор услуги
    /// </summary>
    /// <value>Идентификатор услуги</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    ///     Код операции (услуги)
    /// </summary>
    /// <value>Код операции (услуги)</value>
    [DataMember(Name = "operationCode", IsRequired = true, EmitDefaultValue = true)]
    public string OperationCode { get; set; }

    /// <summary>
    ///     Код \&quot;фасадки\&quot;, в случае если операция - \&quot;реалка\&quot;
    /// </summary>
    /// <value>Код \&quot;фасадки\&quot;, в случае если операция - \&quot;реалка\&quot;</value>
    [DataMember(Name = "facadeOperationCode", EmitDefaultValue = false)]
    public string FacadeOperationCode { get; set; }

    /// <summary>
    ///     Идентификатор продукта
    /// </summary>
    /// <value>Идентификатор продукта</value>
    [DataMember(Name = "productId", EmitDefaultValue = false)]
    public string ProductId { get; set; }

    /// <summary>
    ///     Наименование услуги
    /// </summary>
    /// <value>Наименование услуги</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Короткое наименование услуги
    /// </summary>
    /// <value>Короткое наименование услуги</value>
    [DataMember(Name = "shortName", EmitDefaultValue = false)]
    public string ShortName { get; set; }

    /// <summary>
    ///     Описание услуги
    /// </summary>
    /// <value>Описание услуги</value>
    [DataMember(Name = "description", EmitDefaultValue = false)]
    public string Description { get; set; }

    /// <summary>
    ///     Gets or Sets Receiver
    /// </summary>
    [DataMember(Name = "receiver", EmitDefaultValue = false)]
    public PaymentReceiverDtoRs Receiver { get; set; }

    /// <summary>
    ///     Список возможных действий над услугой
    /// </summary>
    /// <value>Список возможных действий над услугой</value>
    [DataMember(Name = "actions", EmitDefaultValue = false)]
    public List<OperationActionDtoRs> Actions { get; set; }

    /// <summary>
    ///     Список идентификаторов категорий, в которых доступна услуга
    /// </summary>
    /// <value>Список идентификаторов категорий, в которых доступна услуга</value>
    [DataMember(Name = "categoryIds", EmitDefaultValue = false)]
    public List<string> CategoryIds { get; set; }

    /// <summary>
    ///     Список кодов регионов, в которых доступна услуга
    /// </summary>
    /// <value>Список кодов регионов, в которых доступна услуга</value>
    [DataMember(Name = "regionIds", EmitDefaultValue = false)]
    public List<string> RegionIds { get; set; }

    /// <summary>
    ///     Информация о каналах услуги
    /// </summary>
    /// <value>Информация о каналах услуги</value>
    [DataMember(Name = "channels", EmitDefaultValue = false)]
    public List<ChannelDtoRs> Channels { get; set; }

    /// <summary>
    ///     Список идентификаторов партнеров, для которых доступна услуга при обращении в канале OPEN_API
    /// </summary>
    /// <value>Список идентификаторов партнеров, для которых доступна услуга при обращении в канале OPEN_API</value>
    [DataMember(Name = "partners", EmitDefaultValue = false)]
    public List<string> Partners { get; set; }

    /// <summary>
    ///     Gets or Sets PmntSettings
    /// </summary>
    [DataMember(Name = "pmntSettings", EmitDefaultValue = false)]
    public PaymentSettingsDetailDtoRs PmntSettings { get; set; }

    /// <summary>
    ///     Returns true if ServiceProviderDetailDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of ServiceProviderDetailDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ServiceProviderDetailDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                OperationCode == input.OperationCode ||
                (OperationCode != null &&
                 OperationCode.Equals(input.OperationCode))
            ) &&
            (
                FacadeOperationCode == input.FacadeOperationCode ||
                (FacadeOperationCode != null &&
                 FacadeOperationCode.Equals(input.FacadeOperationCode))
            ) &&
            (
                ProductId == input.ProductId ||
                (ProductId != null &&
                 ProductId.Equals(input.ProductId))
            ) &&
            (
                Type == input.Type ||
                Type.Equals(input.Type)
            ) &&
            (
                SubTypes == input.SubTypes ||
                SubTypes.SequenceEqual(input.SubTypes)
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                ShortName == input.ShortName ||
                (ShortName != null &&
                 ShortName.Equals(input.ShortName))
            ) &&
            (
                Description == input.Description ||
                (Description != null &&
                 Description.Equals(input.Description))
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                Receiver == input.Receiver ||
                (Receiver != null &&
                 Receiver.Equals(input.Receiver))
            ) &&
            (
                Actions == input.Actions ||
                (Actions != null &&
                 input.Actions != null &&
                 Actions.SequenceEqual(input.Actions))
            ) &&
            (
                CategoryIds == input.CategoryIds ||
                (CategoryIds != null &&
                 input.CategoryIds != null &&
                 CategoryIds.SequenceEqual(input.CategoryIds))
            ) &&
            (
                RegionIds == input.RegionIds ||
                (RegionIds != null &&
                 input.RegionIds != null &&
                 RegionIds.SequenceEqual(input.RegionIds))
            ) &&
            (
                Channels == input.Channels ||
                (Channels != null &&
                 input.Channels != null &&
                 Channels.SequenceEqual(input.Channels))
            ) &&
            (
                Partners == input.Partners ||
                (Partners != null &&
                 input.Partners != null &&
                 Partners.SequenceEqual(input.Partners))
            ) &&
            (
                PmntSettings == input.PmntSettings ||
                (PmntSettings != null &&
                 PmntSettings.Equals(input.PmntSettings))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) maxLength
        if (Id != null && Id.Length > 64) yield return new ValidationResult("Invalid value for Id, length must be less than 64.", new[] { "Id" });

        // OperationCode (string) maxLength
        if (OperationCode != null && OperationCode.Length > 64)
            yield return new ValidationResult("Invalid value for OperationCode, length must be less than 64.", new[] { "OperationCode" });

        // FacadeOperationCode (string) maxLength
        if (FacadeOperationCode != null && FacadeOperationCode.Length > 64)
            yield return new ValidationResult("Invalid value for FacadeOperationCode, length must be less than 64.", new[] { "FacadeOperationCode" });

        // ProductId (string) maxLength
        if (ProductId != null && ProductId.Length > 64) yield return new ValidationResult("Invalid value for ProductId, length must be less than 64.", new[] { "ProductId" });

        // Name (string) maxLength
        if (Name != null && Name.Length > 255) yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] { "Name" });

        // ShortName (string) maxLength
        if (ShortName != null && ShortName.Length > 255) yield return new ValidationResult("Invalid value for ShortName, length must be less than 255.", new[] { "ShortName" });

        // Description (string) maxLength
        if (Description != null && Description.Length > 2000)
            yield return new ValidationResult("Invalid value for Description, length must be less than 2000.", new[] { "Description" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ServiceProviderDetailDtoRs {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  OperationCode: ").Append(OperationCode).Append("\n");
        sb.Append("  FacadeOperationCode: ").Append(FacadeOperationCode).Append("\n");
        sb.Append("  ProductId: ").Append(ProductId).Append("\n");
        sb.Append("  ServiceType: ").Append(Type).Append("\n");
        sb.Append("  SubTypes: ").Append(SubTypes).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  ShortName: ").Append(ShortName).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  Receiver: ").Append(Receiver).Append("\n");
        sb.Append("  Actions: ").Append(Actions).Append("\n");
        sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
        sb.Append("  RegionIds: ").Append(RegionIds).Append("\n");
        sb.Append("  Channels: ").Append(Channels).Append("\n");
        sb.Append("  Partners: ").Append(Partners).Append("\n");
        sb.Append("  PmntSettings: ").Append(PmntSettings).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ServiceProviderDetailDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (OperationCode != null) hashCode = hashCode * 59 + OperationCode.GetHashCode();
            if (FacadeOperationCode != null) hashCode = hashCode * 59 + FacadeOperationCode.GetHashCode();
            if (ProductId != null) hashCode = hashCode * 59 + ProductId.GetHashCode();
            hashCode = hashCode * 59 + Type.GetHashCode();
            hashCode = hashCode * 59 + SubTypes.GetHashCode();
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (ShortName != null) hashCode = hashCode * 59 + ShortName.GetHashCode();
            if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (Receiver != null) hashCode = hashCode * 59 + Receiver.GetHashCode();
            if (Actions != null) hashCode = hashCode * 59 + Actions.GetHashCode();
            if (CategoryIds != null) hashCode = hashCode * 59 + CategoryIds.GetHashCode();
            if (RegionIds != null) hashCode = hashCode * 59 + RegionIds.GetHashCode();
            if (Channels != null) hashCode = hashCode * 59 + Channels.GetHashCode();
            if (Partners != null) hashCode = hashCode * 59 + Partners.GetHashCode();
            if (PmntSettings != null) hashCode = hashCode * 59 + PmntSettings.GetHashCode();
            return hashCode;
        }
    }
}