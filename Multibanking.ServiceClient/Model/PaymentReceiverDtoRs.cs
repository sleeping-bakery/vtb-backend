/*
 * Поисковые сервисы каталога поставщиков услуг
 *
 * Поисковые сервисы каталога поставщиков услуг
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.ServiceClient.Model;

/// <summary>
///     Получатель платежа
/// </summary>
[DataContract(Name = "PaymentReceiverDtoRs")]
public class PaymentReceiverDtoRs : IEquatable<PaymentReceiverDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PaymentReceiverDtoRs" /> class.
    /// </summary>
    /// <param name="inn">ИНН получателя платежа.</param>
    /// <param name="kpp">КПП получателя платежа.</param>
    /// <param name="account">Номер счета получателя платежа.</param>
    /// <param name="bank">bank.</param>
    public PaymentReceiverDtoRs(string inn = default, string kpp = default, string account = default, BankDtoRs bank = default)
    {
        Inn = inn;
        Kpp = kpp;
        Account = account;
        Bank = bank;
    }

    /// <summary>
    ///     ИНН получателя платежа
    /// </summary>
    /// <value>ИНН получателя платежа</value>
    [DataMember(Name = "inn", EmitDefaultValue = false)]
    public string Inn { get; set; }

    /// <summary>
    ///     КПП получателя платежа
    /// </summary>
    /// <value>КПП получателя платежа</value>
    [DataMember(Name = "kpp", EmitDefaultValue = false)]
    public string Kpp { get; set; }

    /// <summary>
    ///     Номер счета получателя платежа
    /// </summary>
    /// <value>Номер счета получателя платежа</value>
    [DataMember(Name = "account", EmitDefaultValue = false)]
    public string Account { get; set; }

    /// <summary>
    ///     Gets or Sets Bank
    /// </summary>
    [DataMember(Name = "bank", EmitDefaultValue = false)]
    public BankDtoRs Bank { get; set; }

    /// <summary>
    ///     Returns true if PaymentReceiverDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of PaymentReceiverDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PaymentReceiverDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Inn == input.Inn ||
                (Inn != null &&
                 Inn.Equals(input.Inn))
            ) &&
            (
                Kpp == input.Kpp ||
                (Kpp != null &&
                 Kpp.Equals(input.Kpp))
            ) &&
            (
                Account == input.Account ||
                (Account != null &&
                 Account.Equals(input.Account))
            ) &&
            (
                Bank == input.Bank ||
                (Bank != null &&
                 Bank.Equals(input.Bank))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Inn (string) maxLength
        if (Inn != null && Inn.Length > 12) yield return new ValidationResult("Invalid value for Inn, length must be less than 12.", new[] { "Inn" });

        // Kpp (string) maxLength
        if (Kpp != null && Kpp.Length > 9) yield return new ValidationResult("Invalid value for Kpp, length must be less than 9.", new[] { "Kpp" });

        // Account (string) maxLength
        if (Account != null && Account.Length > 20) yield return new ValidationResult("Invalid value for Account, length must be less than 20.", new[] { "Account" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PaymentReceiverDtoRs {\n");
        sb.Append("  Inn: ").Append(Inn).Append("\n");
        sb.Append("  Kpp: ").Append(Kpp).Append("\n");
        sb.Append("  Account: ").Append(Account).Append("\n");
        sb.Append("  Bank: ").Append(Bank).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PaymentReceiverDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Inn != null) hashCode = hashCode * 59 + Inn.GetHashCode();
            if (Kpp != null) hashCode = hashCode * 59 + Kpp.GetHashCode();
            if (Account != null) hashCode = hashCode * 59 + Account.GetHashCode();
            if (Bank != null) hashCode = hashCode * 59 + Bank.GetHashCode();
            return hashCode;
        }
    }
}