/*
 * Поисковые сервисы каталога поставщиков услуг
 *
 * Поисковые сервисы каталога поставщиков услуг
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.ServiceClient.Client.OpenAPIDateConverter;

namespace Multibanking.ServiceClient.Model
{
    /// <summary>
    /// Настройки для платежного сценария по услуге
    /// </summary>
    [DataContract(Name = "PaymentSettingsSearchDtoRs")]
    public partial class PaymentSettingsSearchDtoRs : IEquatable<PaymentSettingsSearchDtoRs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSettingsSearchDtoRs" /> class.
        /// </summary>
        /// <param name="acceptanceKey">Ключ-наименование микросервиса для оплаты услуги.</param>
        /// <param name="clientAuthTypePayAvailable">Флаг недоступности оплаты текущему клиенту.</param>
        public PaymentSettingsSearchDtoRs(string acceptanceKey = default(string), bool clientAuthTypePayAvailable = default(bool))
        {
            this.AcceptanceKey = acceptanceKey;
            this.ClientAuthTypePayAvailable = clientAuthTypePayAvailable;
        }

        /// <summary>
        /// Ключ-наименование микросервиса для оплаты услуги
        /// </summary>
        /// <value>Ключ-наименование микросервиса для оплаты услуги</value>
        [DataMember(Name = "acceptanceKey", EmitDefaultValue = false)]
        public string AcceptanceKey { get; set; }

        /// <summary>
        /// Флаг недоступности оплаты текущему клиенту
        /// </summary>
        /// <value>Флаг недоступности оплаты текущему клиенту</value>
        [DataMember(Name = "clientAuthTypePayAvailable", EmitDefaultValue = true)]
        public bool ClientAuthTypePayAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentSettingsSearchDtoRs {\n");
            sb.Append("  AcceptanceKey: ").Append(AcceptanceKey).Append("\n");
            sb.Append("  ClientAuthTypePayAvailable: ").Append(ClientAuthTypePayAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentSettingsSearchDtoRs);
        }

        /// <summary>
        /// Returns true if PaymentSettingsSearchDtoRs instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentSettingsSearchDtoRs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSettingsSearchDtoRs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcceptanceKey == input.AcceptanceKey ||
                    (this.AcceptanceKey != null &&
                    this.AcceptanceKey.Equals(input.AcceptanceKey))
                ) && 
                (
                    this.ClientAuthTypePayAvailable == input.ClientAuthTypePayAvailable ||
                    this.ClientAuthTypePayAvailable.Equals(input.ClientAuthTypePayAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcceptanceKey != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptanceKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClientAuthTypePayAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AcceptanceKey (string) maxLength
            if (this.AcceptanceKey != null && this.AcceptanceKey.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptanceKey, length must be less than 64.", new [] { "AcceptanceKey" });
            }

            yield break;
        }
    }

}
