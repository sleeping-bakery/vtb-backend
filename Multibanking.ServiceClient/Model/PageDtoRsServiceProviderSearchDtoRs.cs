/*
 * Поисковые сервисы каталога поставщиков услуг
 *
 * Поисковые сервисы каталога поставщиков услуг
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.ServiceClient.Model;

/// <summary>
///     Страница ресурса
/// </summary>
[DataContract(Name = "PageDtoRsServiceProviderSearchDtoRs")]
public class PageDtoRsServiceProviderSearchDtoRs : IEquatable<PageDtoRsServiceProviderSearchDtoRs>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PageDtoRsServiceProviderSearchDtoRs" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected PageDtoRsServiceProviderSearchDtoRs()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="PageDtoRsServiceProviderSearchDtoRs" /> class.
    /// </summary>
    /// <param name="items">Список объектов страницы (required).</param>
    /// <param name="pageNumber">Номер страницы (required).</param>
    /// <param name="pageSize">Размер страницы (required).</param>
    /// <param name="total">Общее число результатов (required).</param>
    /// <param name="hasMore">Признак наличия следующей страницы с результатами (required).</param>
    public PageDtoRsServiceProviderSearchDtoRs(List<ServiceProviderSearchDtoRs> items = default, int pageNumber = default, int pageSize = default, long total = default,
        bool hasMore = default)
    {
        // to ensure "items" is required (not null)
        if (items == null) throw new ArgumentNullException("items is a required property for PageDtoRsServiceProviderSearchDtoRs and cannot be null");
        Items = items;
        PageNumber = pageNumber;
        PageSize = pageSize;
        Total = total;
        HasMore = hasMore;
    }

    /// <summary>
    ///     Список объектов страницы
    /// </summary>
    /// <value>Список объектов страницы</value>
    [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
    public List<ServiceProviderSearchDtoRs> Items { get; set; }

    /// <summary>
    ///     Номер страницы
    /// </summary>
    /// <value>Номер страницы</value>
    [DataMember(Name = "pageNumber", IsRequired = true, EmitDefaultValue = true)]
    public int PageNumber { get; set; }

    /// <summary>
    ///     Размер страницы
    /// </summary>
    /// <value>Размер страницы</value>
    [DataMember(Name = "pageSize", IsRequired = true, EmitDefaultValue = true)]
    public int PageSize { get; set; }

    /// <summary>
    ///     Общее число результатов
    /// </summary>
    /// <value>Общее число результатов</value>
    [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
    public long Total { get; set; }

    /// <summary>
    ///     Признак наличия следующей страницы с результатами
    /// </summary>
    /// <value>Признак наличия следующей страницы с результатами</value>
    [DataMember(Name = "hasMore", IsRequired = true, EmitDefaultValue = true)]
    public bool HasMore { get; set; }

    /// <summary>
    ///     Returns true if PageDtoRsServiceProviderSearchDtoRs instances are equal
    /// </summary>
    /// <param name="input">Instance of PageDtoRsServiceProviderSearchDtoRs to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PageDtoRsServiceProviderSearchDtoRs input)
    {
        if (input == null) return false;
        return
            (
                Items == input.Items ||
                (Items != null &&
                 input.Items != null &&
                 Items.SequenceEqual(input.Items))
            ) &&
            (
                PageNumber == input.PageNumber ||
                PageNumber.Equals(input.PageNumber)
            ) &&
            (
                PageSize == input.PageSize ||
                PageSize.Equals(input.PageSize)
            ) &&
            (
                Total == input.Total ||
                Total.Equals(input.Total)
            ) &&
            (
                HasMore == input.HasMore ||
                HasMore.Equals(input.HasMore)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // PageNumber (int) maximum
        if (PageNumber > 2147483647) yield return new ValidationResult("Invalid value for PageNumber, must be a value less than or equal to 2147483647.", new[] { "PageNumber" });

        // PageNumber (int) minimum
        if (PageNumber < 0) yield return new ValidationResult("Invalid value for PageNumber, must be a value greater than or equal to 0.", new[] { "PageNumber" });

        // PageSize (int) maximum
        if (PageSize > 100) yield return new ValidationResult("Invalid value for PageSize, must be a value less than or equal to 100.", new[] { "PageSize" });

        // PageSize (int) minimum
        if (PageSize < 0) yield return new ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 0.", new[] { "PageSize" });

        // Total (long) maximum
        if (Total > 2147483647) yield return new ValidationResult("Invalid value for Total, must be a value less than or equal to 2147483647.", new[] { "Total" });

        // Total (long) minimum
        if (Total < 0) yield return new ValidationResult("Invalid value for Total, must be a value greater than or equal to 0.", new[] { "Total" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PageDtoRsServiceProviderSearchDtoRs {\n");
        sb.Append("  Items: ").Append(Items).Append("\n");
        sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
        sb.Append("  PageSize: ").Append(PageSize).Append("\n");
        sb.Append("  Total: ").Append(Total).Append("\n");
        sb.Append("  HasMore: ").Append(HasMore).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PageDtoRsServiceProviderSearchDtoRs);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Items != null) hashCode = hashCode * 59 + Items.GetHashCode();
            hashCode = hashCode * 59 + PageNumber.GetHashCode();
            hashCode = hashCode * 59 + PageSize.GetHashCode();
            hashCode = hashCode * 59 + Total.GetHashCode();
            hashCode = hashCode * 59 + HasMore.GetHashCode();
            return hashCode;
        }
    }
}