/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Налоговая информация
    /// </summary>
    [DataContract(Name = "TaxInformation")]
    public partial class TaxInformation : IEquatable<TaxInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxInformation" /> class.
        /// </summary>
        /// <param name="administrationZone">Реквизит 105. Код по Общероссийскому классификатору территорий муниципальных образований ОКТМО.</param>
        /// <param name="referenceNumber">Реквизит 108. Номер налогового документа.</param>
        /// <param name="date">Реквизит 109. Дата налогового документа.</param>
        /// <param name="creditor">creditor.</param>
        /// <param name="debtor">debtor.</param>
        /// <param name="record">record.</param>
        public TaxInformation(string administrationZone = default(string), string referenceNumber = default(string), DateTime date = default(DateTime), TaxInformationCreditor creditor = default(TaxInformationCreditor), TaxInformationDebtor debtor = default(TaxInformationDebtor), TaxInformationRecord record = default(TaxInformationRecord))
        {
            this.AdministrationZone = administrationZone;
            this.ReferenceNumber = referenceNumber;
            this.Date = date;
            this.Creditor = creditor;
            this.Debtor = debtor;
            this.Record = record;
        }

        /// <summary>
        /// Реквизит 105. Код по Общероссийскому классификатору территорий муниципальных образований ОКТМО
        /// </summary>
        /// <value>Реквизит 105. Код по Общероссийскому классификатору территорий муниципальных образований ОКТМО</value>
        [DataMember(Name = "administrationZone", EmitDefaultValue = false)]
        public string AdministrationZone { get; set; }

        /// <summary>
        /// Реквизит 108. Номер налогового документа
        /// </summary>
        /// <value>Реквизит 108. Номер налогового документа</value>
        [DataMember(Name = "referenceNumber", EmitDefaultValue = false)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Реквизит 109. Дата налогового документа
        /// </summary>
        /// <value>Реквизит 109. Дата налогового документа</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets Creditor
        /// </summary>
        [DataMember(Name = "creditor", EmitDefaultValue = false)]
        public TaxInformationCreditor Creditor { get; set; }

        /// <summary>
        /// Gets or Sets Debtor
        /// </summary>
        [DataMember(Name = "debtor", EmitDefaultValue = false)]
        public TaxInformationDebtor Debtor { get; set; }

        /// <summary>
        /// Gets or Sets Record
        /// </summary>
        [DataMember(Name = "Record", EmitDefaultValue = false)]
        public TaxInformationRecord Record { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxInformation {\n");
            sb.Append("  AdministrationZone: ").Append(AdministrationZone).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Creditor: ").Append(Creditor).Append("\n");
            sb.Append("  Debtor: ").Append(Debtor).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxInformation);
        }

        /// <summary>
        /// Returns true if TaxInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdministrationZone == input.AdministrationZone ||
                    (this.AdministrationZone != null &&
                    this.AdministrationZone.Equals(input.AdministrationZone))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Creditor == input.Creditor ||
                    (this.Creditor != null &&
                    this.Creditor.Equals(input.Creditor))
                ) && 
                (
                    this.Debtor == input.Debtor ||
                    (this.Debtor != null &&
                    this.Debtor.Equals(input.Debtor))
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministrationZone != null)
                {
                    hashCode = (hashCode * 59) + this.AdministrationZone.GetHashCode();
                }
                if (this.ReferenceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceNumber.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Creditor != null)
                {
                    hashCode = (hashCode * 59) + this.Creditor.GetHashCode();
                }
                if (this.Debtor != null)
                {
                    hashCode = (hashCode * 59) + this.Debtor.GetHashCode();
                }
                if (this.Record != null)
                {
                    hashCode = (hashCode * 59) + this.Record.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AdministrationZone (string) maxLength
            if (this.AdministrationZone != null && this.AdministrationZone.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdministrationZone, length must be less than 11.", new [] { "AdministrationZone" });
            }

            // AdministrationZone (string) pattern
            Regex regexAdministrationZone = new Regex(@"^\\d{1,11}$", RegexOptions.CultureInvariant);
            if (false == regexAdministrationZone.Match(this.AdministrationZone).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AdministrationZone, must match a pattern of " + regexAdministrationZone, new [] { "AdministrationZone" });
            }

            // ReferenceNumber (string) maxLength
            if (this.ReferenceNumber != null && this.ReferenceNumber.Length > 140)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceNumber, length must be less than 140.", new [] { "ReferenceNumber" });
            }

            yield break;
        }
    }

}
