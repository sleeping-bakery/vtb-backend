/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Реквизиты платежного распоряжения при инициировании повторяющегося  перевода денежных средств
    /// </summary>
    [DataContract(Name = "VRPInstruction")]
    public partial class VRPInstruction : IEquatable<VRPInstruction>, IValidatableObject
    {

        /// <summary>
        /// (Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж.
        /// </summary>
        /// <value>(Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж.</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public PurposeCode? Purpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPInstruction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VRPInstruction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPInstruction" /> class.
        /// </summary>
        /// <param name="instructionIdentification">Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции (required).</param>
        /// <param name="endToEndIdentification">Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с платежной операцией (required).</param>
        /// <param name="purpose">(Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж..</param>
        /// <param name="paymentTypeInformation">paymentTypeInformation.</param>
        /// <param name="requestedExecutionDate">Запрошенная дата исполнения.</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        /// <param name="ultimateDebtor">ultimateDebtor.</param>
        /// <param name="debtor">debtor.</param>
        /// <param name="debtorAgent">debtorAgent.</param>
        /// <param name="debtorAgentAccount">debtorAgentAccount.</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="intermediaryAgent">intermediaryAgent.</param>
        /// <param name="intermediaryAgentAccount">intermediaryAgentAccount.</param>
        /// <param name="creditorAgent">creditorAgent.</param>
        /// <param name="creditorAccount">creditorAccount.</param>
        /// <param name="creditorAgentAccount">creditorAgentAccount.</param>
        /// <param name="creditor">creditor.</param>
        /// <param name="ultimateCreditor">ultimateCreditor.</param>
        /// <param name="remittanceInformation">remittanceInformation.</param>
        public VRPInstruction(string instructionIdentification = default(string), string endToEndIdentification = default(string), PurposeCode? purpose = default(PurposeCode?), VRPInstructionPaymentTypeInformation paymentTypeInformation = default(VRPInstructionPaymentTypeInformation), DateTime requestedExecutionDate = default(DateTime), VRPInstructionInstructedAmount instructedAmount = default(VRPInstructionInstructedAmount), VRPInstructionUltimateDebtor ultimateDebtor = default(VRPInstructionUltimateDebtor), VRPInstructionDebtor debtor = default(VRPInstructionDebtor), VRPInstructionDebtorAgent debtorAgent = default(VRPInstructionDebtorAgent), VRPInstructionDebtorAgentAccount debtorAgentAccount = default(VRPInstructionDebtorAgentAccount), VRPInstructionDebtorAccount debtorAccount = default(VRPInstructionDebtorAccount), VRPInstructionIntermediaryAgent intermediaryAgent = default(VRPInstructionIntermediaryAgent), VRPInstructionIntermediaryAgentAccount intermediaryAgentAccount = default(VRPInstructionIntermediaryAgentAccount), VRPInstructionCreditorAgent creditorAgent = default(VRPInstructionCreditorAgent), VRPInitiationCreditorAccount creditorAccount = default(VRPInitiationCreditorAccount), VRPInitiationCreditorAgentAccount creditorAgentAccount = default(VRPInitiationCreditorAgentAccount), VRPInstructionCreditor creditor = default(VRPInstructionCreditor), VRPInstructionUltimateCreditor ultimateCreditor = default(VRPInstructionUltimateCreditor), VRPInstructionRemittanceInformation remittanceInformation = default(VRPInstructionRemittanceInformation))
        {
            // to ensure "instructionIdentification" is required (not null)
            if (instructionIdentification == null)
            {
                throw new ArgumentNullException("instructionIdentification is a required property for VRPInstruction and cannot be null");
            }
            this.InstructionIdentification = instructionIdentification;
            // to ensure "endToEndIdentification" is required (not null)
            if (endToEndIdentification == null)
            {
                throw new ArgumentNullException("endToEndIdentification is a required property for VRPInstruction and cannot be null");
            }
            this.EndToEndIdentification = endToEndIdentification;
            // to ensure "instructedAmount" is required (not null)
            if (instructedAmount == null)
            {
                throw new ArgumentNullException("instructedAmount is a required property for VRPInstruction and cannot be null");
            }
            this.InstructedAmount = instructedAmount;
            this.Purpose = purpose;
            this.PaymentTypeInformation = paymentTypeInformation;
            this.RequestedExecutionDate = requestedExecutionDate;
            this.UltimateDebtor = ultimateDebtor;
            this.Debtor = debtor;
            this.DebtorAgent = debtorAgent;
            this.DebtorAgentAccount = debtorAgentAccount;
            this.DebtorAccount = debtorAccount;
            this.IntermediaryAgent = intermediaryAgent;
            this.IntermediaryAgentAccount = intermediaryAgentAccount;
            this.CreditorAgent = creditorAgent;
            this.CreditorAccount = creditorAccount;
            this.CreditorAgentAccount = creditorAgentAccount;
            this.Creditor = creditor;
            this.UltimateCreditor = ultimateCreditor;
            this.RemittanceInformation = remittanceInformation;
        }

        /// <summary>
        /// Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции
        /// </summary>
        /// <value>Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции</value>
        [DataMember(Name = "instructionIdentification", IsRequired = true, EmitDefaultValue = true)]
        public string InstructionIdentification { get; set; }

        /// <summary>
        /// Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с платежной операцией
        /// </summary>
        /// <value>Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных с платежной операцией</value>
        [DataMember(Name = "endToEndIdentification", IsRequired = true, EmitDefaultValue = true)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTypeInformation
        /// </summary>
        [DataMember(Name = "PaymentTypeInformation", EmitDefaultValue = false)]
        public VRPInstructionPaymentTypeInformation PaymentTypeInformation { get; set; }

        /// <summary>
        /// Запрошенная дата исполнения
        /// </summary>
        /// <value>Запрошенная дата исполнения</value>
        [DataMember(Name = "requestedExecutionDate", EmitDefaultValue = false)]
        public DateTime RequestedExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "InstructedAmount", IsRequired = true, EmitDefaultValue = true)]
        public VRPInstructionInstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets UltimateDebtor
        /// </summary>
        [DataMember(Name = "UltimateDebtor", EmitDefaultValue = false)]
        public VRPInstructionUltimateDebtor UltimateDebtor { get; set; }

        /// <summary>
        /// Gets or Sets Debtor
        /// </summary>
        [DataMember(Name = "Debtor", EmitDefaultValue = false)]
        public VRPInstructionDebtor Debtor { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAgent
        /// </summary>
        [DataMember(Name = "DebtorAgent", EmitDefaultValue = false)]
        public VRPInstructionDebtorAgent DebtorAgent { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAgentAccount
        /// </summary>
        [DataMember(Name = "DebtorAgentAccount", EmitDefaultValue = false)]
        public VRPInstructionDebtorAgentAccount DebtorAgentAccount { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
        public VRPInstructionDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets IntermediaryAgent
        /// </summary>
        [DataMember(Name = "IntermediaryAgent", EmitDefaultValue = false)]
        public VRPInstructionIntermediaryAgent IntermediaryAgent { get; set; }

        /// <summary>
        /// Gets or Sets IntermediaryAgentAccount
        /// </summary>
        [DataMember(Name = "IntermediaryAgentAccount", EmitDefaultValue = false)]
        public VRPInstructionIntermediaryAgentAccount IntermediaryAgentAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgent
        /// </summary>
        [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
        public VRPInstructionCreditorAgent CreditorAgent { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name = "CreditorAccount", EmitDefaultValue = false)]
        public VRPInitiationCreditorAccount CreditorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgentAccount
        /// </summary>
        [DataMember(Name = "CreditorAgentAccount", EmitDefaultValue = false)]
        public VRPInitiationCreditorAgentAccount CreditorAgentAccount { get; set; }

        /// <summary>
        /// Gets or Sets Creditor
        /// </summary>
        [DataMember(Name = "Creditor", EmitDefaultValue = false)]
        public VRPInstructionCreditor Creditor { get; set; }

        /// <summary>
        /// Gets or Sets UltimateCreditor
        /// </summary>
        [DataMember(Name = "UltimateCreditor", EmitDefaultValue = false)]
        public VRPInstructionUltimateCreditor UltimateCreditor { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name = "RemittanceInformation", EmitDefaultValue = false)]
        public VRPInstructionRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPInstruction {\n");
            sb.Append("  InstructionIdentification: ").Append(InstructionIdentification).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  PaymentTypeInformation: ").Append(PaymentTypeInformation).Append("\n");
            sb.Append("  RequestedExecutionDate: ").Append(RequestedExecutionDate).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  UltimateDebtor: ").Append(UltimateDebtor).Append("\n");
            sb.Append("  Debtor: ").Append(Debtor).Append("\n");
            sb.Append("  DebtorAgent: ").Append(DebtorAgent).Append("\n");
            sb.Append("  DebtorAgentAccount: ").Append(DebtorAgentAccount).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  IntermediaryAgent: ").Append(IntermediaryAgent).Append("\n");
            sb.Append("  IntermediaryAgentAccount: ").Append(IntermediaryAgentAccount).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  CreditorAgentAccount: ").Append(CreditorAgentAccount).Append("\n");
            sb.Append("  Creditor: ").Append(Creditor).Append("\n");
            sb.Append("  UltimateCreditor: ").Append(UltimateCreditor).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPInstruction);
        }

        /// <summary>
        /// Returns true if VRPInstruction instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPInstruction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPInstruction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstructionIdentification == input.InstructionIdentification ||
                    (this.InstructionIdentification != null &&
                    this.InstructionIdentification.Equals(input.InstructionIdentification))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    this.Purpose.Equals(input.Purpose)
                ) && 
                (
                    this.PaymentTypeInformation == input.PaymentTypeInformation ||
                    (this.PaymentTypeInformation != null &&
                    this.PaymentTypeInformation.Equals(input.PaymentTypeInformation))
                ) && 
                (
                    this.RequestedExecutionDate == input.RequestedExecutionDate ||
                    (this.RequestedExecutionDate != null &&
                    this.RequestedExecutionDate.Equals(input.RequestedExecutionDate))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.UltimateDebtor == input.UltimateDebtor ||
                    (this.UltimateDebtor != null &&
                    this.UltimateDebtor.Equals(input.UltimateDebtor))
                ) && 
                (
                    this.Debtor == input.Debtor ||
                    (this.Debtor != null &&
                    this.Debtor.Equals(input.Debtor))
                ) && 
                (
                    this.DebtorAgent == input.DebtorAgent ||
                    (this.DebtorAgent != null &&
                    this.DebtorAgent.Equals(input.DebtorAgent))
                ) && 
                (
                    this.DebtorAgentAccount == input.DebtorAgentAccount ||
                    (this.DebtorAgentAccount != null &&
                    this.DebtorAgentAccount.Equals(input.DebtorAgentAccount))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.IntermediaryAgent == input.IntermediaryAgent ||
                    (this.IntermediaryAgent != null &&
                    this.IntermediaryAgent.Equals(input.IntermediaryAgent))
                ) && 
                (
                    this.IntermediaryAgentAccount == input.IntermediaryAgentAccount ||
                    (this.IntermediaryAgentAccount != null &&
                    this.IntermediaryAgentAccount.Equals(input.IntermediaryAgentAccount))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.CreditorAgentAccount == input.CreditorAgentAccount ||
                    (this.CreditorAgentAccount != null &&
                    this.CreditorAgentAccount.Equals(input.CreditorAgentAccount))
                ) && 
                (
                    this.Creditor == input.Creditor ||
                    (this.Creditor != null &&
                    this.Creditor.Equals(input.Creditor))
                ) && 
                (
                    this.UltimateCreditor == input.UltimateCreditor ||
                    (this.UltimateCreditor != null &&
                    this.UltimateCreditor.Equals(input.UltimateCreditor))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstructionIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.InstructionIdentification.GetHashCode();
                }
                if (this.EndToEndIdentification != null)
                {
                    hashCode = (hashCode * 59) + this.EndToEndIdentification.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Purpose.GetHashCode();
                if (this.PaymentTypeInformation != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTypeInformation.GetHashCode();
                }
                if (this.RequestedExecutionDate != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedExecutionDate.GetHashCode();
                }
                if (this.InstructedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InstructedAmount.GetHashCode();
                }
                if (this.UltimateDebtor != null)
                {
                    hashCode = (hashCode * 59) + this.UltimateDebtor.GetHashCode();
                }
                if (this.Debtor != null)
                {
                    hashCode = (hashCode * 59) + this.Debtor.GetHashCode();
                }
                if (this.DebtorAgent != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAgent.GetHashCode();
                }
                if (this.DebtorAgentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAgentAccount.GetHashCode();
                }
                if (this.DebtorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAccount.GetHashCode();
                }
                if (this.IntermediaryAgent != null)
                {
                    hashCode = (hashCode * 59) + this.IntermediaryAgent.GetHashCode();
                }
                if (this.IntermediaryAgentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.IntermediaryAgentAccount.GetHashCode();
                }
                if (this.CreditorAgent != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAgent.GetHashCode();
                }
                if (this.CreditorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAccount.GetHashCode();
                }
                if (this.CreditorAgentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAgentAccount.GetHashCode();
                }
                if (this.Creditor != null)
                {
                    hashCode = (hashCode * 59) + this.Creditor.GetHashCode();
                }
                if (this.UltimateCreditor != null)
                {
                    hashCode = (hashCode * 59) + this.UltimateCreditor.GetHashCode();
                }
                if (this.RemittanceInformation != null)
                {
                    hashCode = (hashCode * 59) + this.RemittanceInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // InstructionIdentification (string) maxLength
            if (this.InstructionIdentification != null && this.InstructionIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstructionIdentification, length must be less than 35.", new [] { "InstructionIdentification" });
            }

            // EndToEndIdentification (string) maxLength
            if (this.EndToEndIdentification != null && this.EndToEndIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new [] { "EndToEndIdentification" });
            }

            yield break;
        }
    }

}
