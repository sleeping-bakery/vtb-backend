/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Реквизиты платежного распоряжения при инициировании повторяющегося  перевода денежных средств
/// </summary>
[DataContract(Name = "VRPInstruction")]
public class VRPInstruction : IEquatable<VRPInstruction>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPInstruction" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected VRPInstruction()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPInstruction" /> class.
    /// </summary>
    /// <param name="instructionIdentification">
    ///     Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции
    ///     (required).
    /// </param>
    /// <param name="endToEndIdentification">
    ///     Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без
    ///     изменений по всей сквозной цепочке. Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть
    ///     включено в несколько сообщений, связанных с платежной операцией (required).
    /// </param>
    /// <param name="purpose">(Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж..</param>
    /// <param name="paymentTypeInformation">paymentTypeInformation.</param>
    /// <param name="requestedExecutionDate">Запрошенная дата исполнения.</param>
    /// <param name="instructedAmount">instructedAmount (required).</param>
    /// <param name="ultimateDebtor">ultimateDebtor.</param>
    /// <param name="debtor">debtor.</param>
    /// <param name="debtorAgent">debtorAgent.</param>
    /// <param name="debtorAgentAccount">debtorAgentAccount.</param>
    /// <param name="debtorAccount">debtorAccount.</param>
    /// <param name="intermediaryAgent">intermediaryAgent.</param>
    /// <param name="intermediaryAgentAccount">intermediaryAgentAccount.</param>
    /// <param name="creditorAgent">creditorAgent.</param>
    /// <param name="creditorAccount">creditorAccount.</param>
    /// <param name="creditorAgentAccount">creditorAgentAccount.</param>
    /// <param name="creditor">creditor.</param>
    /// <param name="ultimateCreditor">ultimateCreditor.</param>
    /// <param name="remittanceInformation">remittanceInformation.</param>
    public VRPInstruction(string instructionIdentification = default, string endToEndIdentification = default, PurposeCode? purpose = default,
        VRPInstructionPaymentTypeInformation paymentTypeInformation = default, DateTime requestedExecutionDate = default, VRPInstructionInstructedAmount instructedAmount = default,
        VRPInstructionUltimateDebtor ultimateDebtor = default, VRPInstructionDebtor debtor = default, VRPInstructionDebtorAgent debtorAgent = default,
        VRPInstructionDebtorAgentAccount debtorAgentAccount = default, VRPInstructionDebtorAccount debtorAccount = default,
        VRPInstructionIntermediaryAgent intermediaryAgent = default, VRPInstructionIntermediaryAgentAccount intermediaryAgentAccount = default,
        VRPInstructionCreditorAgent creditorAgent = default, VRPInitiationCreditorAccount creditorAccount = default,
        VRPInitiationCreditorAgentAccount creditorAgentAccount = default, VRPInstructionCreditor creditor = default, VRPInstructionUltimateCreditor ultimateCreditor = default,
        VRPInstructionRemittanceInformation remittanceInformation = default)
    {
        // to ensure "instructionIdentification" is required (not null)
        if (instructionIdentification == null) throw new ArgumentNullException("instructionIdentification is a required property for VRPInstruction and cannot be null");
        InstructionIdentification = instructionIdentification;
        // to ensure "endToEndIdentification" is required (not null)
        if (endToEndIdentification == null) throw new ArgumentNullException("endToEndIdentification is a required property for VRPInstruction and cannot be null");
        EndToEndIdentification = endToEndIdentification;
        // to ensure "instructedAmount" is required (not null)
        if (instructedAmount == null) throw new ArgumentNullException("instructedAmount is a required property for VRPInstruction and cannot be null");
        InstructedAmount = instructedAmount;
        Purpose = purpose;
        PaymentTypeInformation = paymentTypeInformation;
        RequestedExecutionDate = requestedExecutionDate;
        UltimateDebtor = ultimateDebtor;
        Debtor = debtor;
        DebtorAgent = debtorAgent;
        DebtorAgentAccount = debtorAgentAccount;
        DebtorAccount = debtorAccount;
        IntermediaryAgent = intermediaryAgent;
        IntermediaryAgentAccount = intermediaryAgentAccount;
        CreditorAgent = creditorAgent;
        CreditorAccount = creditorAccount;
        CreditorAgentAccount = creditorAgentAccount;
        Creditor = creditor;
        UltimateCreditor = ultimateCreditor;
        RemittanceInformation = remittanceInformation;
    }

    /// <summary>
    ///     (Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж.
    /// </summary>
    /// <value>(Номер реквизита 15.5 Код вида дохода) Причина, по которой осуществляется платеж.</value>
    [DataMember(Name = "purpose", EmitDefaultValue = false)]
    public PurposeCode? Purpose { get; set; }

    /// <summary>
    ///     Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции
    /// </summary>
    /// <value>Уникальный идентификатор, присвоенный инструктирующей стороной для инструктируемой стороны для однозначного определения инструкции</value>
    [DataMember(Name = "instructionIdentification", IsRequired = true, EmitDefaultValue = true)]
    public string InstructionIdentification { get; set; }

    /// <summary>
    ///     Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке.
    ///     Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных
    ///     с платежной операцией
    /// </summary>
    /// <value>
    ///     Уникальный идентификатор, присвоенный инициирующей стороной для однозначного определения транзакции. Эта идентификация передается без изменений по всей сквозной цепочке.
    ///     Использование: сквозная идентификация может использоваться для выверки или связывания задач, относящихся к транзакции. Это может быть включено в несколько сообщений, связанных
    ///     с платежной операцией
    /// </value>
    [DataMember(Name = "endToEndIdentification", IsRequired = true, EmitDefaultValue = true)]
    public string EndToEndIdentification { get; set; }

    /// <summary>
    ///     Gets or Sets PaymentTypeInformation
    /// </summary>
    [DataMember(Name = "PaymentTypeInformation", EmitDefaultValue = false)]
    public VRPInstructionPaymentTypeInformation PaymentTypeInformation { get; set; }

    /// <summary>
    ///     Запрошенная дата исполнения
    /// </summary>
    /// <value>Запрошенная дата исполнения</value>
    [DataMember(Name = "requestedExecutionDate", EmitDefaultValue = false)]
    public DateTime RequestedExecutionDate { get; set; }

    /// <summary>
    ///     Gets or Sets InstructedAmount
    /// </summary>
    [DataMember(Name = "InstructedAmount", IsRequired = true, EmitDefaultValue = true)]
    public VRPInstructionInstructedAmount InstructedAmount { get; set; }

    /// <summary>
    ///     Gets or Sets UltimateDebtor
    /// </summary>
    [DataMember(Name = "UltimateDebtor", EmitDefaultValue = false)]
    public VRPInstructionUltimateDebtor UltimateDebtor { get; set; }

    /// <summary>
    ///     Gets or Sets Debtor
    /// </summary>
    [DataMember(Name = "Debtor", EmitDefaultValue = false)]
    public VRPInstructionDebtor Debtor { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAgent
    /// </summary>
    [DataMember(Name = "DebtorAgent", EmitDefaultValue = false)]
    public VRPInstructionDebtorAgent DebtorAgent { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAgentAccount
    /// </summary>
    [DataMember(Name = "DebtorAgentAccount", EmitDefaultValue = false)]
    public VRPInstructionDebtorAgentAccount DebtorAgentAccount { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAccount
    /// </summary>
    [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
    public VRPInstructionDebtorAccount DebtorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets IntermediaryAgent
    /// </summary>
    [DataMember(Name = "IntermediaryAgent", EmitDefaultValue = false)]
    public VRPInstructionIntermediaryAgent IntermediaryAgent { get; set; }

    /// <summary>
    ///     Gets or Sets IntermediaryAgentAccount
    /// </summary>
    [DataMember(Name = "IntermediaryAgentAccount", EmitDefaultValue = false)]
    public VRPInstructionIntermediaryAgentAccount IntermediaryAgentAccount { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAgent
    /// </summary>
    [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
    public VRPInstructionCreditorAgent CreditorAgent { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAccount
    /// </summary>
    [DataMember(Name = "CreditorAccount", EmitDefaultValue = false)]
    public VRPInitiationCreditorAccount CreditorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAgentAccount
    /// </summary>
    [DataMember(Name = "CreditorAgentAccount", EmitDefaultValue = false)]
    public VRPInitiationCreditorAgentAccount CreditorAgentAccount { get; set; }

    /// <summary>
    ///     Gets or Sets Creditor
    /// </summary>
    [DataMember(Name = "Creditor", EmitDefaultValue = false)]
    public VRPInstructionCreditor Creditor { get; set; }

    /// <summary>
    ///     Gets or Sets UltimateCreditor
    /// </summary>
    [DataMember(Name = "UltimateCreditor", EmitDefaultValue = false)]
    public VRPInstructionUltimateCreditor UltimateCreditor { get; set; }

    /// <summary>
    ///     Gets or Sets RemittanceInformation
    /// </summary>
    [DataMember(Name = "RemittanceInformation", EmitDefaultValue = false)]
    public VRPInstructionRemittanceInformation RemittanceInformation { get; set; }

    /// <summary>
    ///     Returns true if VRPInstruction instances are equal
    /// </summary>
    /// <param name="input">Instance of VRPInstruction to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VRPInstruction input)
    {
        if (input == null) return false;
        return
            (
                InstructionIdentification == input.InstructionIdentification ||
                (InstructionIdentification != null &&
                 InstructionIdentification.Equals(input.InstructionIdentification))
            ) &&
            (
                EndToEndIdentification == input.EndToEndIdentification ||
                (EndToEndIdentification != null &&
                 EndToEndIdentification.Equals(input.EndToEndIdentification))
            ) &&
            (
                Purpose == input.Purpose ||
                Purpose.Equals(input.Purpose)
            ) &&
            (
                PaymentTypeInformation == input.PaymentTypeInformation ||
                (PaymentTypeInformation != null &&
                 PaymentTypeInformation.Equals(input.PaymentTypeInformation))
            ) &&
            (
                RequestedExecutionDate == input.RequestedExecutionDate ||
                (RequestedExecutionDate != null &&
                 RequestedExecutionDate.Equals(input.RequestedExecutionDate))
            ) &&
            (
                InstructedAmount == input.InstructedAmount ||
                (InstructedAmount != null &&
                 InstructedAmount.Equals(input.InstructedAmount))
            ) &&
            (
                UltimateDebtor == input.UltimateDebtor ||
                (UltimateDebtor != null &&
                 UltimateDebtor.Equals(input.UltimateDebtor))
            ) &&
            (
                Debtor == input.Debtor ||
                (Debtor != null &&
                 Debtor.Equals(input.Debtor))
            ) &&
            (
                DebtorAgent == input.DebtorAgent ||
                (DebtorAgent != null &&
                 DebtorAgent.Equals(input.DebtorAgent))
            ) &&
            (
                DebtorAgentAccount == input.DebtorAgentAccount ||
                (DebtorAgentAccount != null &&
                 DebtorAgentAccount.Equals(input.DebtorAgentAccount))
            ) &&
            (
                DebtorAccount == input.DebtorAccount ||
                (DebtorAccount != null &&
                 DebtorAccount.Equals(input.DebtorAccount))
            ) &&
            (
                IntermediaryAgent == input.IntermediaryAgent ||
                (IntermediaryAgent != null &&
                 IntermediaryAgent.Equals(input.IntermediaryAgent))
            ) &&
            (
                IntermediaryAgentAccount == input.IntermediaryAgentAccount ||
                (IntermediaryAgentAccount != null &&
                 IntermediaryAgentAccount.Equals(input.IntermediaryAgentAccount))
            ) &&
            (
                CreditorAgent == input.CreditorAgent ||
                (CreditorAgent != null &&
                 CreditorAgent.Equals(input.CreditorAgent))
            ) &&
            (
                CreditorAccount == input.CreditorAccount ||
                (CreditorAccount != null &&
                 CreditorAccount.Equals(input.CreditorAccount))
            ) &&
            (
                CreditorAgentAccount == input.CreditorAgentAccount ||
                (CreditorAgentAccount != null &&
                 CreditorAgentAccount.Equals(input.CreditorAgentAccount))
            ) &&
            (
                Creditor == input.Creditor ||
                (Creditor != null &&
                 Creditor.Equals(input.Creditor))
            ) &&
            (
                UltimateCreditor == input.UltimateCreditor ||
                (UltimateCreditor != null &&
                 UltimateCreditor.Equals(input.UltimateCreditor))
            ) &&
            (
                RemittanceInformation == input.RemittanceInformation ||
                (RemittanceInformation != null &&
                 RemittanceInformation.Equals(input.RemittanceInformation))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // InstructionIdentification (string) maxLength
        if (InstructionIdentification != null && InstructionIdentification.Length > 35)
            yield return new ValidationResult("Invalid value for InstructionIdentification, length must be less than 35.", new[] { "InstructionIdentification" });

        // EndToEndIdentification (string) maxLength
        if (EndToEndIdentification != null && EndToEndIdentification.Length > 35)
            yield return new ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new[] { "EndToEndIdentification" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VRPInstruction {\n");
        sb.Append("  InstructionIdentification: ").Append(InstructionIdentification).Append("\n");
        sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
        sb.Append("  Purpose: ").Append(Purpose).Append("\n");
        sb.Append("  PaymentTypeInformation: ").Append(PaymentTypeInformation).Append("\n");
        sb.Append("  RequestedExecutionDate: ").Append(RequestedExecutionDate).Append("\n");
        sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
        sb.Append("  UltimateDebtor: ").Append(UltimateDebtor).Append("\n");
        sb.Append("  Debtor: ").Append(Debtor).Append("\n");
        sb.Append("  DebtorAgent: ").Append(DebtorAgent).Append("\n");
        sb.Append("  DebtorAgentAccount: ").Append(DebtorAgentAccount).Append("\n");
        sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
        sb.Append("  IntermediaryAgent: ").Append(IntermediaryAgent).Append("\n");
        sb.Append("  IntermediaryAgentAccount: ").Append(IntermediaryAgentAccount).Append("\n");
        sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
        sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
        sb.Append("  CreditorAgentAccount: ").Append(CreditorAgentAccount).Append("\n");
        sb.Append("  Creditor: ").Append(Creditor).Append("\n");
        sb.Append("  UltimateCreditor: ").Append(UltimateCreditor).Append("\n");
        sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VRPInstruction);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (InstructionIdentification != null) hashCode = hashCode * 59 + InstructionIdentification.GetHashCode();
            if (EndToEndIdentification != null) hashCode = hashCode * 59 + EndToEndIdentification.GetHashCode();
            hashCode = hashCode * 59 + Purpose.GetHashCode();
            if (PaymentTypeInformation != null) hashCode = hashCode * 59 + PaymentTypeInformation.GetHashCode();
            if (RequestedExecutionDate != null) hashCode = hashCode * 59 + RequestedExecutionDate.GetHashCode();
            if (InstructedAmount != null) hashCode = hashCode * 59 + InstructedAmount.GetHashCode();
            if (UltimateDebtor != null) hashCode = hashCode * 59 + UltimateDebtor.GetHashCode();
            if (Debtor != null) hashCode = hashCode * 59 + Debtor.GetHashCode();
            if (DebtorAgent != null) hashCode = hashCode * 59 + DebtorAgent.GetHashCode();
            if (DebtorAgentAccount != null) hashCode = hashCode * 59 + DebtorAgentAccount.GetHashCode();
            if (DebtorAccount != null) hashCode = hashCode * 59 + DebtorAccount.GetHashCode();
            if (IntermediaryAgent != null) hashCode = hashCode * 59 + IntermediaryAgent.GetHashCode();
            if (IntermediaryAgentAccount != null) hashCode = hashCode * 59 + IntermediaryAgentAccount.GetHashCode();
            if (CreditorAgent != null) hashCode = hashCode * 59 + CreditorAgent.GetHashCode();
            if (CreditorAccount != null) hashCode = hashCode * 59 + CreditorAccount.GetHashCode();
            if (CreditorAgentAccount != null) hashCode = hashCode * 59 + CreditorAgentAccount.GetHashCode();
            if (Creditor != null) hashCode = hashCode * 59 + Creditor.GetHashCode();
            if (UltimateCreditor != null) hashCode = hashCode * 59 + UltimateCreditor.GetHashCode();
            if (RemittanceInformation != null) hashCode = hashCode * 59 + RemittanceInformation.GetHashCode();
            return hashCode;
        }
    }
}