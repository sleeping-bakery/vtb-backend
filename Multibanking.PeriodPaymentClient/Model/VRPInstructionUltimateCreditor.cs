/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Фактическая сторона, которой причитается сумма денег
    /// </summary>
    [DataContract(Name = "VRPInstruction_UltimateCreditor")]
    public partial class VRPInstructionUltimateCreditor : IEquatable<VRPInstructionUltimateCreditor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPInstructionUltimateCreditor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VRPInstructionUltimateCreditor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPInstructionUltimateCreditor" /> class.
        /// </summary>
        /// <param name="name">Наименование организации или имя физического лица (required).</param>
        /// <param name="mobileNumber">Номер мобильного телефона.</param>
        /// <param name="countryOfResidence">Страна проживания.</param>
        /// <param name="countryOfBirth">Место рождения (страна).</param>
        /// <param name="provinceOfBirth">Место рождения (область)..</param>
        /// <param name="cityOfBirth">Место рождения (город)..</param>
        /// <param name="birthDate">Дата рождения..</param>
        /// <param name="identification">Идентификация юридического или физического лица. (required).</param>
        /// <param name="postalAddress">postalAddress.</param>
        public VRPInstructionUltimateCreditor(string name = default(string), string mobileNumber = default(string), string countryOfResidence = default(string), string countryOfBirth = default(string), string provinceOfBirth = default(string), string cityOfBirth = default(string), DateTime birthDate = default(DateTime), List<PartyIdentificationIdentificationInner> identification = default(List<PartyIdentificationIdentificationInner>), PartyIdentificationPostalAddress postalAddress = default(PartyIdentificationPostalAddress))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for VRPInstructionUltimateCreditor and cannot be null");
            }
            this.Name = name;
            // to ensure "identification" is required (not null)
            if (identification == null)
            {
                throw new ArgumentNullException("identification is a required property for VRPInstructionUltimateCreditor and cannot be null");
            }
            this.Identification = identification;
            this.MobileNumber = mobileNumber;
            this.CountryOfResidence = countryOfResidence;
            this.CountryOfBirth = countryOfBirth;
            this.ProvinceOfBirth = provinceOfBirth;
            this.CityOfBirth = cityOfBirth;
            this.BirthDate = birthDate;
            this.PostalAddress = postalAddress;
        }

        /// <summary>
        /// Наименование организации или имя физического лица
        /// </summary>
        /// <value>Наименование организации или имя физического лица</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Номер мобильного телефона
        /// </summary>
        /// <value>Номер мобильного телефона</value>
        [DataMember(Name = "mobileNumber", EmitDefaultValue = false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Страна проживания
        /// </summary>
        /// <value>Страна проживания</value>
        [DataMember(Name = "countryOfResidence", EmitDefaultValue = false)]
        public string CountryOfResidence { get; set; }

        /// <summary>
        /// Место рождения (страна)
        /// </summary>
        /// <value>Место рождения (страна)</value>
        [DataMember(Name = "countryOfBirth", EmitDefaultValue = false)]
        public string CountryOfBirth { get; set; }

        /// <summary>
        /// Место рождения (область).
        /// </summary>
        /// <value>Место рождения (область).</value>
        [DataMember(Name = "provinceOfBirth", EmitDefaultValue = false)]
        public string ProvinceOfBirth { get; set; }

        /// <summary>
        /// Место рождения (город).
        /// </summary>
        /// <value>Место рождения (город).</value>
        [DataMember(Name = "cityOfBirth", EmitDefaultValue = false)]
        public string CityOfBirth { get; set; }

        /// <summary>
        /// Дата рождения.
        /// </summary>
        /// <value>Дата рождения.</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// Идентификация юридического или физического лица.
        /// </summary>
        /// <value>Идентификация юридического или физического лица.</value>
        [DataMember(Name = "Identification", IsRequired = true, EmitDefaultValue = true)]
        public List<PartyIdentificationIdentificationInner> Identification { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name = "PostalAddress", EmitDefaultValue = false)]
        public PartyIdentificationPostalAddress PostalAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPInstructionUltimateCreditor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  CountryOfResidence: ").Append(CountryOfResidence).Append("\n");
            sb.Append("  CountryOfBirth: ").Append(CountryOfBirth).Append("\n");
            sb.Append("  ProvinceOfBirth: ").Append(ProvinceOfBirth).Append("\n");
            sb.Append("  CityOfBirth: ").Append(CityOfBirth).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPInstructionUltimateCreditor);
        }

        /// <summary>
        /// Returns true if VRPInstructionUltimateCreditor instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPInstructionUltimateCreditor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPInstructionUltimateCreditor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.CountryOfResidence == input.CountryOfResidence ||
                    (this.CountryOfResidence != null &&
                    this.CountryOfResidence.Equals(input.CountryOfResidence))
                ) && 
                (
                    this.CountryOfBirth == input.CountryOfBirth ||
                    (this.CountryOfBirth != null &&
                    this.CountryOfBirth.Equals(input.CountryOfBirth))
                ) && 
                (
                    this.ProvinceOfBirth == input.ProvinceOfBirth ||
                    (this.ProvinceOfBirth != null &&
                    this.ProvinceOfBirth.Equals(input.ProvinceOfBirth))
                ) && 
                (
                    this.CityOfBirth == input.CityOfBirth ||
                    (this.CityOfBirth != null &&
                    this.CityOfBirth.Equals(input.CityOfBirth))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Identification == input.Identification ||
                    this.Identification != null &&
                    input.Identification != null &&
                    this.Identification.SequenceEqual(input.Identification)
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.MobileNumber != null)
                {
                    hashCode = (hashCode * 59) + this.MobileNumber.GetHashCode();
                }
                if (this.CountryOfResidence != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfResidence.GetHashCode();
                }
                if (this.CountryOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.CountryOfBirth.GetHashCode();
                }
                if (this.ProvinceOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.ProvinceOfBirth.GetHashCode();
                }
                if (this.CityOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.CityOfBirth.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                if (this.Identification != null)
                {
                    hashCode = (hashCode * 59) + this.Identification.GetHashCode();
                }
                if (this.PostalAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PostalAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 160)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 160.", new [] { "Name" });
            }

            // MobileNumber (string) maxLength
            if (this.MobileNumber != null && this.MobileNumber.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNumber, length must be less than 15.", new [] { "MobileNumber" });
            }

            // ProvinceOfBirth (string) maxLength
            if (this.ProvinceOfBirth != null && this.ProvinceOfBirth.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProvinceOfBirth, length must be less than 35.", new [] { "ProvinceOfBirth" });
            }

            // CityOfBirth (string) maxLength
            if (this.CityOfBirth != null && this.CityOfBirth.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CityOfBirth, length must be less than 35.", new [] { "CityOfBirth" });
            }

            yield break;
        }
    }

}
