/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Информация, предоставляемая для обеспечения квитовки с позициями, которые должен обеспечить перевод, например, коммерческий счет коммерческие счета, по которым ведется учет в
///     системе ожидаемых поступлений
/// </summary>
[DataContract(Name = "VRPInitiation_RemittanceInformation")]
public class VRPInitiationRemittanceInformation : IEquatable<VRPInitiationRemittanceInformation>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPInitiationRemittanceInformation" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected VRPInitiationRemittanceInformation()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPInitiationRemittanceInformation" /> class.
    /// </summary>
    /// <param name="unstructured">Текстовое назначение платежа (required).</param>
    /// <param name="creditorReferenceInformation">creditorReferenceInformation.</param>
    /// <param name="taxRemittance">taxRemittance.</param>
    public VRPInitiationRemittanceInformation(string unstructured = default, RemittanceInformationCreditorReferenceInformation creditorReferenceInformation = default,
        RemittanceInformationTaxRemittance taxRemittance = default)
    {
        // to ensure "unstructured" is required (not null)
        if (unstructured == null) throw new ArgumentNullException("unstructured is a required property for VRPInitiationRemittanceInformation and cannot be null");
        Unstructured = unstructured;
        CreditorReferenceInformation = creditorReferenceInformation;
        TaxRemittance = taxRemittance;
    }

    /// <summary>
    ///     Текстовое назначение платежа
    /// </summary>
    /// <value>Текстовое назначение платежа</value>
    [DataMember(Name = "unstructured", IsRequired = true, EmitDefaultValue = true)]
    public string Unstructured { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorReferenceInformation
    /// </summary>
    [DataMember(Name = "CreditorReferenceInformation", EmitDefaultValue = false)]
    public RemittanceInformationCreditorReferenceInformation CreditorReferenceInformation { get; set; }

    /// <summary>
    ///     Gets or Sets TaxRemittance
    /// </summary>
    [DataMember(Name = "TaxRemittance", EmitDefaultValue = false)]
    public RemittanceInformationTaxRemittance TaxRemittance { get; set; }

    /// <summary>
    ///     Returns true if VRPInitiationRemittanceInformation instances are equal
    /// </summary>
    /// <param name="input">Instance of VRPInitiationRemittanceInformation to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VRPInitiationRemittanceInformation input)
    {
        if (input == null) return false;
        return
            (
                Unstructured == input.Unstructured ||
                (Unstructured != null &&
                 Unstructured.Equals(input.Unstructured))
            ) &&
            (
                CreditorReferenceInformation == input.CreditorReferenceInformation ||
                (CreditorReferenceInformation != null &&
                 CreditorReferenceInformation.Equals(input.CreditorReferenceInformation))
            ) &&
            (
                TaxRemittance == input.TaxRemittance ||
                (TaxRemittance != null &&
                 TaxRemittance.Equals(input.TaxRemittance))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Unstructured (string) maxLength
        if (Unstructured != null && Unstructured.Length > 140)
            yield return new ValidationResult("Invalid value for Unstructured, length must be less than 140.", new[] { "Unstructured" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VRPInitiationRemittanceInformation {\n");
        sb.Append("  Unstructured: ").Append(Unstructured).Append("\n");
        sb.Append("  CreditorReferenceInformation: ").Append(CreditorReferenceInformation).Append("\n");
        sb.Append("  TaxRemittance: ").Append(TaxRemittance).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VRPInitiationRemittanceInformation);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Unstructured != null) hashCode = hashCode * 59 + Unstructured.GetHashCode();
            if (CreditorReferenceInformation != null) hashCode = hashCode * 59 + CreditorReferenceInformation.GetHashCode();
            if (TaxRemittance != null) hashCode = hashCode * 59 + TaxRemittance.GetHashCode();
            return hashCode;
        }
    }
}