/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Полезная нагрузка запроса подтверждения наличия доступных средств
    /// </summary>
    [DataContract(Name = "VRPFundsConfirmationRequest_Data")]
    public partial class VRPFundsConfirmationRequestData : IEquatable<VRPFundsConfirmationRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPFundsConfirmationRequestData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VRPFundsConfirmationRequestData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPFundsConfirmationRequestData" /> class.
        /// </summary>
        /// <param name="consentId">Уникальный идентификатор, определенный ППИУ для однозначного определения ресурса согласия наличия денежных срелств (required).</param>
        /// <param name="reference">Уникальная идентификатор, определенный СППУ, однозначно ссылающийся на запрос, связанный с платежной инструкцией (required).</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        public VRPFundsConfirmationRequestData(string consentId = default(string), string reference = default(string), VRPFundsConfirmationRequestDataInstructedAmount instructedAmount = default(VRPFundsConfirmationRequestDataInstructedAmount))
        {
            // to ensure "consentId" is required (not null)
            if (consentId == null)
            {
                throw new ArgumentNullException("consentId is a required property for VRPFundsConfirmationRequestData and cannot be null");
            }
            this.ConsentId = consentId;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for VRPFundsConfirmationRequestData and cannot be null");
            }
            this.Reference = reference;
            // to ensure "instructedAmount" is required (not null)
            if (instructedAmount == null)
            {
                throw new ArgumentNullException("instructedAmount is a required property for VRPFundsConfirmationRequestData and cannot be null");
            }
            this.InstructedAmount = instructedAmount;
        }

        /// <summary>
        /// Уникальный идентификатор, определенный ППИУ для однозначного определения ресурса согласия наличия денежных срелств
        /// </summary>
        /// <value>Уникальный идентификатор, определенный ППИУ для однозначного определения ресурса согласия наличия денежных срелств</value>
        [DataMember(Name = "consentId", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentId { get; set; }

        /// <summary>
        /// Уникальная идентификатор, определенный СППУ, однозначно ссылающийся на запрос, связанный с платежной инструкцией
        /// </summary>
        /// <value>Уникальная идентификатор, определенный СППУ, однозначно ссылающийся на запрос, связанный с платежной инструкцией</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "InstructedAmount", IsRequired = true, EmitDefaultValue = true)]
        public VRPFundsConfirmationRequestDataInstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPFundsConfirmationRequestData {\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPFundsConfirmationRequestData);
        }

        /// <summary>
        /// Returns true if VRPFundsConfirmationRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPFundsConfirmationRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPFundsConfirmationRequestData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.InstructedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.InstructedAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ConsentId (string) maxLength
            if (this.ConsentId != null && this.ConsentId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConsentId, length must be less than 128.", new [] { "ConsentId" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 35.", new [] { "Reference" });
            }

            yield break;
        }
    }

}
