/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     VRPResponseDataChargesInner
/// </summary>
[DataContract(Name = "VRPResponse_Data_Charges_inner")]
public class VRPResponseDataChargesInner : IEquatable<VRPResponseDataChargesInner>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPResponseDataChargesInner" /> class.
    /// </summary>
    /// <param name="chargeBearer">chargeBearer.</param>
    /// <param name="amount">amount.</param>
    public VRPResponseDataChargesInner(ChargeBearerTypeCode? chargeBearer = default, ChargeAmount amount = default)
    {
        ChargeBearer = chargeBearer;
        Amount = amount;
    }

    /// <summary>
    ///     Gets or Sets ChargeBearer
    /// </summary>
    [DataMember(Name = "chargeBearer", EmitDefaultValue = false)]
    public ChargeBearerTypeCode? ChargeBearer { get; set; }

    /// <summary>
    ///     Gets or Sets Amount
    /// </summary>
    [DataMember(Name = "Amount", EmitDefaultValue = false)]
    public ChargeAmount Amount { get; set; }

    /// <summary>
    ///     Returns true if VRPResponseDataChargesInner instances are equal
    /// </summary>
    /// <param name="input">Instance of VRPResponseDataChargesInner to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VRPResponseDataChargesInner input)
    {
        if (input == null) return false;
        return
            (
                ChargeBearer == input.ChargeBearer ||
                ChargeBearer.Equals(input.ChargeBearer)
            ) &&
            (
                Amount == input.Amount ||
                (Amount != null &&
                 Amount.Equals(input.Amount))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VRPResponseDataChargesInner {\n");
        sb.Append("  ChargeBearer: ").Append(ChargeBearer).Append("\n");
        sb.Append("  Amount: ").Append(Amount).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VRPResponseDataChargesInner);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + ChargeBearer.GetHashCode();
            if (Amount != null) hashCode = hashCode * 59 + Amount.GetHashCode();
            return hashCode;
        }
    }
}