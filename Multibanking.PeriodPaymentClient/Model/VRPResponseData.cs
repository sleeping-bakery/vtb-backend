/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Полезная нагрузка ответа
/// </summary>
[DataContract(Name = "VRPResponse_Data")]
public class VRPResponseData : IEquatable<VRPResponseData>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPResponseData" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected VRPResponseData()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPResponseData" /> class.
    /// </summary>
    /// <param name="vRPId">Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса ППДС (required).</param>
    /// <param name="consentId">Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование (required).</param>
    /// <param name="creationDateTime">Дата и время создания ресурса Согласия на инициирование (required).</param>
    /// <param name="status">Статус платежа на текущий момент времени (required).</param>
    /// <param name="statusUpdateDateTime">Дата и время обновления статуса платежа (required).</param>
    /// <param name="expectedExecutionDateTime">Ожидаемая дата и время исполнения платежа.</param>
    /// <param name="expectedSettlementDateTime">Ожидаемая дата и время расчета платежа.</param>
    /// <param name="charges">Сборы при проведении платежа.</param>
    /// <param name="refund">refund.</param>
    /// <param name="instruction">instruction (required).</param>
    /// <param name="initiation">initiation (required).</param>
    /// <param name="debtorAccount">debtorAccount (required).</param>
    public VRPResponseData(string vRPId = default, string consentId = default, DateTime creationDateTime = default, TransactionStatusCode status = default,
        DateTime statusUpdateDateTime = default, DateTime expectedExecutionDateTime = default, DateTime expectedSettlementDateTime = default,
        List<VRPResponseDataChargesInner> charges = default, VRPResponseDataRefund refund = default, VRPRequestDataInstruction instruction = default,
        VRPConsentResponseDataInitiation initiation = default, VRPInstructionDebtorAccount debtorAccount = default)
    {
        // to ensure "vRPId" is required (not null)
        if (vRPId == null) throw new ArgumentNullException("vRPId is a required property for VRPResponseData and cannot be null");
        VRPId = vRPId;
        // to ensure "consentId" is required (not null)
        if (consentId == null) throw new ArgumentNullException("consentId is a required property for VRPResponseData and cannot be null");
        ConsentId = consentId;
        CreationDateTime = creationDateTime;
        Status = status;
        StatusUpdateDateTime = statusUpdateDateTime;
        // to ensure "instruction" is required (not null)
        if (instruction == null) throw new ArgumentNullException("instruction is a required property for VRPResponseData and cannot be null");
        Instruction = instruction;
        // to ensure "initiation" is required (not null)
        if (initiation == null) throw new ArgumentNullException("initiation is a required property for VRPResponseData and cannot be null");
        Initiation = initiation;
        // to ensure "debtorAccount" is required (not null)
        if (debtorAccount == null) throw new ArgumentNullException("debtorAccount is a required property for VRPResponseData and cannot be null");
        DebtorAccount = debtorAccount;
        ExpectedExecutionDateTime = expectedExecutionDateTime;
        ExpectedSettlementDateTime = expectedSettlementDateTime;
        Charges = charges;
        Refund = refund;
    }

    /// <summary>
    ///     Статус платежа на текущий момент времени
    /// </summary>
    /// <value>Статус платежа на текущий момент времени</value>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
    public TransactionStatusCode Status { get; set; }

    /// <summary>
    ///     Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса ППДС
    /// </summary>
    /// <value>Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса ППДС</value>
    [DataMember(Name = "VRPId", IsRequired = true, EmitDefaultValue = true)]
    public string VRPId { get; set; }

    /// <summary>
    ///     Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование
    /// </summary>
    /// <value>Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование</value>
    [DataMember(Name = "consentId", IsRequired = true, EmitDefaultValue = true)]
    public string ConsentId { get; set; }

    /// <summary>
    ///     Дата и время создания ресурса Согласия на инициирование
    /// </summary>
    /// <value>Дата и время создания ресурса Согласия на инициирование</value>
    [DataMember(Name = "creationDateTime", IsRequired = true, EmitDefaultValue = true)]
    public DateTime CreationDateTime { get; set; }

    /// <summary>
    ///     Дата и время обновления статуса платежа
    /// </summary>
    /// <value>Дата и время обновления статуса платежа</value>
    [DataMember(Name = "statusUpdateDateTime", IsRequired = true, EmitDefaultValue = true)]
    public DateTime StatusUpdateDateTime { get; set; }

    /// <summary>
    ///     Ожидаемая дата и время исполнения платежа
    /// </summary>
    /// <value>Ожидаемая дата и время исполнения платежа</value>
    [DataMember(Name = "expectedExecutionDateTime", EmitDefaultValue = false)]
    public DateTime ExpectedExecutionDateTime { get; set; }

    /// <summary>
    ///     Ожидаемая дата и время расчета платежа
    /// </summary>
    /// <value>Ожидаемая дата и время расчета платежа</value>
    [DataMember(Name = "expectedSettlementDateTime", EmitDefaultValue = false)]
    public DateTime ExpectedSettlementDateTime { get; set; }

    /// <summary>
    ///     Сборы при проведении платежа
    /// </summary>
    /// <value>Сборы при проведении платежа</value>
    [DataMember(Name = "Charges", EmitDefaultValue = false)]
    public List<VRPResponseDataChargesInner> Charges { get; set; }

    /// <summary>
    ///     Gets or Sets Refund
    /// </summary>
    [DataMember(Name = "Refund", EmitDefaultValue = false)]
    public VRPResponseDataRefund Refund { get; set; }

    /// <summary>
    ///     Gets or Sets Instruction
    /// </summary>
    [DataMember(Name = "Instruction", IsRequired = true, EmitDefaultValue = true)]
    public VRPRequestDataInstruction Instruction { get; set; }

    /// <summary>
    ///     Gets or Sets Initiation
    /// </summary>
    [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
    public VRPConsentResponseDataInitiation Initiation { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAccount
    /// </summary>
    [DataMember(Name = "DebtorAccount", IsRequired = true, EmitDefaultValue = true)]
    public VRPInstructionDebtorAccount DebtorAccount { get; set; }

    /// <summary>
    ///     Returns true if VRPResponseData instances are equal
    /// </summary>
    /// <param name="input">Instance of VRPResponseData to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VRPResponseData input)
    {
        if (input == null) return false;
        return
            (
                VRPId == input.VRPId ||
                (VRPId != null &&
                 VRPId.Equals(input.VRPId))
            ) &&
            (
                ConsentId == input.ConsentId ||
                (ConsentId != null &&
                 ConsentId.Equals(input.ConsentId))
            ) &&
            (
                CreationDateTime == input.CreationDateTime ||
                (CreationDateTime != null &&
                 CreationDateTime.Equals(input.CreationDateTime))
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                StatusUpdateDateTime == input.StatusUpdateDateTime ||
                (StatusUpdateDateTime != null &&
                 StatusUpdateDateTime.Equals(input.StatusUpdateDateTime))
            ) &&
            (
                ExpectedExecutionDateTime == input.ExpectedExecutionDateTime ||
                (ExpectedExecutionDateTime != null &&
                 ExpectedExecutionDateTime.Equals(input.ExpectedExecutionDateTime))
            ) &&
            (
                ExpectedSettlementDateTime == input.ExpectedSettlementDateTime ||
                (ExpectedSettlementDateTime != null &&
                 ExpectedSettlementDateTime.Equals(input.ExpectedSettlementDateTime))
            ) &&
            (
                Charges == input.Charges ||
                (Charges != null &&
                 input.Charges != null &&
                 Charges.SequenceEqual(input.Charges))
            ) &&
            (
                Refund == input.Refund ||
                (Refund != null &&
                 Refund.Equals(input.Refund))
            ) &&
            (
                Instruction == input.Instruction ||
                (Instruction != null &&
                 Instruction.Equals(input.Instruction))
            ) &&
            (
                Initiation == input.Initiation ||
                (Initiation != null &&
                 Initiation.Equals(input.Initiation))
            ) &&
            (
                DebtorAccount == input.DebtorAccount ||
                (DebtorAccount != null &&
                 DebtorAccount.Equals(input.DebtorAccount))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // VRPId (string) maxLength
        if (VRPId != null && VRPId.Length > 128) yield return new ValidationResult("Invalid value for VRPId, length must be less than 128.", new[] { "VRPId" });

        // ConsentId (string) maxLength
        if (ConsentId != null && ConsentId.Length > 128) yield return new ValidationResult("Invalid value for ConsentId, length must be less than 128.", new[] { "ConsentId" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VRPResponseData {\n");
        sb.Append("  VRPId: ").Append(VRPId).Append("\n");
        sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
        sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  StatusUpdateDateTime: ").Append(StatusUpdateDateTime).Append("\n");
        sb.Append("  ExpectedExecutionDateTime: ").Append(ExpectedExecutionDateTime).Append("\n");
        sb.Append("  ExpectedSettlementDateTime: ").Append(ExpectedSettlementDateTime).Append("\n");
        sb.Append("  Charges: ").Append(Charges).Append("\n");
        sb.Append("  Refund: ").Append(Refund).Append("\n");
        sb.Append("  Instruction: ").Append(Instruction).Append("\n");
        sb.Append("  Initiation: ").Append(Initiation).Append("\n");
        sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VRPResponseData);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (VRPId != null) hashCode = hashCode * 59 + VRPId.GetHashCode();
            if (ConsentId != null) hashCode = hashCode * 59 + ConsentId.GetHashCode();
            if (CreationDateTime != null) hashCode = hashCode * 59 + CreationDateTime.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (StatusUpdateDateTime != null) hashCode = hashCode * 59 + StatusUpdateDateTime.GetHashCode();
            if (ExpectedExecutionDateTime != null) hashCode = hashCode * 59 + ExpectedExecutionDateTime.GetHashCode();
            if (ExpectedSettlementDateTime != null) hashCode = hashCode * 59 + ExpectedSettlementDateTime.GetHashCode();
            if (Charges != null) hashCode = hashCode * 59 + Charges.GetHashCode();
            if (Refund != null) hashCode = hashCode * 59 + Refund.GetHashCode();
            if (Instruction != null) hashCode = hashCode * 59 + Instruction.GetHashCode();
            if (Initiation != null) hashCode = hashCode * 59 + Initiation.GetHashCode();
            if (DebtorAccount != null) hashCode = hashCode * 59 + DebtorAccount.GetHashCode();
            return hashCode;
        }
    }
}