/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Контейнер с детализацией ошибки
/// </summary>
[DataContract(Name = "OBRUErrorResponse")]
public class OBRUErrorResponse : IEquatable<OBRUErrorResponse>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="OBRUErrorResponse" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OBRUErrorResponse()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="OBRUErrorResponse" /> class.
    /// </summary>
    /// <param name="code">Высокоуровневый текстовый код ошибки, необходимый для классификации (required).</param>
    /// <param name="id">Уникальный идентификатор ошибки, для целей аудита, в случае неизвестных / не классифицированных ошибок.</param>
    /// <param name="message">Краткое сообщение об ошибке. Например, «что-то не так с предоставленными параметрами запроса» (required).</param>
    /// <param name="errors">errors (required).</param>
    public OBRUErrorResponse(string code = default, string id = default, object message = default, List<OBRUErrorResponseErrorsInner> errors = default)
    {
        // to ensure "code" is required (not null)
        if (code == null) throw new ArgumentNullException("code is a required property for OBRUErrorResponse and cannot be null");
        Code = code;
        // to ensure "message" is required (not null)
        if (message == null) throw new ArgumentNullException("message is a required property for OBRUErrorResponse and cannot be null");
        Message = message;
        // to ensure "errors" is required (not null)
        if (errors == null) throw new ArgumentNullException("errors is a required property for OBRUErrorResponse and cannot be null");
        Errors = errors;
        Id = id;
    }

    /// <summary>
    ///     Высокоуровневый текстовый код ошибки, необходимый для классификации
    /// </summary>
    /// <value>Высокоуровневый текстовый код ошибки, необходимый для классификации</value>
    [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
    public string Code { get; set; }

    /// <summary>
    ///     Уникальный идентификатор ошибки, для целей аудита, в случае неизвестных / не классифицированных ошибок
    /// </summary>
    /// <value>Уникальный идентификатор ошибки, для целей аудита, в случае неизвестных / не классифицированных ошибок</value>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     Краткое сообщение об ошибке. Например, «что-то не так с предоставленными параметрами запроса»
    /// </summary>
    /// <value>Краткое сообщение об ошибке. Например, «что-то не так с предоставленными параметрами запроса»</value>
    [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
    public object Message { get; set; }

    /// <summary>
    ///     Gets or Sets Errors
    /// </summary>
    [DataMember(Name = "Errors", IsRequired = true, EmitDefaultValue = true)]
    public List<OBRUErrorResponseErrorsInner> Errors { get; set; }

    /// <summary>
    ///     Returns true if OBRUErrorResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of OBRUErrorResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OBRUErrorResponse input)
    {
        if (input == null) return false;
        return
            (
                Code == input.Code ||
                (Code != null &&
                 Code.Equals(input.Code))
            ) &&
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                Message == input.Message ||
                (Message != null &&
                 Message.Equals(input.Message))
            ) &&
            (
                Errors == input.Errors ||
                (Errors != null &&
                 input.Errors != null &&
                 Errors.SequenceEqual(input.Errors))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Code (string) maxLength
        if (Code != null && Code.Length > 40) yield return new ValidationResult("Invalid value for Code, length must be less than 40.", new[] { "Code" });

        // Code (string) minLength
        if (Code != null && Code.Length < 1) yield return new ValidationResult("Invalid value for Code, length must be greater than 1.", new[] { "Code" });

        // Id (string) maxLength
        if (Id != null && Id.Length > 40) yield return new ValidationResult("Invalid value for Id, length must be less than 40.", new[] { "Id" });

        // Id (string) minLength
        if (Id != null && Id.Length < 1) yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new[] { "Id" });

        // Message (Object) maxLength
        if (Message != null && Message.ToString().Length > 500) yield return new ValidationResult("Invalid value for Message, length must be less than 500.", new[] { "Message" });

        // Message (Object) minLength
        if (Message != null && Message.ToString().Length < 1) yield return new ValidationResult("Invalid value for Message, length must be greater than 1.", new[] { "Message" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OBRUErrorResponse {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("  Errors: ").Append(Errors).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as OBRUErrorResponse);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (Message != null) hashCode = hashCode * 59 + Message.GetHashCode();
            if (Errors != null) hashCode = hashCode * 59 + Errors.GetHashCode();
            return hashCode;
        }
    }
}