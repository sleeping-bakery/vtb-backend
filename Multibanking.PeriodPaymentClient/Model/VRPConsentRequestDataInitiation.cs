/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Постоянные реквизиты платежного распоряжения
    /// </summary>
    [DataContract(Name = "VRPConsentRequest_Data_Initiation")]
    public partial class VRPConsentRequestDataInitiation : IEquatable<VRPConsentRequestDataInitiation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPConsentRequestDataInitiation" /> class.
        /// </summary>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="creditorAgent">creditorAgent.</param>
        /// <param name="creditorAccount">creditorAccount.</param>
        /// <param name="creditorAgentAccount">creditorAgentAccount.</param>
        /// <param name="creditor">creditor.</param>
        /// <param name="remittanceInformation">remittanceInformation.</param>
        public VRPConsentRequestDataInitiation(VRPInitiationDebtorAccount debtorAccount = default(VRPInitiationDebtorAccount), VRPInitiationCreditorAgent creditorAgent = default(VRPInitiationCreditorAgent), VRPInitiationCreditorAccount creditorAccount = default(VRPInitiationCreditorAccount), VRPInitiationCreditorAgentAccount creditorAgentAccount = default(VRPInitiationCreditorAgentAccount), VRPInitiationCreditor creditor = default(VRPInitiationCreditor), VRPInitiationRemittanceInformation remittanceInformation = default(VRPInitiationRemittanceInformation))
        {
            this.DebtorAccount = debtorAccount;
            this.CreditorAgent = creditorAgent;
            this.CreditorAccount = creditorAccount;
            this.CreditorAgentAccount = creditorAgentAccount;
            this.Creditor = creditor;
            this.RemittanceInformation = remittanceInformation;
        }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
        public VRPInitiationDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgent
        /// </summary>
        [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
        public VRPInitiationCreditorAgent CreditorAgent { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name = "CreditorAccount", EmitDefaultValue = false)]
        public VRPInitiationCreditorAccount CreditorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgentAccount
        /// </summary>
        [DataMember(Name = "CreditorAgentAccount", EmitDefaultValue = false)]
        public VRPInitiationCreditorAgentAccount CreditorAgentAccount { get; set; }

        /// <summary>
        /// Gets or Sets Creditor
        /// </summary>
        [DataMember(Name = "Creditor", EmitDefaultValue = false)]
        public VRPInitiationCreditor Creditor { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name = "RemittanceInformation", EmitDefaultValue = false)]
        public VRPInitiationRemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPConsentRequestDataInitiation {\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  CreditorAgentAccount: ").Append(CreditorAgentAccount).Append("\n");
            sb.Append("  Creditor: ").Append(Creditor).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPConsentRequestDataInitiation);
        }

        /// <summary>
        /// Returns true if VRPConsentRequestDataInitiation instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPConsentRequestDataInitiation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPConsentRequestDataInitiation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.CreditorAgentAccount == input.CreditorAgentAccount ||
                    (this.CreditorAgentAccount != null &&
                    this.CreditorAgentAccount.Equals(input.CreditorAgentAccount))
                ) && 
                (
                    this.Creditor == input.Creditor ||
                    (this.Creditor != null &&
                    this.Creditor.Equals(input.Creditor))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DebtorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAccount.GetHashCode();
                }
                if (this.CreditorAgent != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAgent.GetHashCode();
                }
                if (this.CreditorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAccount.GetHashCode();
                }
                if (this.CreditorAgentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorAgentAccount.GetHashCode();
                }
                if (this.Creditor != null)
                {
                    hashCode = (hashCode * 59) + this.Creditor.GetHashCode();
                }
                if (this.RemittanceInformation != null)
                {
                    hashCode = (hashCode * 59) + this.RemittanceInformation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
