/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Сумма средств, запрашиваемая для резервирования
    /// </summary>
    [DataContract(Name = "VRPFundsConfirmationRequest_Data_InstructedAmount")]
    public partial class VRPFundsConfirmationRequestDataInstructedAmount : IEquatable<VRPFundsConfirmationRequestDataInstructedAmount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPFundsConfirmationRequestDataInstructedAmount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VRPFundsConfirmationRequestDataInstructedAmount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPFundsConfirmationRequestDataInstructedAmount" /> class.
        /// </summary>
        /// <param name="amount">Сумма денежных средств (required).</param>
        /// <param name="currency">Код валюты, соответствующий международного стандарта ISO 4217 (required).</param>
        public VRPFundsConfirmationRequestDataInstructedAmount(string amount = default(string), string currency = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for VRPFundsConfirmationRequestDataInstructedAmount and cannot be null");
            }
            this.Amount = amount;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for VRPFundsConfirmationRequestDataInstructedAmount and cannot be null");
            }
            this.Currency = currency;
        }

        /// <summary>
        /// Сумма денежных средств
        /// </summary>
        /// <value>Сумма денежных средств</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Код валюты, соответствующий международного стандарта ISO 4217
        /// </summary>
        /// <value>Код валюты, соответствующий международного стандарта ISO 4217</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPFundsConfirmationRequestDataInstructedAmount {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPFundsConfirmationRequestDataInstructedAmount);
        }

        /// <summary>
        /// Returns true if VRPFundsConfirmationRequestDataInstructedAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPFundsConfirmationRequestDataInstructedAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPFundsConfirmationRequestDataInstructedAmount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
