/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Полезная нагрузка запроса Согласия на инициирование
/// </summary>
[DataContract(Name = "VRPConsentRequest_Data")]
public class VRPConsentRequestData : IEquatable<VRPConsentRequestData>, IValidatableObject
{
    /// <summary>
    ///     Указывает, требуется ли возвращать счет для возврата денежных средств в ответе при создание ресурса ППДС
    /// </summary>
    /// <value>Указывает, требуется ли возвращать счет для возврата денежных средств в ответе при создание ресурса ППДС</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ReadRefundAccountEnum
    {
        /// <summary>
        ///     Enum Yes for value: Yes
        /// </summary>
        [EnumMember(Value = "Yes")] Yes = 1,

        /// <summary>
        ///     Enum No for value: No
        /// </summary>
        [EnumMember(Value = "No")] No = 2
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPConsentRequestData" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected VRPConsentRequestData()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="VRPConsentRequestData" /> class.
    /// </summary>
    /// <param name="controlParameters">controlParameters (required).</param>
    /// <param name="initiation">initiation (required).</param>
    /// <param name="readRefundAccount">Указывает, требуется ли возвращать счет для возврата денежных средств в ответе при создание ресурса ППДС.</param>
    public VRPConsentRequestData(VrpConsentRequestDataControlParameters controlParameters = default, VRPConsentRequestDataInitiation initiation = default,
        ReadRefundAccountEnum? readRefundAccount = default)
    {
        // to ensure "controlParameters" is required (not null)
        if (controlParameters == null) throw new ArgumentNullException("controlParameters is a required property for VRPConsentRequestData and cannot be null");
        ControlParameters = controlParameters;
        // to ensure "initiation" is required (not null)
        if (initiation == null) throw new ArgumentNullException("initiation is a required property for VRPConsentRequestData and cannot be null");
        Initiation = initiation;
        ReadRefundAccount = readRefundAccount;
    }


    /// <summary>
    ///     Указывает, требуется ли возвращать счет для возврата денежных средств в ответе при создание ресурса ППДС
    /// </summary>
    /// <value>Указывает, требуется ли возвращать счет для возврата денежных средств в ответе при создание ресурса ППДС</value>
    [DataMember(Name = "readRefundAccount", EmitDefaultValue = false)]
    public ReadRefundAccountEnum? ReadRefundAccount { get; set; }

    /// <summary>
    ///     Gets or Sets ControlParameters
    /// </summary>
    [DataMember(Name = "ControlParameters", IsRequired = true, EmitDefaultValue = true)]
    public VrpConsentRequestDataControlParameters ControlParameters { get; set; }

    /// <summary>
    ///     Gets or Sets Initiation
    /// </summary>
    [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
    public VRPConsentRequestDataInitiation Initiation { get; set; }

    /// <summary>
    ///     Returns true if VRPConsentRequestData instances are equal
    /// </summary>
    /// <param name="input">Instance of VRPConsentRequestData to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VRPConsentRequestData input)
    {
        if (input == null) return false;
        return
            (
                ControlParameters == input.ControlParameters ||
                (ControlParameters != null &&
                 ControlParameters.Equals(input.ControlParameters))
            ) &&
            (
                Initiation == input.Initiation ||
                (Initiation != null &&
                 Initiation.Equals(input.Initiation))
            ) &&
            (
                ReadRefundAccount == input.ReadRefundAccount ||
                ReadRefundAccount.Equals(input.ReadRefundAccount)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VRPConsentRequestData {\n");
        sb.Append("  ControlParameters: ").Append(ControlParameters).Append("\n");
        sb.Append("  Initiation: ").Append(Initiation).Append("\n");
        sb.Append("  ReadRefundAccount: ").Append(ReadRefundAccount).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VRPConsentRequestData);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (ControlParameters != null) hashCode = hashCode * 59 + ControlParameters.GetHashCode();
            if (Initiation != null) hashCode = hashCode * 59 + Initiation.GetHashCode();
            hashCode = hashCode * 59 + ReadRefundAccount.GetHashCode();
            return hashCode;
        }
    }
}