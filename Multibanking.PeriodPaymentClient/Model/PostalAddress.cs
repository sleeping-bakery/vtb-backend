/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Почтовый адрес
    /// </summary>
    [DataContract(Name = "PostalAddress")]
    public partial class PostalAddress : IEquatable<PostalAddress>, IValidatableObject
    {

        /// <summary>
        /// Тип адреса
        /// </summary>
        /// <value>Тип адреса</value>
        [DataMember(Name = "addressType", EmitDefaultValue = false)]
        public AddressTypeCode? AddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostalAddress" /> class.
        /// </summary>
        /// <param name="addressType">Тип адреса.</param>
        /// <param name="addressLine">Строка адреса.</param>
        /// <param name="streetName">Наименование улицы или проспекта.</param>
        /// <param name="buildingNumber">Номер, который определяет положение здания на улице.</param>
        /// <param name="postCode">Почтовый индекс.</param>
        /// <param name="townName">Наименование населённого пункта или территории, находящейся вне границ поселений.</param>
        /// <param name="countrySubDivision">Наименование и тип субъекта Российской Федерации.</param>
        /// <param name="country">Название страны в кодированной форме.</param>
        public PostalAddress(AddressTypeCode? addressType = default(AddressTypeCode?), List<string> addressLine = default(List<string>), string streetName = default(string), string buildingNumber = default(string), string postCode = default(string), string townName = default(string), string countrySubDivision = default(string), string country = default(string))
        {
            this.AddressType = addressType;
            this.AddressLine = addressLine;
            this.StreetName = streetName;
            this.BuildingNumber = buildingNumber;
            this.PostCode = postCode;
            this.TownName = townName;
            this.CountrySubDivision = countrySubDivision;
            this.Country = country;
        }

        /// <summary>
        /// Строка адреса
        /// </summary>
        /// <value>Строка адреса</value>
        [DataMember(Name = "addressLine", EmitDefaultValue = false)]
        public List<string> AddressLine { get; set; }

        /// <summary>
        /// Наименование улицы или проспекта
        /// </summary>
        /// <value>Наименование улицы или проспекта</value>
        [DataMember(Name = "streetName", EmitDefaultValue = false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Номер, который определяет положение здания на улице
        /// </summary>
        /// <value>Номер, который определяет положение здания на улице</value>
        [DataMember(Name = "buildingNumber", EmitDefaultValue = false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Почтовый индекс
        /// </summary>
        /// <value>Почтовый индекс</value>
        [DataMember(Name = "postCode", EmitDefaultValue = false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Наименование населённого пункта или территории, находящейся вне границ поселений
        /// </summary>
        /// <value>Наименование населённого пункта или территории, находящейся вне границ поселений</value>
        [DataMember(Name = "townName", EmitDefaultValue = false)]
        public string TownName { get; set; }

        /// <summary>
        /// Наименование и тип субъекта Российской Федерации
        /// </summary>
        /// <value>Наименование и тип субъекта Российской Федерации</value>
        [DataMember(Name = "countrySubDivision", EmitDefaultValue = false)]
        public string CountrySubDivision { get; set; }

        /// <summary>
        /// Название страны в кодированной форме
        /// </summary>
        /// <value>Название страны в кодированной форме</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostalAddress {\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  AddressLine: ").Append(AddressLine).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  TownName: ").Append(TownName).Append("\n");
            sb.Append("  CountrySubDivision: ").Append(CountrySubDivision).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostalAddress);
        }

        /// <summary>
        /// Returns true if PostalAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of PostalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostalAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressType == input.AddressType ||
                    this.AddressType.Equals(input.AddressType)
                ) && 
                (
                    this.AddressLine == input.AddressLine ||
                    this.AddressLine != null &&
                    input.AddressLine != null &&
                    this.AddressLine.SequenceEqual(input.AddressLine)
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.TownName == input.TownName ||
                    (this.TownName != null &&
                    this.TownName.Equals(input.TownName))
                ) && 
                (
                    this.CountrySubDivision == input.CountrySubDivision ||
                    (this.CountrySubDivision != null &&
                    this.CountrySubDivision.Equals(input.CountrySubDivision))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AddressType.GetHashCode();
                if (this.AddressLine != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine.GetHashCode();
                }
                if (this.StreetName != null)
                {
                    hashCode = (hashCode * 59) + this.StreetName.GetHashCode();
                }
                if (this.BuildingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BuildingNumber.GetHashCode();
                }
                if (this.PostCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostCode.GetHashCode();
                }
                if (this.TownName != null)
                {
                    hashCode = (hashCode * 59) + this.TownName.GetHashCode();
                }
                if (this.CountrySubDivision != null)
                {
                    hashCode = (hashCode * 59) + this.CountrySubDivision.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StreetName (string) maxLength
            if (this.StreetName != null && this.StreetName.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StreetName, length must be less than 70.", new [] { "StreetName" });
            }

            // BuildingNumber (string) maxLength
            if (this.BuildingNumber != null && this.BuildingNumber.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuildingNumber, length must be less than 16.", new [] { "BuildingNumber" });
            }

            // PostCode (string) maxLength
            if (this.PostCode != null && this.PostCode.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostCode, length must be less than 16.", new [] { "PostCode" });
            }

            // TownName (string) maxLength
            if (this.TownName != null && this.TownName.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TownName, length must be less than 35.", new [] { "TownName" });
            }

            // CountrySubDivision (string) maxLength
            if (this.CountrySubDivision != null && this.CountrySubDivision.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountrySubDivision, length must be less than 35.", new [] { "CountrySubDivision" });
            }

            yield break;
        }
    }

}
