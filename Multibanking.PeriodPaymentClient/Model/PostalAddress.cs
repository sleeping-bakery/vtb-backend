/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.PeriodPaymentClient.Model;

/// <summary>
///     Почтовый адрес
/// </summary>
[DataContract(Name = "PostalAddress")]
public class PostalAddress : IEquatable<PostalAddress>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PostalAddress" /> class.
    /// </summary>
    /// <param name="addressType">Тип адреса.</param>
    /// <param name="addressLine">Строка адреса.</param>
    /// <param name="streetName">Наименование улицы или проспекта.</param>
    /// <param name="buildingNumber">Номер, который определяет положение здания на улице.</param>
    /// <param name="postCode">Почтовый индекс.</param>
    /// <param name="townName">Наименование населённого пункта или территории, находящейся вне границ поселений.</param>
    /// <param name="countrySubDivision">Наименование и тип субъекта Российской Федерации.</param>
    /// <param name="country">Название страны в кодированной форме.</param>
    public PostalAddress(AddressTypeCode? addressType = default, List<string> addressLine = default, string streetName = default, string buildingNumber = default,
        string postCode = default, string townName = default, string countrySubDivision = default, string country = default)
    {
        AddressType = addressType;
        AddressLine = addressLine;
        StreetName = streetName;
        BuildingNumber = buildingNumber;
        PostCode = postCode;
        TownName = townName;
        CountrySubDivision = countrySubDivision;
        Country = country;
    }

    /// <summary>
    ///     Тип адреса
    /// </summary>
    /// <value>Тип адреса</value>
    [DataMember(Name = "addressType", EmitDefaultValue = false)]
    public AddressTypeCode? AddressType { get; set; }

    /// <summary>
    ///     Строка адреса
    /// </summary>
    /// <value>Строка адреса</value>
    [DataMember(Name = "addressLine", EmitDefaultValue = false)]
    public List<string> AddressLine { get; set; }

    /// <summary>
    ///     Наименование улицы или проспекта
    /// </summary>
    /// <value>Наименование улицы или проспекта</value>
    [DataMember(Name = "streetName", EmitDefaultValue = false)]
    public string StreetName { get; set; }

    /// <summary>
    ///     Номер, который определяет положение здания на улице
    /// </summary>
    /// <value>Номер, который определяет положение здания на улице</value>
    [DataMember(Name = "buildingNumber", EmitDefaultValue = false)]
    public string BuildingNumber { get; set; }

    /// <summary>
    ///     Почтовый индекс
    /// </summary>
    /// <value>Почтовый индекс</value>
    [DataMember(Name = "postCode", EmitDefaultValue = false)]
    public string PostCode { get; set; }

    /// <summary>
    ///     Наименование населённого пункта или территории, находящейся вне границ поселений
    /// </summary>
    /// <value>Наименование населённого пункта или территории, находящейся вне границ поселений</value>
    [DataMember(Name = "townName", EmitDefaultValue = false)]
    public string TownName { get; set; }

    /// <summary>
    ///     Наименование и тип субъекта Российской Федерации
    /// </summary>
    /// <value>Наименование и тип субъекта Российской Федерации</value>
    [DataMember(Name = "countrySubDivision", EmitDefaultValue = false)]
    public string CountrySubDivision { get; set; }

    /// <summary>
    ///     Название страны в кодированной форме
    /// </summary>
    /// <value>Название страны в кодированной форме</value>
    [DataMember(Name = "country", EmitDefaultValue = false)]
    public string Country { get; set; }

    /// <summary>
    ///     Returns true if PostalAddress instances are equal
    /// </summary>
    /// <param name="input">Instance of PostalAddress to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(PostalAddress input)
    {
        if (input == null) return false;
        return
            (
                AddressType == input.AddressType ||
                AddressType.Equals(input.AddressType)
            ) &&
            (
                AddressLine == input.AddressLine ||
                (AddressLine != null &&
                 input.AddressLine != null &&
                 AddressLine.SequenceEqual(input.AddressLine))
            ) &&
            (
                StreetName == input.StreetName ||
                (StreetName != null &&
                 StreetName.Equals(input.StreetName))
            ) &&
            (
                BuildingNumber == input.BuildingNumber ||
                (BuildingNumber != null &&
                 BuildingNumber.Equals(input.BuildingNumber))
            ) &&
            (
                PostCode == input.PostCode ||
                (PostCode != null &&
                 PostCode.Equals(input.PostCode))
            ) &&
            (
                TownName == input.TownName ||
                (TownName != null &&
                 TownName.Equals(input.TownName))
            ) &&
            (
                CountrySubDivision == input.CountrySubDivision ||
                (CountrySubDivision != null &&
                 CountrySubDivision.Equals(input.CountrySubDivision))
            ) &&
            (
                Country == input.Country ||
                (Country != null &&
                 Country.Equals(input.Country))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // StreetName (string) maxLength
        if (StreetName != null && StreetName.Length > 70) yield return new ValidationResult("Invalid value for StreetName, length must be less than 70.", new[] { "StreetName" });

        // BuildingNumber (string) maxLength
        if (BuildingNumber != null && BuildingNumber.Length > 16)
            yield return new ValidationResult("Invalid value for BuildingNumber, length must be less than 16.", new[] { "BuildingNumber" });

        // PostCode (string) maxLength
        if (PostCode != null && PostCode.Length > 16) yield return new ValidationResult("Invalid value for PostCode, length must be less than 16.", new[] { "PostCode" });

        // TownName (string) maxLength
        if (TownName != null && TownName.Length > 35) yield return new ValidationResult("Invalid value for TownName, length must be less than 35.", new[] { "TownName" });

        // CountrySubDivision (string) maxLength
        if (CountrySubDivision != null && CountrySubDivision.Length > 35)
            yield return new ValidationResult("Invalid value for CountrySubDivision, length must be less than 35.", new[] { "CountrySubDivision" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PostalAddress {\n");
        sb.Append("  AddressType: ").Append(AddressType).Append("\n");
        sb.Append("  AddressLine: ").Append(AddressLine).Append("\n");
        sb.Append("  StreetName: ").Append(StreetName).Append("\n");
        sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
        sb.Append("  PostCode: ").Append(PostCode).Append("\n");
        sb.Append("  TownName: ").Append(TownName).Append("\n");
        sb.Append("  CountrySubDivision: ").Append(CountrySubDivision).Append("\n");
        sb.Append("  Country: ").Append(Country).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as PostalAddress);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + AddressType.GetHashCode();
            if (AddressLine != null) hashCode = hashCode * 59 + AddressLine.GetHashCode();
            if (StreetName != null) hashCode = hashCode * 59 + StreetName.GetHashCode();
            if (BuildingNumber != null) hashCode = hashCode * 59 + BuildingNumber.GetHashCode();
            if (PostCode != null) hashCode = hashCode * 59 + PostCode.GetHashCode();
            if (TownName != null) hashCode = hashCode * 59 + TownName.GetHashCode();
            if (CountrySubDivision != null) hashCode = hashCode * 59 + CountrySubDivision.GetHashCode();
            if (Country != null) hashCode = hashCode * 59 + Country.GetHashCode();
            return hashCode;
        }
    }
}