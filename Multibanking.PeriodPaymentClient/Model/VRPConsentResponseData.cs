/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Полезная нагрузка Согласия на инициирование
    /// </summary>
    [DataContract(Name = "VRPConsentResponse_Data")]
    public partial class VRPConsentResponseData : IEquatable<VRPConsentResponseData>, IValidatableObject
    {
        /// <summary>
        /// Указывает, требуется ли возвращать счет для возврата денежных средчтв  в ответе при создание ресурса ППДС
        /// </summary>
        /// <value>Указывает, требуется ли возвращать счет для возврата денежных средчтв  в ответе при создание ресурса ППДС</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReadRefundAccountEnum
        {
            /// <summary>
            /// Enum Yes for value: Yes
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes = 1,

            /// <summary>
            /// Enum No for value: No
            /// </summary>
            [EnumMember(Value = "No")]
            No = 2

        }


        /// <summary>
        /// Указывает, требуется ли возвращать счет для возврата денежных средчтв  в ответе при создание ресурса ППДС
        /// </summary>
        /// <value>Указывает, требуется ли возвращать счет для возврата денежных средчтв  в ответе при создание ресурса ППДС</value>
        [DataMember(Name = "readRefundAccount", EmitDefaultValue = false)]
        public ReadRefundAccountEnum? ReadRefundAccount { get; set; }

        /// <summary>
        /// Текущий статус ресурса в форме кода
        /// </summary>
        /// <value>Текущий статус ресурса в форме кода</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ConsentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPConsentResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VRPConsentResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VRPConsentResponseData" /> class.
        /// </summary>
        /// <param name="consentId">Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование (required).</param>
        /// <param name="readRefundAccount">Указывает, требуется ли возвращать счет для возврата денежных средчтв  в ответе при создание ресурса ППДС.</param>
        /// <param name="creationDateTime">Дата и время создания ресурса |ISODateTime (required).</param>
        /// <param name="status">Текущий статус ресурса в форме кода (required).</param>
        /// <param name="statusUpdateDateTime">Дата и время обновления статуса ресурса (required).</param>
        /// <param name="controlParameters">controlParameters (required).</param>
        /// <param name="initiation">initiation (required).</param>
        /// <param name="debtorAccount">debtorAccount (required).</param>
        public VRPConsentResponseData(string consentId = default(string), ReadRefundAccountEnum? readRefundAccount = default(ReadRefundAccountEnum?), DateTime creationDateTime = default(DateTime), ConsentStatus status = default(ConsentStatus), DateTime statusUpdateDateTime = default(DateTime), VrpConsentRequestDataControlParameters controlParameters = default(VrpConsentRequestDataControlParameters), VRPConsentResponseDataInitiation initiation = default(VRPConsentResponseDataInitiation), VRPConsentResponseDataDebtorAccount debtorAccount = default(VRPConsentResponseDataDebtorAccount))
        {
            // to ensure "consentId" is required (not null)
            if (consentId == null)
            {
                throw new ArgumentNullException("consentId is a required property for VRPConsentResponseData and cannot be null");
            }
            this.ConsentId = consentId;
            this.CreationDateTime = creationDateTime;
            this.Status = status;
            this.StatusUpdateDateTime = statusUpdateDateTime;
            // to ensure "controlParameters" is required (not null)
            if (controlParameters == null)
            {
                throw new ArgumentNullException("controlParameters is a required property for VRPConsentResponseData and cannot be null");
            }
            this.ControlParameters = controlParameters;
            // to ensure "initiation" is required (not null)
            if (initiation == null)
            {
                throw new ArgumentNullException("initiation is a required property for VRPConsentResponseData and cannot be null");
            }
            this.Initiation = initiation;
            // to ensure "debtorAccount" is required (not null)
            if (debtorAccount == null)
            {
                throw new ArgumentNullException("debtorAccount is a required property for VRPConsentResponseData and cannot be null");
            }
            this.DebtorAccount = debtorAccount;
            this.ReadRefundAccount = readRefundAccount;
        }

        /// <summary>
        /// Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование
        /// </summary>
        /// <value>Уникальный идентификатор, присвоенный ППИУ для однозначной идентификации ресурса Согласия на инициирование</value>
        [DataMember(Name = "consentId", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentId { get; set; }

        /// <summary>
        /// Дата и время создания ресурса |ISODateTime
        /// </summary>
        /// <value>Дата и время создания ресурса |ISODateTime</value>
        [DataMember(Name = "creationDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreationDateTime { get; set; }

        /// <summary>
        /// Дата и время обновления статуса ресурса
        /// </summary>
        /// <value>Дата и время обновления статуса ресурса</value>
        [DataMember(Name = "statusUpdateDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ControlParameters
        /// </summary>
        [DataMember(Name = "ControlParameters", IsRequired = true, EmitDefaultValue = true)]
        public VrpConsentRequestDataControlParameters ControlParameters { get; set; }

        /// <summary>
        /// Gets or Sets Initiation
        /// </summary>
        [DataMember(Name = "Initiation", IsRequired = true, EmitDefaultValue = true)]
        public VRPConsentResponseDataInitiation Initiation { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "DebtorAccount", IsRequired = true, EmitDefaultValue = true)]
        public VRPConsentResponseDataDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VRPConsentResponseData {\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  ReadRefundAccount: ").Append(ReadRefundAccount).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusUpdateDateTime: ").Append(StatusUpdateDateTime).Append("\n");
            sb.Append("  ControlParameters: ").Append(ControlParameters).Append("\n");
            sb.Append("  Initiation: ").Append(Initiation).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VRPConsentResponseData);
        }

        /// <summary>
        /// Returns true if VRPConsentResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of VRPConsentResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VRPConsentResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.ReadRefundAccount == input.ReadRefundAccount ||
                    this.ReadRefundAccount.Equals(input.ReadRefundAccount)
                ) && 
                (
                    this.CreationDateTime == input.CreationDateTime ||
                    (this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(input.CreationDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusUpdateDateTime == input.StatusUpdateDateTime ||
                    (this.StatusUpdateDateTime != null &&
                    this.StatusUpdateDateTime.Equals(input.StatusUpdateDateTime))
                ) && 
                (
                    this.ControlParameters == input.ControlParameters ||
                    (this.ControlParameters != null &&
                    this.ControlParameters.Equals(input.ControlParameters))
                ) && 
                (
                    this.Initiation == input.Initiation ||
                    (this.Initiation != null &&
                    this.Initiation.Equals(input.Initiation))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReadRefundAccount.GetHashCode();
                if (this.CreationDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StatusUpdateDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StatusUpdateDateTime.GetHashCode();
                }
                if (this.ControlParameters != null)
                {
                    hashCode = (hashCode * 59) + this.ControlParameters.GetHashCode();
                }
                if (this.Initiation != null)
                {
                    hashCode = (hashCode * 59) + this.Initiation.GetHashCode();
                }
                if (this.DebtorAccount != null)
                {
                    hashCode = (hashCode * 59) + this.DebtorAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ConsentId (string) maxLength
            if (this.ConsentId != null && this.ConsentId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConsentId, length must be less than 128.", new [] { "ConsentId" });
            }

            yield break;
        }
    }

}
