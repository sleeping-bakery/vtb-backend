/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Multibanking.PeriodPaymentClient.Client.OpenAPIDateConverter;

namespace Multibanking.PeriodPaymentClient.Model
{
    /// <summary>
    /// Назначение платежа. Предоставляемая информация, позволяющая сопоставить запись с позициями, для которых предназначен перевод
    /// </summary>
    [DataContract(Name = "RemittanceInformation")]
    public partial class RemittanceInformation : IEquatable<RemittanceInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemittanceInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemittanceInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemittanceInformation" /> class.
        /// </summary>
        /// <param name="unstructured">Текстовое назначение платежа (required).</param>
        /// <param name="creditorReferenceInformation">creditorReferenceInformation.</param>
        /// <param name="taxRemittance">taxRemittance.</param>
        public RemittanceInformation(string unstructured = default(string), RemittanceInformationCreditorReferenceInformation creditorReferenceInformation = default(RemittanceInformationCreditorReferenceInformation), RemittanceInformationTaxRemittance taxRemittance = default(RemittanceInformationTaxRemittance))
        {
            // to ensure "unstructured" is required (not null)
            if (unstructured == null)
            {
                throw new ArgumentNullException("unstructured is a required property for RemittanceInformation and cannot be null");
            }
            this.Unstructured = unstructured;
            this.CreditorReferenceInformation = creditorReferenceInformation;
            this.TaxRemittance = taxRemittance;
        }

        /// <summary>
        /// Текстовое назначение платежа
        /// </summary>
        /// <value>Текстовое назначение платежа</value>
        [DataMember(Name = "unstructured", IsRequired = true, EmitDefaultValue = true)]
        public string Unstructured { get; set; }

        /// <summary>
        /// Gets or Sets CreditorReferenceInformation
        /// </summary>
        [DataMember(Name = "CreditorReferenceInformation", EmitDefaultValue = false)]
        public RemittanceInformationCreditorReferenceInformation CreditorReferenceInformation { get; set; }

        /// <summary>
        /// Gets or Sets TaxRemittance
        /// </summary>
        [DataMember(Name = "TaxRemittance", EmitDefaultValue = false)]
        public RemittanceInformationTaxRemittance TaxRemittance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemittanceInformation {\n");
            sb.Append("  Unstructured: ").Append(Unstructured).Append("\n");
            sb.Append("  CreditorReferenceInformation: ").Append(CreditorReferenceInformation).Append("\n");
            sb.Append("  TaxRemittance: ").Append(TaxRemittance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemittanceInformation);
        }

        /// <summary>
        /// Returns true if RemittanceInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of RemittanceInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemittanceInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Unstructured == input.Unstructured ||
                    (this.Unstructured != null &&
                    this.Unstructured.Equals(input.Unstructured))
                ) && 
                (
                    this.CreditorReferenceInformation == input.CreditorReferenceInformation ||
                    (this.CreditorReferenceInformation != null &&
                    this.CreditorReferenceInformation.Equals(input.CreditorReferenceInformation))
                ) && 
                (
                    this.TaxRemittance == input.TaxRemittance ||
                    (this.TaxRemittance != null &&
                    this.TaxRemittance.Equals(input.TaxRemittance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unstructured != null)
                {
                    hashCode = (hashCode * 59) + this.Unstructured.GetHashCode();
                }
                if (this.CreditorReferenceInformation != null)
                {
                    hashCode = (hashCode * 59) + this.CreditorReferenceInformation.GetHashCode();
                }
                if (this.TaxRemittance != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRemittance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Unstructured (string) maxLength
            if (this.Unstructured != null && this.Unstructured.Length > 140)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unstructured, length must be less than 140.", new [] { "Unstructured" });
            }

            yield break;
        }
    }

}
