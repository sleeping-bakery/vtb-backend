/*
 * Периодические  переводы денежных средств с переменными реквизитами
 *
 * Спецификация содержит описание элементов, которые являются общими для всех API на периодические  переводы денежных средств с переменными реквизитами (далее по тексту ППДС). В соответствии со стандартом ППДС Пользователь имеет право предоставить долгосрочное согласие на Услугу «Платежный сервис» СППУ с целью инициирования переводов средств от их имени, без необходимости аутентификации каждого отдельного платежа Пользователем у ППИУ. При этом ППИУ и СППУ реализуют взаимодействие для осуществления ППДС используя API.
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;

namespace Multibanking.PeriodPaymentClient.Client;

/// <summary>
///     <see cref="GlobalConfiguration" /> provides a compile-time extension point for globally configuring
///     API Clients.
/// </summary>
/// <remarks>
///     A customized implementation via partial class may reside in another file and may
///     be excluded from automatic generation via a .openapi-generator-ignore file.
/// </remarks>
public class GlobalConfiguration : Configuration
{
    /// <summary>
    ///     Gets or sets the default Configuration.
    /// </summary>
    /// <value>Configuration.</value>
    public static IReadableConfiguration Instance
    {
        get => _globalConfiguration;
        set
        {
            lock (GlobalConfigSync)
            {
                _globalConfiguration = value;
            }
        }
    }

    #region Private Members

    private static readonly object GlobalConfigSync = new { };
    private static IReadableConfiguration _globalConfiguration;

    #endregion Private Members

    #region Constructors

    /// <inheritdoc />
    private GlobalConfiguration()
    {
    }

    /// <inheritdoc />
    public GlobalConfiguration(IDictionary<string, string> defaultHeader, IDictionary<string, string> apiKey, IDictionary<string, string> apiKeyPrefix,
        string basePath = "http://localhost:3000/api") : base(defaultHeader, apiKey, apiKeyPrefix, basePath)
    {
    }

    static GlobalConfiguration()
    {
        Instance = new GlobalConfiguration();
    }

    #endregion Constructors
}