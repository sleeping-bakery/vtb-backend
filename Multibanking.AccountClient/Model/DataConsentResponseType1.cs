/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Контейнер для данных
/// </summary>
[DataContract(Name = "DataConsentResponseType1")]
public class DataConsentResponseType1 : IEquatable<DataConsentResponseType1>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DataConsentResponseType1" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DataConsentResponseType1()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="DataConsentResponseType1" /> class.
    /// </summary>
    /// <param name="consentId">Уникальный идентификатор, предназначенный для идентификации ресурса согласия на доступ к счету.</param>
    /// <param name="retrievalGrantId">
    ///     Уникальный идентификатор, предназначенный для идентификации ресурса поручения на доступ
    ///     к счету. (required).
    /// </param>
    /// <param name="documentType">
    ///     Тип документа. Пока передается фиксированное значение &#39;Поручение на извлечение&#39;.
    ///     (required).
    /// </param>
    /// <param name="oGRN">
    ///     ОГРН Стороннего поставщика. Поле может не передаваться, поскольку у Стороннему поставщику известен
    ///     его ОГРН..
    /// </param>
    /// <param name="creationDateTime">Дата и время создания ресурса. (required).</param>
    /// <param name="expirationDateTime">
    ///     Дата и время истечения срока действия поручения на извлечение информации о счете. Дата
    ///     и время совпадают с датой и временем для согласия на получение информации о счете..
    /// </param>
    public DataConsentResponseType1(string consentId = default, string retrievalGrantId = default,
        string documentType = default, string oGRN = default, DateTime creationDateTime = default,
        DateTime expirationDateTime = default)
    {
        // to ensure "retrievalGrantId" is required (not null)
        if (retrievalGrantId == null)
            throw new ArgumentNullException(
                "retrievalGrantId is a required property for DataConsentResponseType1 and cannot be null");
        RetrievalGrantId = retrievalGrantId;
        // to ensure "documentType" is required (not null)
        if (documentType == null)
            throw new ArgumentNullException(
                "documentType is a required property for DataConsentResponseType1 and cannot be null");
        DocumentType = documentType;
        CreationDateTime = creationDateTime;
        ConsentId = consentId;
        OGRN = oGRN;
        ExpirationDateTime = expirationDateTime;
    }

    /// <summary>
    ///     Уникальный идентификатор, предназначенный для идентификации ресурса согласия на доступ к счету
    /// </summary>
    /// <value>Уникальный идентификатор, предназначенный для идентификации ресурса согласия на доступ к счету</value>
    [DataMember(Name = "consentId", EmitDefaultValue = false)]
    public string ConsentId { get; set; }

    /// <summary>
    ///     Уникальный идентификатор, предназначенный для идентификации ресурса поручения на доступ к счету.
    /// </summary>
    /// <value>Уникальный идентификатор, предназначенный для идентификации ресурса поручения на доступ к счету.</value>
    [DataMember(Name = "retrievalGrantId", IsRequired = true, EmitDefaultValue = true)]
    public string RetrievalGrantId { get; set; }

    /// <summary>
    ///     Тип документа. Пока передается фиксированное значение &#39;Поручение на извлечение&#39;.
    /// </summary>
    /// <value>Тип документа. Пока передается фиксированное значение &#39;Поручение на извлечение&#39;.</value>
    [DataMember(Name = "documentType", IsRequired = true, EmitDefaultValue = true)]
    public string DocumentType { get; set; }

    /// <summary>
    ///     ОГРН Стороннего поставщика. Поле может не передаваться, поскольку у Стороннему поставщику известен его ОГРН.
    /// </summary>
    /// <value>ОГРН Стороннего поставщика. Поле может не передаваться, поскольку у Стороннему поставщику известен его ОГРН.</value>
    [DataMember(Name = "OGRN", EmitDefaultValue = false)]
    public string OGRN { get; set; }

    /// <summary>
    ///     Дата и время создания ресурса.
    /// </summary>
    /// <value>Дата и время создания ресурса.</value>
    [DataMember(Name = "creationDateTime", IsRequired = true, EmitDefaultValue = true)]
    public DateTime CreationDateTime { get; set; }

    /// <summary>
    ///     Дата и время истечения срока действия поручения на извлечение информации о счете. Дата и время совпадают с датой и
    ///     временем для согласия на получение информации о счете.
    /// </summary>
    /// <value>
    ///     Дата и время истечения срока действия поручения на извлечение информации о счете. Дата и время совпадают с датой
    ///     и временем для согласия на получение информации о счете.
    /// </value>
    [DataMember(Name = "expirationDateTime", EmitDefaultValue = false)]
    public DateTime ExpirationDateTime { get; set; }

    /// <summary>
    ///     Returns true if DataConsentResponseType1 instances are equal
    /// </summary>
    /// <param name="input">Instance of DataConsentResponseType1 to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DataConsentResponseType1 input)
    {
        if (input == null) return false;
        return
            (
                ConsentId == input.ConsentId ||
                (ConsentId != null &&
                 ConsentId.Equals(input.ConsentId))
            ) &&
            (
                RetrievalGrantId == input.RetrievalGrantId ||
                (RetrievalGrantId != null &&
                 RetrievalGrantId.Equals(input.RetrievalGrantId))
            ) &&
            (
                DocumentType == input.DocumentType ||
                (DocumentType != null &&
                 DocumentType.Equals(input.DocumentType))
            ) &&
            (
                OGRN == input.OGRN ||
                (OGRN != null &&
                 OGRN.Equals(input.OGRN))
            ) &&
            (
                CreationDateTime == input.CreationDateTime ||
                (CreationDateTime != null &&
                 CreationDateTime.Equals(input.CreationDateTime))
            ) &&
            (
                ExpirationDateTime == input.ExpirationDateTime ||
                (ExpirationDateTime != null &&
                 ExpirationDateTime.Equals(input.ExpirationDateTime))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // RetrievalGrantId (string) maxLength
        if (RetrievalGrantId != null && RetrievalGrantId.Length > 128)
            yield return new ValidationResult("Invalid value for RetrievalGrantId, length must be less than 128.",
                new[] { "RetrievalGrantId" });

        // DocumentType (string) maxLength
        if (DocumentType != null && DocumentType.Length > 128)
            yield return new ValidationResult("Invalid value for DocumentType, length must be less than 128.",
                new[] { "DocumentType" });

        // OGRN (string) maxLength
        if (OGRN != null && OGRN.Length > 128)
            yield return new ValidationResult("Invalid value for OGRN, length must be less than 128.",
                new[] { "OGRN" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DataConsentResponseType1 {\n");
        sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
        sb.Append("  RetrievalGrantId: ").Append(RetrievalGrantId).Append("\n");
        sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
        sb.Append("  OGRN: ").Append(OGRN).Append("\n");
        sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
        sb.Append("  ExpirationDateTime: ").Append(ExpirationDateTime).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as DataConsentResponseType1);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (ConsentId != null) hashCode = hashCode * 59 + ConsentId.GetHashCode();
            if (RetrievalGrantId != null) hashCode = hashCode * 59 + RetrievalGrantId.GetHashCode();
            if (DocumentType != null) hashCode = hashCode * 59 + DocumentType.GetHashCode();
            if (OGRN != null) hashCode = hashCode * 59 + OGRN.GetHashCode();
            if (CreationDateTime != null) hashCode = hashCode * 59 + CreationDateTime.GetHashCode();
            if (ExpirationDateTime != null) hashCode = hashCode * 59 + ExpirationDateTime.GetHashCode();
            return hashCode;
        }
    }
}