/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     TransactionComplexType
/// </summary>
[DataContract(Name = "TransactionComplexType")]
public class TransactionComplexType : IEquatable<TransactionComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplexType" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TransactionComplexType()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplexType" /> class.
    /// </summary>
    /// <param name="transactionId">Уникальный идентификатор транзакции.</param>
    /// <param name="creditDebitIndicator">Приход/Уход (required).</param>
    /// <param name="status">Статус транзакции (required).</param>
    /// <param name="documentNumber">Номер платежного документа.</param>
    /// <param name="bookingDateTime">
    ///     Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге
    ///     обслуживающей организации. Используется стандарт ISO8601 (required).
    /// </param>
    /// <param name="valueDateTime">
    ///     Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или
    ///     перестают быть доступными владельцу счета в случае ввода дебетовой транзакции. Используется стандарт ISO8601.
    /// </param>
    /// <param name="description">Назначение перевода денежных средств.</param>
    /// <param name="amount">amount (required).</param>
    /// <param name="debtorParty">debtorParty.</param>
    /// <param name="debtorAccount">debtorAccount.</param>
    /// <param name="debtorAgent">debtorAgent.</param>
    /// <param name="creditorParty">creditorParty.</param>
    /// <param name="creditorAccount">creditorAccount.</param>
    /// <param name="creditorAgent">creditorAgent.</param>
    public TransactionComplexType(string transactionId = default,
        CreditDebitIndicatorStaticType creditDebitIndicator = default, TransactionStatusStaticType status = default,
        string documentNumber = default, DateTime bookingDateTime = default, DateTime valueDateTime = default,
        string description = default, TransactionComplexTypeAmount amount = default,
        TransactionComplexTypeDebtorParty debtorParty = default,
        TransactionComplexTypeDebtorAccount debtorAccount = default,
        TransactionComplexTypeDebtorAgent debtorAgent = default,
        TransactionComplexTypeCreditorParty creditorParty = default,
        TransactionComplexTypeCreditorAccount creditorAccount = default,
        TransactionComplexTypeCreditorAgent creditorAgent = default)
    {
        CreditDebitIndicator = creditDebitIndicator;
        Status = status;
        BookingDateTime = bookingDateTime;
        // to ensure "amount" is required (not null)
        if (amount == null)
            throw new ArgumentNullException(
                "amount is a required property for TransactionComplexType and cannot be null");
        Amount = amount;
        TransactionId = transactionId;
        DocumentNumber = documentNumber;
        ValueDateTime = valueDateTime;
        Description = description;
        DebtorParty = debtorParty;
        DebtorAccount = debtorAccount;
        DebtorAgent = debtorAgent;
        CreditorParty = creditorParty;
        CreditorAccount = creditorAccount;
        CreditorAgent = creditorAgent;
    }

    /// <summary>
    ///     Приход/Уход
    /// </summary>
    /// <value>Приход/Уход</value>
    [DataMember(Name = "creditDebitIndicator", IsRequired = true, EmitDefaultValue = true)]
    public CreditDebitIndicatorStaticType CreditDebitIndicator { get; set; }

    /// <summary>
    ///     Статус транзакции
    /// </summary>
    /// <value>Статус транзакции</value>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
    public TransactionStatusStaticType Status { get; set; }

    /// <summary>
    ///     Уникальный идентификатор транзакции
    /// </summary>
    /// <value>Уникальный идентификатор транзакции</value>
    [DataMember(Name = "transactionId", EmitDefaultValue = false)]
    public string TransactionId { get; set; }

    /// <summary>
    ///     Номер платежного документа
    /// </summary>
    /// <value>Номер платежного документа</value>
    [DataMember(Name = "documentNumber", EmitDefaultValue = false)]
    public string DocumentNumber { get; set; }

    /// <summary>
    ///     Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге обслуживающей организации.
    ///     Используется стандарт ISO8601
    /// </summary>
    /// <value>
    ///     Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге обслуживающей организации.
    ///     Используется стандарт ISO8601
    /// </value>
    [DataMember(Name = "bookingDateTime", IsRequired = true, EmitDefaultValue = true)]
    public DateTime BookingDateTime { get; set; }

    /// <summary>
    ///     Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или перестают быть
    ///     доступными владельцу счета в случае ввода дебетовой транзакции. Используется стандарт ISO8601
    /// </summary>
    /// <value>
    ///     Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или перестают быть
    ///     доступными владельцу счета в случае ввода дебетовой транзакции. Используется стандарт ISO8601
    /// </value>
    [DataMember(Name = "valueDateTime", EmitDefaultValue = false)]
    public DateTime ValueDateTime { get; set; }

    /// <summary>
    ///     Назначение перевода денежных средств
    /// </summary>
    /// <value>Назначение перевода денежных средств</value>
    [DataMember(Name = "description", EmitDefaultValue = false)]
    public string Description { get; set; }

    /// <summary>
    ///     Gets or Sets Amount
    /// </summary>
    [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
    public TransactionComplexTypeAmount Amount { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorParty
    /// </summary>
    [DataMember(Name = "DebtorParty", EmitDefaultValue = false)]
    public TransactionComplexTypeDebtorParty DebtorParty { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAccount
    /// </summary>
    [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
    public TransactionComplexTypeDebtorAccount DebtorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAgent
    /// </summary>
    [DataMember(Name = "DebtorAgent", EmitDefaultValue = false)]
    public TransactionComplexTypeDebtorAgent DebtorAgent { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorParty
    /// </summary>
    [DataMember(Name = "CreditorParty", EmitDefaultValue = false)]
    public TransactionComplexTypeCreditorParty CreditorParty { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAccount
    /// </summary>
    [DataMember(Name = "CreditorAccount", EmitDefaultValue = false)]
    public TransactionComplexTypeCreditorAccount CreditorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAgent
    /// </summary>
    [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
    public TransactionComplexTypeCreditorAgent CreditorAgent { get; set; }

    /// <summary>
    ///     Returns true if TransactionComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of TransactionComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TransactionComplexType input)
    {
        if (input == null) return false;
        return
            (
                TransactionId == input.TransactionId ||
                (TransactionId != null &&
                 TransactionId.Equals(input.TransactionId))
            ) &&
            (
                CreditDebitIndicator == input.CreditDebitIndicator ||
                CreditDebitIndicator.Equals(input.CreditDebitIndicator)
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                DocumentNumber == input.DocumentNumber ||
                (DocumentNumber != null &&
                 DocumentNumber.Equals(input.DocumentNumber))
            ) &&
            (
                BookingDateTime == input.BookingDateTime ||
                (BookingDateTime != null &&
                 BookingDateTime.Equals(input.BookingDateTime))
            ) &&
            (
                ValueDateTime == input.ValueDateTime ||
                (ValueDateTime != null &&
                 ValueDateTime.Equals(input.ValueDateTime))
            ) &&
            (
                Description == input.Description ||
                (Description != null &&
                 Description.Equals(input.Description))
            ) &&
            (
                Amount == input.Amount ||
                (Amount != null &&
                 Amount.Equals(input.Amount))
            ) &&
            (
                DebtorParty == input.DebtorParty ||
                (DebtorParty != null &&
                 DebtorParty.Equals(input.DebtorParty))
            ) &&
            (
                DebtorAccount == input.DebtorAccount ||
                (DebtorAccount != null &&
                 DebtorAccount.Equals(input.DebtorAccount))
            ) &&
            (
                DebtorAgent == input.DebtorAgent ||
                (DebtorAgent != null &&
                 DebtorAgent.Equals(input.DebtorAgent))
            ) &&
            (
                CreditorParty == input.CreditorParty ||
                (CreditorParty != null &&
                 CreditorParty.Equals(input.CreditorParty))
            ) &&
            (
                CreditorAccount == input.CreditorAccount ||
                (CreditorAccount != null &&
                 CreditorAccount.Equals(input.CreditorAccount))
            ) &&
            (
                CreditorAgent == input.CreditorAgent ||
                (CreditorAgent != null &&
                 CreditorAgent.Equals(input.CreditorAgent))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // DocumentNumber (string) maxLength
        if (DocumentNumber != null && DocumentNumber.Length > 6)
            yield return new ValidationResult("Invalid value for DocumentNumber, length must be less than 6.",
                new[] { "DocumentNumber" });

        // Description (string) maxLength
        if (Description != null && Description.Length > 300)
            yield return new ValidationResult("Invalid value for Description, length must be less than 300.",
                new[] { "Description" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TransactionComplexType {\n");
        sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
        sb.Append("  CreditDebitIndicator: ").Append(CreditDebitIndicator).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
        sb.Append("  BookingDateTime: ").Append(BookingDateTime).Append("\n");
        sb.Append("  ValueDateTime: ").Append(ValueDateTime).Append("\n");
        sb.Append("  Description: ").Append(Description).Append("\n");
        sb.Append("  Amount: ").Append(Amount).Append("\n");
        sb.Append("  DebtorParty: ").Append(DebtorParty).Append("\n");
        sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
        sb.Append("  DebtorAgent: ").Append(DebtorAgent).Append("\n");
        sb.Append("  CreditorParty: ").Append(CreditorParty).Append("\n");
        sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
        sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TransactionComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (TransactionId != null) hashCode = hashCode * 59 + TransactionId.GetHashCode();
            hashCode = hashCode * 59 + CreditDebitIndicator.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (DocumentNumber != null) hashCode = hashCode * 59 + DocumentNumber.GetHashCode();
            if (BookingDateTime != null) hashCode = hashCode * 59 + BookingDateTime.GetHashCode();
            if (ValueDateTime != null) hashCode = hashCode * 59 + ValueDateTime.GetHashCode();
            if (Description != null) hashCode = hashCode * 59 + Description.GetHashCode();
            if (Amount != null) hashCode = hashCode * 59 + Amount.GetHashCode();
            if (DebtorParty != null) hashCode = hashCode * 59 + DebtorParty.GetHashCode();
            if (DebtorAccount != null) hashCode = hashCode * 59 + DebtorAccount.GetHashCode();
            if (DebtorAgent != null) hashCode = hashCode * 59 + DebtorAgent.GetHashCode();
            if (CreditorParty != null) hashCode = hashCode * 59 + CreditorParty.GetHashCode();
            if (CreditorAccount != null) hashCode = hashCode * 59 + CreditorAccount.GetHashCode();
            if (CreditorAgent != null) hashCode = hashCode * 59 + CreditorAgent.GetHashCode();
            return hashCode;
        }
    }
}