/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Контейнер с ошибкой
/// </summary>
[DataContract(Name = "OBRUError")]
public class OBRUError : IEquatable<OBRUError>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="OBRUError" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OBRUError()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="OBRUError" /> class.
    /// </summary>
    /// <param name="errorCode">errorCode (required).</param>
    /// <param name="message">Описание ошибки. Например, &#39;Обязательное поле не указано&#39;. (required).</param>
    /// <param name="path">Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле..</param>
    /// <param name="url">URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию..</param>
    public OBRUError(OBRUErrorResponseErrorCode errorCode = default, string message = default, string path = default, string url = default)
    {
        ErrorCode = errorCode;
        // to ensure "message" is required (not null)
        if (message == null) throw new ArgumentNullException("message is a required property for OBRUError and cannot be null");
        Message = message;
        Path = path;
        Url = url;
    }

    /// <summary>
    ///     Gets or Sets ErrorCode
    /// </summary>
    [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
    public OBRUErrorResponseErrorCode ErrorCode { get; set; }

    /// <summary>
    ///     Описание ошибки. Например, &#39;Обязательное поле не указано&#39;.
    /// </summary>
    /// <value>Описание ошибки. Например, &#39;Обязательное поле не указано&#39;.</value>
    [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
    public string Message { get; set; }

    /// <summary>
    ///     Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле.
    /// </summary>
    /// <value>Путь к элементу с ошибкой в JSON объекте. Рекомендуемое, но не обязательное поле.</value>
    [DataMember(Name = "path", EmitDefaultValue = false)]
    public string Path { get; set; }

    /// <summary>
    ///     URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию.
    /// </summary>
    /// <value>URL для помощи в устранении проблемы, Также через URL можно предоставлять дополнительную информацию.</value>
    [DataMember(Name = "url", EmitDefaultValue = false)]
    public string Url { get; set; }

    /// <summary>
    ///     Returns true if OBRUError instances are equal
    /// </summary>
    /// <param name="input">Instance of OBRUError to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OBRUError input)
    {
        if (input == null) return false;
        return
            (
                ErrorCode == input.ErrorCode ||
                ErrorCode.Equals(input.ErrorCode)
            ) &&
            (
                Message == input.Message ||
                (Message != null &&
                 Message.Equals(input.Message))
            ) &&
            (
                Path == input.Path ||
                (Path != null &&
                 Path.Equals(input.Path))
            ) &&
            (
                Url == input.Url ||
                (Url != null &&
                 Url.Equals(input.Url))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Message (string) maxLength
        if (Message != null && Message.Length > 500) yield return new ValidationResult("Invalid value for Message, length must be less than 500.", new[] { "Message" });

        // Path (string) maxLength
        if (Path != null && Path.Length > 500) yield return new ValidationResult("Invalid value for Path, length must be less than 500.", new[] { "Path" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class OBRUError {\n");
        sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("  Path: ").Append(Path).Append("\n");
        sb.Append("  Url: ").Append(Url).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as OBRUError);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + ErrorCode.GetHashCode();
            if (Message != null) hashCode = hashCode * 59 + Message.GetHashCode();
            if (Path != null) hashCode = hashCode * 59 + Path.GetHashCode();
            if (Url != null) hashCode = hashCode * 59 + Url.GetHashCode();
            return hashCode;
        }
    }
}