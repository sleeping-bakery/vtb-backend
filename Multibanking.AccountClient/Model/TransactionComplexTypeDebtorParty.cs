/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Информация о контрагенте в случае кредитной операции
/// </summary>
[DataContract(Name = "TransactionComplexType_DebtorParty")]
public class TransactionComplexTypeDebtorParty : IEquatable<TransactionComplexTypeDebtorParty>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplexTypeDebtorParty" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TransactionComplexTypeDebtorParty()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplexTypeDebtorParty" /> class.
    /// </summary>
    /// <param name="inn">ИНН контрагента (required).</param>
    /// <param name="name">Наименование контрагента.</param>
    /// <param name="kpp">КПП контрагента.</param>
    public TransactionComplexTypeDebtorParty(string inn = default, string name = default, string kpp = default)
    {
        // to ensure "inn" is required (not null)
        if (inn == null) throw new ArgumentNullException("inn is a required property for TransactionComplexTypeDebtorParty and cannot be null");
        Inn = inn;
        Name = name;
        Kpp = kpp;
    }

    /// <summary>
    ///     ИНН контрагента
    /// </summary>
    /// <value>ИНН контрагента</value>
    [DataMember(Name = "inn", IsRequired = true, EmitDefaultValue = true)]
    public string Inn { get; set; }

    /// <summary>
    ///     Наименование контрагента
    /// </summary>
    /// <value>Наименование контрагента</value>
    [DataMember(Name = "name", EmitDefaultValue = false)]
    public string Name { get; set; }

    /// <summary>
    ///     КПП контрагента
    /// </summary>
    /// <value>КПП контрагента</value>
    [DataMember(Name = "kpp", EmitDefaultValue = false)]
    public string Kpp { get; set; }

    /// <summary>
    ///     Returns true if TransactionComplexTypeDebtorParty instances are equal
    /// </summary>
    /// <param name="input">Instance of TransactionComplexTypeDebtorParty to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TransactionComplexTypeDebtorParty input)
    {
        if (input == null) return false;
        return
            (
                Inn == input.Inn ||
                (Inn != null &&
                 Inn.Equals(input.Inn))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                Kpp == input.Kpp ||
                (Kpp != null &&
                 Kpp.Equals(input.Kpp))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Inn (string) maxLength
        if (Inn != null && Inn.Length > 12) yield return new ValidationResult("Invalid value for Inn, length must be less than 12.", new[] { "Inn" });

        // Name (string) maxLength
        if (Name != null && Name.Length > 160) yield return new ValidationResult("Invalid value for Name, length must be less than 160.", new[] { "Name" });

        // Kpp (string) maxLength
        if (Kpp != null && Kpp.Length > 9) yield return new ValidationResult("Invalid value for Kpp, length must be less than 9.", new[] { "Kpp" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TransactionComplexTypeDebtorParty {\n");
        sb.Append("  Inn: ").Append(Inn).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Kpp: ").Append(Kpp).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TransactionComplexTypeDebtorParty);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Inn != null) hashCode = hashCode * 59 + Inn.GetHashCode();
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (Kpp != null) hashCode = hashCode * 59 + Kpp.GetHashCode();
            return hashCode;
        }
    }
}