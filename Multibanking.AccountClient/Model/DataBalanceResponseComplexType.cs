/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Контейнер для данных
/// </summary>
[DataContract(Name = "DataBalanceResponseComplexType")]
public class DataBalanceResponseComplexType : IEquatable<DataBalanceResponseComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DataBalanceResponseComplexType" /> class.
    /// </summary>
    /// <param name="balance">balance.</param>
    public DataBalanceResponseComplexType(Collection<BalanceComplexType> balance = default)
    {
        Balance = balance;
    }

    /// <summary>
    ///     Gets or Sets Balance
    /// </summary>
    [DataMember(Name = "Balance", EmitDefaultValue = false)]
    public Collection<BalanceComplexType> Balance { get; set; }

    /// <summary>
    ///     Returns true if DataBalanceResponseComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of DataBalanceResponseComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DataBalanceResponseComplexType input)
    {
        if (input == null) return false;
        return
            Balance == input.Balance ||
            (Balance != null &&
             input.Balance != null &&
             Balance.SequenceEqual(input.Balance));
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DataBalanceResponseComplexType {\n");
        sb.Append("  Balance: ").Append(Balance).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as DataBalanceResponseComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Balance != null) hashCode = hashCode * 59 + Balance.GetHashCode();
            return hashCode;
        }
    }
}