/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Комплексный объект счета
/// </summary>
[DataContract(Name = "AccountComplexType")]
public class AccountComplexType : IEquatable<AccountComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="AccountComplexType" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected AccountComplexType()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AccountComplexType" /> class.
    /// </summary>
    /// <param name="accountId">
    ///     Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#39;accounts
    ///     &#39; (required).
    /// </param>
    /// <param name="status">Статус счета в форме кода.</param>
    /// <param name="statusUpdateDateTime">Дата и время изменения статуса счета. Используется стандарт ISO8601.</param>
    /// <param name="currency">Валюта ведения счета. Используется стандарт ISO 4217 (required).</param>
    /// <param name="accountType">Тип счета (физическое или юридическое лицо) (required).</param>
    /// <param name="accountSubType">Подтип счета (классификация банковских продуктов) (required).</param>
    /// <param name="accountDescription">Детальное описание продукта, привязанного к счету.</param>
    /// <param name="accountDetails">Подробная информация для идентификации счета.</param>
    /// <param name="owner">owner.</param>
    /// <param name="serviceProvider">serviceProvider.</param>
    public AccountComplexType(string accountId = default, AccountStatusStaticType? status = default,
        DateTime statusUpdateDateTime = default, string currency = default, AccountTypeStaticType accountType = default,
        AccountSubTypeStaticType accountSubType = default, string accountDescription = default,
        Collection<AccountDetailsComplexType> accountDetails = default, Party owner = default,
        ServiceProviderComplexType serviceProvider = default)
    {
        // to ensure "accountId" is required (not null)
        if (accountId == null)
            throw new ArgumentNullException(
                "accountId is a required property for AccountComplexType and cannot be null");
        AccountId = accountId;
        // to ensure "currency" is required (not null)
        if (currency == null)
            throw new ArgumentNullException(
                "currency is a required property for AccountComplexType and cannot be null");
        Currency = currency;
        AccountType = accountType;
        AccountSubType = accountSubType;
        Status = status;
        StatusUpdateDateTime = statusUpdateDateTime;
        AccountDescription = accountDescription;
        AccountDetails = accountDetails;
        Owner = owner;
        ServiceProvider = serviceProvider;
    }

    /// <summary>
    ///     Статус счета в форме кода
    /// </summary>
    /// <value>Статус счета в форме кода</value>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public AccountStatusStaticType? Status { get; set; }

    /// <summary>
    ///     Тип счета (физическое или юридическое лицо)
    /// </summary>
    /// <value>Тип счета (физическое или юридическое лицо)</value>
    [DataMember(Name = "accountType", IsRequired = true, EmitDefaultValue = true)]
    public AccountTypeStaticType AccountType { get; set; }

    /// <summary>
    ///     Подтип счета (классификация банковских продуктов)
    /// </summary>
    /// <value>Подтип счета (классификация банковских продуктов)</value>
    [DataMember(Name = "accountSubType", IsRequired = true, EmitDefaultValue = true)]
    public AccountSubTypeStaticType AccountSubType { get; set; }

    /// <summary>
    ///     Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#39;accounts&#39;
    /// </summary>
    /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса &#39;accounts&#39;</value>
    [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
    public string AccountId { get; set; }

    /// <summary>
    ///     Дата и время изменения статуса счета. Используется стандарт ISO8601
    /// </summary>
    /// <value>Дата и время изменения статуса счета. Используется стандарт ISO8601</value>
    [DataMember(Name = "statusUpdateDateTime", EmitDefaultValue = false)]
    public DateTime StatusUpdateDateTime { get; set; }

    /// <summary>
    ///     Валюта ведения счета. Используется стандарт ISO 4217
    /// </summary>
    /// <value>Валюта ведения счета. Используется стандарт ISO 4217</value>
    [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
    public string Currency { get; set; }

    /// <summary>
    ///     Детальное описание продукта, привязанного к счету
    /// </summary>
    /// <value>Детальное описание продукта, привязанного к счету</value>
    [DataMember(Name = "accountDescription", EmitDefaultValue = false)]
    public string AccountDescription { get; set; }

    /// <summary>
    ///     Подробная информация для идентификации счета
    /// </summary>
    /// <value>Подробная информация для идентификации счета</value>
    [DataMember(Name = "AccountDetails", EmitDefaultValue = false)]
    public Collection<AccountDetailsComplexType> AccountDetails { get; set; }

    /// <summary>
    ///     Gets or Sets Owner
    /// </summary>
    [DataMember(Name = "Owner", EmitDefaultValue = false)]
    public Party Owner { get; set; }

    /// <summary>
    ///     Gets or Sets ServiceProvider
    /// </summary>
    [DataMember(Name = "ServiceProvider", EmitDefaultValue = false)]
    public ServiceProviderComplexType ServiceProvider { get; set; }

    /// <summary>
    ///     Returns true if AccountComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of AccountComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(AccountComplexType input)
    {
        if (input == null) return false;
        return
            (
                AccountId == input.AccountId ||
                (AccountId != null &&
                 AccountId.Equals(input.AccountId))
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                StatusUpdateDateTime == input.StatusUpdateDateTime ||
                (StatusUpdateDateTime != null &&
                 StatusUpdateDateTime.Equals(input.StatusUpdateDateTime))
            ) &&
            (
                Currency == input.Currency ||
                (Currency != null &&
                 Currency.Equals(input.Currency))
            ) &&
            (
                AccountType == input.AccountType ||
                AccountType.Equals(input.AccountType)
            ) &&
            (
                AccountSubType == input.AccountSubType ||
                AccountSubType.Equals(input.AccountSubType)
            ) &&
            (
                AccountDescription == input.AccountDescription ||
                (AccountDescription != null &&
                 AccountDescription.Equals(input.AccountDescription))
            ) &&
            (
                AccountDetails == input.AccountDetails ||
                (AccountDetails != null &&
                 input.AccountDetails != null &&
                 AccountDetails.SequenceEqual(input.AccountDetails))
            ) &&
            (
                Owner == input.Owner ||
                (Owner != null &&
                 Owner.Equals(input.Owner))
            ) &&
            (
                ServiceProvider == input.ServiceProvider ||
                (ServiceProvider != null &&
                 ServiceProvider.Equals(input.ServiceProvider))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // AccountDescription (string) maxLength
        if (AccountDescription != null && AccountDescription.Length > 35)
            yield return new ValidationResult("Invalid value for AccountDescription, length must be less than 35.",
                new[] { "AccountDescription" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AccountComplexType {\n");
        sb.Append("  AccountId: ").Append(AccountId).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  StatusUpdateDateTime: ").Append(StatusUpdateDateTime).Append("\n");
        sb.Append("  Currency: ").Append(Currency).Append("\n");
        sb.Append("  AccountType: ").Append(AccountType).Append("\n");
        sb.Append("  AccountSubType: ").Append(AccountSubType).Append("\n");
        sb.Append("  AccountDescription: ").Append(AccountDescription).Append("\n");
        sb.Append("  AccountDetails: ").Append(AccountDetails).Append("\n");
        sb.Append("  Owner: ").Append(Owner).Append("\n");
        sb.Append("  ServiceProvider: ").Append(ServiceProvider).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as AccountComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (AccountId != null) hashCode = hashCode * 59 + AccountId.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (StatusUpdateDateTime != null) hashCode = hashCode * 59 + StatusUpdateDateTime.GetHashCode();
            if (Currency != null) hashCode = hashCode * 59 + Currency.GetHashCode();
            hashCode = hashCode * 59 + AccountType.GetHashCode();
            hashCode = hashCode * 59 + AccountSubType.GetHashCode();
            if (AccountDescription != null) hashCode = hashCode * 59 + AccountDescription.GetHashCode();
            if (AccountDetails != null) hashCode = hashCode * 59 + AccountDetails.GetHashCode();
            if (Owner != null) hashCode = hashCode * 59 + Owner.GetHashCode();
            if (ServiceProvider != null) hashCode = hashCode * 59 + ServiceProvider.GetHashCode();
            return hashCode;
        }
    }
}