/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Детали продавца участвующего в сделке
/// </summary>
[DataContract(Name = "TransactionComplex_MerchantDetails")]
public class TransactionComplexMerchantDetails : IEquatable<TransactionComplexMerchantDetails>,
    IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplexMerchantDetails" /> class.
    /// </summary>
    /// <param name="merchantName">Наименование продавца.</param>
    /// <param name="merchantCategoryCode">Код категории относится к типу услуг или товаров, которые продавец предоставляет.</param>
    public TransactionComplexMerchantDetails(string merchantName = default, string merchantCategoryCode = default)
    {
        MerchantName = merchantName;
        MerchantCategoryCode = merchantCategoryCode;
    }

    /// <summary>
    ///     Наименование продавца
    /// </summary>
    /// <value>Наименование продавца</value>
    [DataMember(Name = "merchantName", EmitDefaultValue = false)]
    public string MerchantName { get; set; }

    /// <summary>
    ///     Код категории относится к типу услуг или товаров, которые продавец предоставляет
    /// </summary>
    /// <value>Код категории относится к типу услуг или товаров, которые продавец предоставляет</value>
    [DataMember(Name = "merchantCategoryCode", EmitDefaultValue = false)]
    public string MerchantCategoryCode { get; set; }

    /// <summary>
    ///     Returns true if TransactionComplexMerchantDetails instances are equal
    /// </summary>
    /// <param name="input">Instance of TransactionComplexMerchantDetails to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TransactionComplexMerchantDetails input)
    {
        if (input == null) return false;
        return
            (
                MerchantName == input.MerchantName ||
                (MerchantName != null &&
                 MerchantName.Equals(input.MerchantName))
            ) &&
            (
                MerchantCategoryCode == input.MerchantCategoryCode ||
                (MerchantCategoryCode != null &&
                 MerchantCategoryCode.Equals(input.MerchantCategoryCode))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // MerchantName (string) maxLength
        if (MerchantName != null && MerchantName.Length > 350)
            yield return new ValidationResult("Invalid value for MerchantName, length must be less than 350.",
                new[] { "MerchantName" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TransactionComplexMerchantDetails {\n");
        sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
        sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TransactionComplexMerchantDetails);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (MerchantName != null) hashCode = hashCode * 59 + MerchantName.GetHashCode();
            if (MerchantCategoryCode != null) hashCode = hashCode * 59 + MerchantCategoryCode.GetHashCode();
            return hashCode;
        }
    }
}