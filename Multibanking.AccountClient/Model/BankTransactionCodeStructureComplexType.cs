/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Подробная информация для полной идентификации транзакции
/// </summary>
[DataContract(Name = "BankTransactionCodeStructureComplexType")]
public class BankTransactionCodeStructureComplexType : IEquatable<BankTransactionCodeStructureComplexType>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="BankTransactionCodeStructureComplexType" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected BankTransactionCodeStructureComplexType()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="BankTransactionCodeStructureComplexType" /> class.
    /// </summary>
    /// <param name="code">Множество внутри домена (required).</param>
    /// <param name="subCode">Подмножество внутри множества (required).</param>
    public BankTransactionCodeStructureComplexType(string code = default, string subCode = default)
    {
        // to ensure "code" is required (not null)
        if (code == null) throw new ArgumentNullException("code is a required property for BankTransactionCodeStructureComplexType and cannot be null");
        Code = code;
        // to ensure "subCode" is required (not null)
        if (subCode == null) throw new ArgumentNullException("subCode is a required property for BankTransactionCodeStructureComplexType and cannot be null");
        SubCode = subCode;
    }

    /// <summary>
    ///     Множество внутри домена
    /// </summary>
    /// <value>Множество внутри домена</value>
    [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
    public string Code { get; set; }

    /// <summary>
    ///     Подмножество внутри множества
    /// </summary>
    /// <value>Подмножество внутри множества</value>
    [DataMember(Name = "subCode", IsRequired = true, EmitDefaultValue = true)]
    public string SubCode { get; set; }

    /// <summary>
    ///     Returns true if BankTransactionCodeStructureComplexType instances are equal
    /// </summary>
    /// <param name="input">Instance of BankTransactionCodeStructureComplexType to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(BankTransactionCodeStructureComplexType input)
    {
        if (input == null) return false;
        return
            (
                Code == input.Code ||
                (Code != null &&
                 Code.Equals(input.Code))
            ) &&
            (
                SubCode == input.SubCode ||
                (SubCode != null &&
                 SubCode.Equals(input.SubCode))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class BankTransactionCodeStructureComplexType {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  SubCode: ").Append(SubCode).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as BankTransactionCodeStructureComplexType);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
            if (SubCode != null) hashCode = hashCode * 59 + SubCode.GetHashCode();
            return hashCode;
        }
    }
}