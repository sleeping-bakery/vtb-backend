/*
 * Получение информации о счете клиента третьей стороной
 *
 * Содержит описываются API для Открытых банковских интерфейсов по счетам и транзакциям.
 *
 * The version of the OpenAPI document: 1.2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Multibanking.AccountClient.Model;

/// <summary>
///     Комплексный объект транзакция
/// </summary>
[DataContract(Name = "TransactionComplex")]
public class TransactionComplex : IEquatable<TransactionComplex>, IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplex" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TransactionComplex()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="TransactionComplex" /> class.
    /// </summary>
    /// <param name="accountId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса accounts (required).</param>
    /// <param name="transactionId">Уникальный и неизменный идентификатор, используемый для идентификации ресурса transactions.</param>
    /// <param name="transactionReference">Уникальная ссылка на сделку.</param>
    /// <param name="creditDebitIndicator">Определяет является баланс кредитовым или дебетовым (required).</param>
    /// <param name="status">Статус транзакции (required).</param>
    /// <param name="bookingDateTime">
    ///     Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге обслуживающей организации. Используется стандарт ISO8601
    ///     (required).
    /// </param>
    /// <param name="valueDateTime">
    ///     Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или перестают быть доступными владельцу счета в случае ввода
    ///     дебетовой транзакции..
    /// </param>
    /// <param name="transactionInformation">Детали транзакции.</param>
    /// <param name="addressLine">Информация, которая находит и идентифицирует конкретный адрес для записи транзакции, который представлен в тексте в произвольном формате..</param>
    /// <param name="amount">amount (required).</param>
    /// <param name="chargeAmount">chargeAmount.</param>
    /// <param name="currencyExchange">currencyExchange.</param>
    /// <param name="bankTransactionCode">bankTransactionCode.</param>
    /// <param name="proprietaryBankTransactionCode">proprietaryBankTransactionCode.</param>
    /// <param name="balance">balance.</param>
    /// <param name="merchantDetails">merchantDetails.</param>
    /// <param name="creditorAgent">creditorAgent.</param>
    /// <param name="creditorAccount">creditorAccount.</param>
    /// <param name="debtorAgent">debtorAgent.</param>
    /// <param name="debtorAccount">debtorAccount.</param>
    /// <param name="cardInstrument">cardInstrument.</param>
    public TransactionComplex(string accountId = default, string transactionId = default, string transactionReference = default,
        CreditDebitIndicatorStaticType creditDebitIndicator = default, TransactionStatusStaticType status = default, DateTime bookingDateTime = default,
        DateTime valueDateTime = default, string transactionInformation = default, string addressLine = default, TransactionComplexTypeAmount amount = default,
        TransactionComplexChargeAmount chargeAmount = default, TransactionComplexCurrencyExchange currencyExchange = default,
        TransactionComplexBankTransactionCode bankTransactionCode = default, TransactionComplexProprietaryBankTransactionCode proprietaryBankTransactionCode = default,
        TransactionComplexBalance balance = default, TransactionComplexMerchantDetails merchantDetails = default, TransactionComplexCreditorAgent creditorAgent = default,
        TransactionComplexCreditorAccount creditorAccount = default, TransactionComplexTypeDebtorAgent debtorAgent = default,
        TransactionComplexDebtorAccount debtorAccount = default, TransactionComplexCardInstrument cardInstrument = default)
    {
        // to ensure "accountId" is required (not null)
        if (accountId == null) throw new ArgumentNullException("accountId is a required property for TransactionComplex and cannot be null");
        AccountId = accountId;
        CreditDebitIndicator = creditDebitIndicator;
        Status = status;
        BookingDateTime = bookingDateTime;
        // to ensure "amount" is required (not null)
        if (amount == null) throw new ArgumentNullException("amount is a required property for TransactionComplex and cannot be null");
        Amount = amount;
        TransactionId = transactionId;
        TransactionReference = transactionReference;
        ValueDateTime = valueDateTime;
        TransactionInformation = transactionInformation;
        AddressLine = addressLine;
        ChargeAmount = chargeAmount;
        CurrencyExchange = currencyExchange;
        BankTransactionCode = bankTransactionCode;
        ProprietaryBankTransactionCode = proprietaryBankTransactionCode;
        Balance = balance;
        MerchantDetails = merchantDetails;
        CreditorAgent = creditorAgent;
        CreditorAccount = creditorAccount;
        DebtorAgent = debtorAgent;
        DebtorAccount = debtorAccount;
        CardInstrument = cardInstrument;
    }

    /// <summary>
    ///     Определяет является баланс кредитовым или дебетовым
    /// </summary>
    /// <value>Определяет является баланс кредитовым или дебетовым</value>
    [DataMember(Name = "creditDebitIndicator", IsRequired = true, EmitDefaultValue = true)]
    public CreditDebitIndicatorStaticType CreditDebitIndicator { get; set; }

    /// <summary>
    ///     Статус транзакции
    /// </summary>
    /// <value>Статус транзакции</value>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
    public TransactionStatusStaticType Status { get; set; }

    /// <summary>
    ///     Уникальный и неизменный идентификатор, используемый для идентификации ресурса accounts
    /// </summary>
    /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса accounts</value>
    [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
    public string AccountId { get; set; }

    /// <summary>
    ///     Уникальный и неизменный идентификатор, используемый для идентификации ресурса transactions
    /// </summary>
    /// <value>Уникальный и неизменный идентификатор, используемый для идентификации ресурса transactions</value>
    [DataMember(Name = "transactionId", EmitDefaultValue = false)]
    public string TransactionId { get; set; }

    /// <summary>
    ///     Уникальная ссылка на сделку
    /// </summary>
    /// <value>Уникальная ссылка на сделку</value>
    [DataMember(Name = "transactionReference", EmitDefaultValue = false)]
    public string TransactionReference { get; set; }

    /// <summary>
    ///     Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге обслуживающей организации. Используется стандарт ISO8601
    /// </summary>
    /// <value>Дата и время, когда запись о транзакции публикуется на счете в бухгалтерской книге обслуживающей организации. Используется стандарт ISO8601</value>
    [DataMember(Name = "bookingDateTime", IsRequired = true, EmitDefaultValue = true)]
    public DateTime BookingDateTime { get; set; }

    /// <summary>
    ///     Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или перестают быть доступными владельцу счета в случае ввода дебетовой транзакции.
    /// </summary>
    /// <value>Дата и время, когда активы становятся доступными владельцу счета в случае ввода кредита или перестают быть доступными владельцу счета в случае ввода дебетовой транзакции.</value>
    [DataMember(Name = "valueDateTime", EmitDefaultValue = false)]
    public DateTime ValueDateTime { get; set; }

    /// <summary>
    ///     Детали транзакции
    /// </summary>
    /// <value>Детали транзакции</value>
    [DataMember(Name = "transactionInformation", EmitDefaultValue = false)]
    public string TransactionInformation { get; set; }

    /// <summary>
    ///     Информация, которая находит и идентифицирует конкретный адрес для записи транзакции, который представлен в тексте в произвольном формате.
    /// </summary>
    /// <value>Информация, которая находит и идентифицирует конкретный адрес для записи транзакции, который представлен в тексте в произвольном формате.</value>
    [DataMember(Name = "addressLine", EmitDefaultValue = false)]
    public string AddressLine { get; set; }

    /// <summary>
    ///     Gets or Sets Amount
    /// </summary>
    [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
    public TransactionComplexTypeAmount Amount { get; set; }

    /// <summary>
    ///     Gets or Sets ChargeAmount
    /// </summary>
    [DataMember(Name = "ChargeAmount", EmitDefaultValue = false)]
    public TransactionComplexChargeAmount ChargeAmount { get; set; }

    /// <summary>
    ///     Gets or Sets CurrencyExchange
    /// </summary>
    [DataMember(Name = "CurrencyExchange", EmitDefaultValue = false)]
    public TransactionComplexCurrencyExchange CurrencyExchange { get; set; }

    /// <summary>
    ///     Gets or Sets BankTransactionCode
    /// </summary>
    [DataMember(Name = "BankTransactionCode", EmitDefaultValue = false)]
    public TransactionComplexBankTransactionCode BankTransactionCode { get; set; }

    /// <summary>
    ///     Gets or Sets ProprietaryBankTransactionCode
    /// </summary>
    [DataMember(Name = "ProprietaryBankTransactionCode", EmitDefaultValue = false)]
    public TransactionComplexProprietaryBankTransactionCode ProprietaryBankTransactionCode { get; set; }

    /// <summary>
    ///     Gets or Sets Balance
    /// </summary>
    [DataMember(Name = "Balance", EmitDefaultValue = false)]
    public TransactionComplexBalance Balance { get; set; }

    /// <summary>
    ///     Gets or Sets MerchantDetails
    /// </summary>
    [DataMember(Name = "MerchantDetails", EmitDefaultValue = false)]
    public TransactionComplexMerchantDetails MerchantDetails { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAgent
    /// </summary>
    [DataMember(Name = "CreditorAgent", EmitDefaultValue = false)]
    public TransactionComplexCreditorAgent CreditorAgent { get; set; }

    /// <summary>
    ///     Gets or Sets CreditorAccount
    /// </summary>
    [DataMember(Name = "CreditorAccount", EmitDefaultValue = false)]
    public TransactionComplexCreditorAccount CreditorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAgent
    /// </summary>
    [DataMember(Name = "DebtorAgent", EmitDefaultValue = false)]
    public TransactionComplexTypeDebtorAgent DebtorAgent { get; set; }

    /// <summary>
    ///     Gets or Sets DebtorAccount
    /// </summary>
    [DataMember(Name = "DebtorAccount", EmitDefaultValue = false)]
    public TransactionComplexDebtorAccount DebtorAccount { get; set; }

    /// <summary>
    ///     Gets or Sets CardInstrument
    /// </summary>
    [DataMember(Name = "CardInstrument", EmitDefaultValue = false)]
    public TransactionComplexCardInstrument CardInstrument { get; set; }

    /// <summary>
    ///     Returns true if TransactionComplex instances are equal
    /// </summary>
    /// <param name="input">Instance of TransactionComplex to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TransactionComplex input)
    {
        if (input == null) return false;
        return
            (
                AccountId == input.AccountId ||
                (AccountId != null &&
                 AccountId.Equals(input.AccountId))
            ) &&
            (
                TransactionId == input.TransactionId ||
                (TransactionId != null &&
                 TransactionId.Equals(input.TransactionId))
            ) &&
            (
                TransactionReference == input.TransactionReference ||
                (TransactionReference != null &&
                 TransactionReference.Equals(input.TransactionReference))
            ) &&
            (
                CreditDebitIndicator == input.CreditDebitIndicator ||
                CreditDebitIndicator.Equals(input.CreditDebitIndicator)
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                BookingDateTime == input.BookingDateTime ||
                (BookingDateTime != null &&
                 BookingDateTime.Equals(input.BookingDateTime))
            ) &&
            (
                ValueDateTime == input.ValueDateTime ||
                (ValueDateTime != null &&
                 ValueDateTime.Equals(input.ValueDateTime))
            ) &&
            (
                TransactionInformation == input.TransactionInformation ||
                (TransactionInformation != null &&
                 TransactionInformation.Equals(input.TransactionInformation))
            ) &&
            (
                AddressLine == input.AddressLine ||
                (AddressLine != null &&
                 AddressLine.Equals(input.AddressLine))
            ) &&
            (
                Amount == input.Amount ||
                (Amount != null &&
                 Amount.Equals(input.Amount))
            ) &&
            (
                ChargeAmount == input.ChargeAmount ||
                (ChargeAmount != null &&
                 ChargeAmount.Equals(input.ChargeAmount))
            ) &&
            (
                CurrencyExchange == input.CurrencyExchange ||
                (CurrencyExchange != null &&
                 CurrencyExchange.Equals(input.CurrencyExchange))
            ) &&
            (
                BankTransactionCode == input.BankTransactionCode ||
                (BankTransactionCode != null &&
                 BankTransactionCode.Equals(input.BankTransactionCode))
            ) &&
            (
                ProprietaryBankTransactionCode == input.ProprietaryBankTransactionCode ||
                (ProprietaryBankTransactionCode != null &&
                 ProprietaryBankTransactionCode.Equals(input.ProprietaryBankTransactionCode))
            ) &&
            (
                Balance == input.Balance ||
                (Balance != null &&
                 Balance.Equals(input.Balance))
            ) &&
            (
                MerchantDetails == input.MerchantDetails ||
                (MerchantDetails != null &&
                 MerchantDetails.Equals(input.MerchantDetails))
            ) &&
            (
                CreditorAgent == input.CreditorAgent ||
                (CreditorAgent != null &&
                 CreditorAgent.Equals(input.CreditorAgent))
            ) &&
            (
                CreditorAccount == input.CreditorAccount ||
                (CreditorAccount != null &&
                 CreditorAccount.Equals(input.CreditorAccount))
            ) &&
            (
                DebtorAgent == input.DebtorAgent ||
                (DebtorAgent != null &&
                 DebtorAgent.Equals(input.DebtorAgent))
            ) &&
            (
                DebtorAccount == input.DebtorAccount ||
                (DebtorAccount != null &&
                 DebtorAccount.Equals(input.DebtorAccount))
            ) &&
            (
                CardInstrument == input.CardInstrument ||
                (CardInstrument != null &&
                 CardInstrument.Equals(input.CardInstrument))
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // TransactionReference (string) maxLength
        if (TransactionReference != null && TransactionReference.Length > 35)
            yield return new ValidationResult("Invalid value for TransactionReference, length must be less than 35.", new[] { "TransactionReference" });

        // TransactionInformation (string) maxLength
        if (TransactionInformation != null && TransactionInformation.Length > 500)
            yield return new ValidationResult("Invalid value for TransactionInformation, length must be less than 500.", new[] { "TransactionInformation" });

        // AddressLine (string) maxLength
        if (AddressLine != null && AddressLine.Length > 70)
            yield return new ValidationResult("Invalid value for AddressLine, length must be less than 70.", new[] { "AddressLine" });
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TransactionComplex {\n");
        sb.Append("  AccountId: ").Append(AccountId).Append("\n");
        sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
        sb.Append("  TransactionReference: ").Append(TransactionReference).Append("\n");
        sb.Append("  CreditDebitIndicator: ").Append(CreditDebitIndicator).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  BookingDateTime: ").Append(BookingDateTime).Append("\n");
        sb.Append("  ValueDateTime: ").Append(ValueDateTime).Append("\n");
        sb.Append("  TransactionInformation: ").Append(TransactionInformation).Append("\n");
        sb.Append("  AddressLine: ").Append(AddressLine).Append("\n");
        sb.Append("  Amount: ").Append(Amount).Append("\n");
        sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
        sb.Append("  CurrencyExchange: ").Append(CurrencyExchange).Append("\n");
        sb.Append("  BankTransactionCode: ").Append(BankTransactionCode).Append("\n");
        sb.Append("  ProprietaryBankTransactionCode: ").Append(ProprietaryBankTransactionCode).Append("\n");
        sb.Append("  Balance: ").Append(Balance).Append("\n");
        sb.Append("  MerchantDetails: ").Append(MerchantDetails).Append("\n");
        sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
        sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
        sb.Append("  DebtorAgent: ").Append(DebtorAgent).Append("\n");
        sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
        sb.Append("  CardInstrument: ").Append(CardInstrument).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TransactionComplex);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (AccountId != null) hashCode = hashCode * 59 + AccountId.GetHashCode();
            if (TransactionId != null) hashCode = hashCode * 59 + TransactionId.GetHashCode();
            if (TransactionReference != null) hashCode = hashCode * 59 + TransactionReference.GetHashCode();
            hashCode = hashCode * 59 + CreditDebitIndicator.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (BookingDateTime != null) hashCode = hashCode * 59 + BookingDateTime.GetHashCode();
            if (ValueDateTime != null) hashCode = hashCode * 59 + ValueDateTime.GetHashCode();
            if (TransactionInformation != null) hashCode = hashCode * 59 + TransactionInformation.GetHashCode();
            if (AddressLine != null) hashCode = hashCode * 59 + AddressLine.GetHashCode();
            if (Amount != null) hashCode = hashCode * 59 + Amount.GetHashCode();
            if (ChargeAmount != null) hashCode = hashCode * 59 + ChargeAmount.GetHashCode();
            if (CurrencyExchange != null) hashCode = hashCode * 59 + CurrencyExchange.GetHashCode();
            if (BankTransactionCode != null) hashCode = hashCode * 59 + BankTransactionCode.GetHashCode();
            if (ProprietaryBankTransactionCode != null) hashCode = hashCode * 59 + ProprietaryBankTransactionCode.GetHashCode();
            if (Balance != null) hashCode = hashCode * 59 + Balance.GetHashCode();
            if (MerchantDetails != null) hashCode = hashCode * 59 + MerchantDetails.GetHashCode();
            if (CreditorAgent != null) hashCode = hashCode * 59 + CreditorAgent.GetHashCode();
            if (CreditorAccount != null) hashCode = hashCode * 59 + CreditorAccount.GetHashCode();
            if (DebtorAgent != null) hashCode = hashCode * 59 + DebtorAgent.GetHashCode();
            if (DebtorAccount != null) hashCode = hashCode * 59 + DebtorAccount.GetHashCode();
            if (CardInstrument != null) hashCode = hashCode * 59 + CardInstrument.GetHashCode();
            return hashCode;
        }
    }
}